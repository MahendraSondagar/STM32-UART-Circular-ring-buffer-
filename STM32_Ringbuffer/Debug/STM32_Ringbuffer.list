
STM32_Ringbuffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e9c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08004024  08004024  00014024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800417c  0800417c  00020044  2**0
                  CONTENTS
  4 .ARM          00000008  0800417c  0800417c  0001417c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004184  08004184  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004184  08004184  00014184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004188  08004188  00014188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  0800418c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  20000044  080041d0  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00001804  20000584  080041d0  00020584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da84  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d16  00000000  00000000  0002daf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a08  00000000  00000000  0002f810  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000920  00000000  00000000  00030218  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000265fb  00000000  00000000  00030b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008e3a  00000000  00000000  00057133  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e97ba  00000000  00000000  0005ff6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00149727  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027cc  00000000  00000000  001497a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000044 	.word	0x20000044
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800400c 	.word	0x0800400c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000048 	.word	0x20000048
 80001c4:	0800400c 	.word	0x0800400c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fd9b 	bl	8001018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f825 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f89d 	bl	8000624 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Serial.begin(115200, DEBUG_PORT);
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <main+0x50>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2102      	movs	r1, #2
 80004f0:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80004f4:	4798      	blx	r3
  Serial.PrintString(WELCOME_MSG,DEBUG_PORT);
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <main+0x50>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	2102      	movs	r1, #2
 80004fc:	480b      	ldr	r0, [pc, #44]	; (800052c <main+0x54>)
 80004fe:	4798      	blx	r3
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(Serial.Available(DEBUG_PORT)>0)
 8000500:	4b09      	ldr	r3, [pc, #36]	; (8000528 <main+0x50>)
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	2002      	movs	r0, #2
 8000506:	4798      	blx	r3
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	ddf8      	ble.n	8000500 <main+0x28>
		{
			char temp= Serial.Read(DEBUG_PORT);
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <main+0x50>)
 8000510:	691b      	ldr	r3, [r3, #16]
 8000512:	2002      	movs	r0, #2
 8000514:	4798      	blx	r3
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
			Serial.Write(temp, DEBUG_PORT);
 800051a:	4b03      	ldr	r3, [pc, #12]	; (8000528 <main+0x50>)
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	79fa      	ldrb	r2, [r7, #7]
 8000520:	2102      	movs	r1, #2
 8000522:	4610      	mov	r0, r2
 8000524:	4798      	blx	r3
		if(Serial.Available(DEBUG_PORT)>0)
 8000526:	e7eb      	b.n	8000500 <main+0x28>
 8000528:	20000004 	.word	0x20000004
 800052c:	08004024 	.word	0x08004024

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b0b8      	sub	sp, #224	; 0xe0
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800053a:	2244      	movs	r2, #68	; 0x44
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f003 fd5c 	bl	8003ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000554:	463b      	mov	r3, r7
 8000556:	2288      	movs	r2, #136	; 0x88
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f003 fd4e 	bl	8003ffc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000560:	2310      	movs	r3, #16
 8000562:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000566:	2301      	movs	r3, #1
 8000568:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000572:	2360      	movs	r3, #96	; 0x60
 8000574:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	2302      	movs	r3, #2
 800057a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800057e:	2301      	movs	r3, #1
 8000580:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000584:	2301      	movs	r3, #1
 8000586:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800058a:	2328      	movs	r3, #40	; 0x28
 800058c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000590:	2307      	movs	r3, #7
 8000592:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059c:	2302      	movs	r3, #2
 800059e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 fa66 	bl	8001a78 <HAL_RCC_OscConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80005b2:	f000 f8a5 	bl	8000700 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	230f      	movs	r3, #15
 80005b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	2303      	movs	r3, #3
 80005be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005d8:	2104      	movs	r1, #4
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 fe32 	bl	8002244 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xba>
  {
    Error_Handler();
 80005e6:	f000 f88b 	bl	8000700 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80005ea:	2303      	movs	r3, #3
 80005ec:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005ee:	2300      	movs	r3, #0
 80005f0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f6:	463b      	mov	r3, r7
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 f827 	bl	800264c <HAL_RCCEx_PeriphCLKConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000604:	f000 f87c 	bl	8000700 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000608:	f44f 7000 	mov.w	r0, #512	; 0x200
 800060c:	f001 f9de 	bl	80019cc <HAL_PWREx_ControlVoltageScaling>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000616:	f000 f873 	bl	8000700 <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	37e0      	adds	r7, #224	; 0xe0
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	; 0x28
 8000628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b2e      	ldr	r3, [pc, #184]	; (80006f4 <MX_GPIO_Init+0xd0>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	4a2d      	ldr	r2, [pc, #180]	; (80006f4 <MX_GPIO_Init+0xd0>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000646:	4b2b      	ldr	r3, [pc, #172]	; (80006f4 <MX_GPIO_Init+0xd0>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000652:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <MX_GPIO_Init+0xd0>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	4a27      	ldr	r2, [pc, #156]	; (80006f4 <MX_GPIO_Init+0xd0>)
 8000658:	f043 0310 	orr.w	r3, r3, #16
 800065c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065e:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <MX_GPIO_Init+0xd0>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	f003 0310 	and.w	r3, r3, #16
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b22      	ldr	r3, [pc, #136]	; (80006f4 <MX_GPIO_Init+0xd0>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <MX_GPIO_Init+0xd0>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000676:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <MX_GPIO_Init+0xd0>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000682:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <MX_GPIO_Init+0xd0>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	4a1b      	ldr	r2, [pc, #108]	; (80006f4 <MX_GPIO_Init+0xd0>)
 8000688:	f043 0308 	orr.w	r3, r3, #8
 800068c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_GPIO_Init+0xd0>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	f003 0308 	and.w	r3, r3, #8
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2104      	movs	r1, #4
 800069e:	4816      	ldr	r0, [pc, #88]	; (80006f8 <MX_GPIO_Init+0xd4>)
 80006a0:	f001 f96e 	bl	8001980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006aa:	4814      	ldr	r0, [pc, #80]	; (80006fc <MX_GPIO_Init+0xd8>)
 80006ac:	f001 f968 	bl	8001980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80006b0:	2304      	movs	r3, #4
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006bc:	2302      	movs	r3, #2
 80006be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	480c      	ldr	r0, [pc, #48]	; (80006f8 <MX_GPIO_Init+0xd4>)
 80006c8:	f000 febe 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80006cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d2:	2301      	movs	r3, #1
 80006d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006da:	2302      	movs	r3, #2
 80006dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_GPIO_Init+0xd8>)
 80006e6:	f000 feaf 	bl	8001448 <HAL_GPIO_Init>

}
 80006ea:	bf00      	nop
 80006ec:	3728      	adds	r7, #40	; 0x28
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40021000 	.word	0x40021000
 80006f8:	48000400 	.word	0x48000400
 80006fc:	48001000 	.word	0x48001000

08000700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000704:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000706:	e7fe      	b.n	8000706 <Error_Handler+0x6>

08000708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <HAL_MspInit+0x44>)
 8000710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000712:	4a0e      	ldr	r2, [pc, #56]	; (800074c <HAL_MspInit+0x44>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6613      	str	r3, [r2, #96]	; 0x60
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <HAL_MspInit+0x44>)
 800071c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <HAL_MspInit+0x44>)
 8000728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800072a:	4a08      	ldr	r2, [pc, #32]	; (800074c <HAL_MspInit+0x44>)
 800072c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000730:	6593      	str	r3, [r2, #88]	; 0x58
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_MspInit+0x44>)
 8000734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000

08000750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08c      	sub	sp, #48	; 0x30
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a37      	ldr	r2, [pc, #220]	; (800084c <HAL_UART_MspInit+0xfc>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d132      	bne.n	80007d8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000772:	4b37      	ldr	r3, [pc, #220]	; (8000850 <HAL_UART_MspInit+0x100>)
 8000774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000776:	4a36      	ldr	r2, [pc, #216]	; (8000850 <HAL_UART_MspInit+0x100>)
 8000778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077c:	6613      	str	r3, [r2, #96]	; 0x60
 800077e:	4b34      	ldr	r3, [pc, #208]	; (8000850 <HAL_UART_MspInit+0x100>)
 8000780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000786:	61bb      	str	r3, [r7, #24]
 8000788:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	4b31      	ldr	r3, [pc, #196]	; (8000850 <HAL_UART_MspInit+0x100>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a30      	ldr	r2, [pc, #192]	; (8000850 <HAL_UART_MspInit+0x100>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b2e      	ldr	r3, [pc, #184]	; (8000850 <HAL_UART_MspInit+0x100>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b0:	2303      	movs	r3, #3
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007b4:	2307      	movs	r3, #7
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c2:	f000 fe41 	bl	8001448 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2101      	movs	r1, #1
 80007ca:	2025      	movs	r0, #37	; 0x25
 80007cc:	f000 fdb7 	bl	800133e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007d0:	2025      	movs	r0, #37	; 0x25
 80007d2:	f000 fdd0 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007d6:	e034      	b.n	8000842 <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART2)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a1d      	ldr	r2, [pc, #116]	; (8000854 <HAL_UART_MspInit+0x104>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d12f      	bne.n	8000842 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80007e2:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <HAL_UART_MspInit+0x100>)
 80007e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e6:	4a1a      	ldr	r2, [pc, #104]	; (8000850 <HAL_UART_MspInit+0x100>)
 80007e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ec:	6593      	str	r3, [r2, #88]	; 0x58
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <HAL_UART_MspInit+0x100>)
 80007f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <HAL_UART_MspInit+0x100>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a14      	ldr	r2, [pc, #80]	; (8000850 <HAL_UART_MspInit+0x100>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_UART_MspInit+0x100>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000812:	2360      	movs	r3, #96	; 0x60
 8000814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000816:	2302      	movs	r3, #2
 8000818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081e:	2303      	movs	r3, #3
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000822:	2307      	movs	r3, #7
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	480a      	ldr	r0, [pc, #40]	; (8000858 <HAL_UART_MspInit+0x108>)
 800082e:	f000 fe0b 	bl	8001448 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2100      	movs	r1, #0
 8000836:	2026      	movs	r0, #38	; 0x26
 8000838:	f000 fd81 	bl	800133e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800083c:	2026      	movs	r0, #38	; 0x26
 800083e:	f000 fd9a 	bl	8001376 <HAL_NVIC_EnableIRQ>
}
 8000842:	bf00      	nop
 8000844:	3730      	adds	r7, #48	; 0x30
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40013800 	.word	0x40013800
 8000850:	40021000 	.word	0x40021000
 8000854:	40004400 	.word	0x40004400
 8000858:	48000c00 	.word	0x48000c00

0800085c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a14      	ldr	r2, [pc, #80]	; (80008bc <HAL_UART_MspDeInit+0x60>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d10f      	bne.n	800088e <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <HAL_UART_MspDeInit+0x64>)
 8000870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000872:	4a13      	ldr	r2, [pc, #76]	; (80008c0 <HAL_UART_MspDeInit+0x64>)
 8000874:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000878:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800087a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800087e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000882:	f000 ff89 	bl	8001798 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000886:	2025      	movs	r0, #37	; 0x25
 8000888:	f000 fd83 	bl	8001392 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800088c:	e011      	b.n	80008b2 <HAL_UART_MspDeInit+0x56>
  else if(huart->Instance==USART2)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a0c      	ldr	r2, [pc, #48]	; (80008c4 <HAL_UART_MspDeInit+0x68>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d10c      	bne.n	80008b2 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <HAL_UART_MspDeInit+0x64>)
 800089a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089c:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <HAL_UART_MspDeInit+0x64>)
 800089e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80008a2:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_5|GPIO_PIN_6);
 80008a4:	2160      	movs	r1, #96	; 0x60
 80008a6:	4808      	ldr	r0, [pc, #32]	; (80008c8 <HAL_UART_MspDeInit+0x6c>)
 80008a8:	f000 ff76 	bl	8001798 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80008ac:	2026      	movs	r0, #38	; 0x26
 80008ae:	f000 fd70 	bl	8001392 <HAL_NVIC_DisableIRQ>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40013800 	.word	0x40013800
 80008c0:	40021000 	.word	0x40021000
 80008c4:	40004400 	.word	0x40004400
 80008c8:	48000c00 	.word	0x48000c00

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <NMI_Handler+0x4>

080008d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <HardFault_Handler+0x4>

080008d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <MemManage_Handler+0x4>

080008de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000918:	f000 fbd2 	bl	80010c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}

08000920 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000924:	4802      	ldr	r0, [pc, #8]	; (8000930 <USART1_IRQHandler+0x10>)
 8000926:	f002 fcf9 	bl	800331c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000078 	.word	0x20000078

08000934 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000938:	4802      	ldr	r0, [pc, #8]	; (8000944 <USART2_IRQHandler+0x10>)
 800093a:	f002 fcef 	bl	800331c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200000fc 	.word	0x200000fc

08000948 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800094c:	4b17      	ldr	r3, [pc, #92]	; (80009ac <SystemInit+0x64>)
 800094e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000952:	4a16      	ldr	r2, [pc, #88]	; (80009ac <SystemInit+0x64>)
 8000954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <SystemInit+0x68>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a13      	ldr	r2, [pc, #76]	; (80009b0 <SystemInit+0x68>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <SystemInit+0x68>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <SystemInit+0x68>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <SystemInit+0x68>)
 8000974:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000978:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800097c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <SystemInit+0x68>)
 8000980:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000984:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <SystemInit+0x68>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a09      	ldr	r2, [pc, #36]	; (80009b0 <SystemInit+0x68>)
 800098c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000990:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000992:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <SystemInit+0x68>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <SystemInit+0x64>)
 800099a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800099e:	609a      	str	r2, [r3, #8]
#endif
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00
 80009b0:	40021000 	.word	0x40021000

080009b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009b8:	f7ff ffc6 	bl	8000948 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80009bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80009be:	e003      	b.n	80009c8 <LoopCopyDataInit>

080009c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80009c0:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80009c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80009c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80009c6:	3104      	adds	r1, #4

080009c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80009c8:	480a      	ldr	r0, [pc, #40]	; (80009f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80009cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80009ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80009d0:	d3f6      	bcc.n	80009c0 <CopyDataInit>
	ldr	r2, =_sbss
 80009d2:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80009d4:	e002      	b.n	80009dc <LoopFillZerobss>

080009d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80009d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80009d8:	f842 3b04 	str.w	r3, [r2], #4

080009dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <LoopForever+0x16>)
	cmp	r2, r3
 80009de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80009e0:	d3f9      	bcc.n	80009d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009e2:	f003 fae7 	bl	8003fb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009e6:	f7ff fd77 	bl	80004d8 <main>

080009ea <LoopForever>:

LoopForever:
    b LoopForever
 80009ea:	e7fe      	b.n	80009ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009ec:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80009f0:	0800418c 	.word	0x0800418c
	ldr	r0, =_sdata
 80009f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80009f8:	20000044 	.word	0x20000044
	ldr	r2, =_sbss
 80009fc:	20000044 	.word	0x20000044
	ldr	r3, = _ebss
 8000a00:	20000584 	.word	0x20000584

08000a04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC1_2_IRQHandler>

08000a06 <delay>:
extern UART_HandleTypeDef huart1;
extern char rx2_temp[1];
extern char rx1_temp[1];

static __inline void delay(long x)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
	HAL_Delay(x);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 fb75 	bl	8001100 <HAL_Delay>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <Serialbegin>:
};


// connects the internal peripheral in the processor and configures it
void Serialbegin(long baud, uint8_t portNum)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	70fb      	strb	r3, [r7, #3]

	// defaults to 8-bit, no parity, 1 stop bit

	switch(portNum)
 8000a2c:	78fb      	ldrb	r3, [r7, #3]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d002      	beq.n	8000a38 <Serialbegin+0x18>
 8000a32:	2b02      	cmp	r3, #2
 8000a34:	d031      	beq.n	8000a9a <Serialbegin+0x7a>

		break;

	default :

		break;
 8000a36:	e061      	b.n	8000afc <Serialbegin+0xdc>
		  huart1.Instance = USART1;
 8000a38:	4b32      	ldr	r3, [pc, #200]	; (8000b04 <Serialbegin+0xe4>)
 8000a3a:	4a33      	ldr	r2, [pc, #204]	; (8000b08 <Serialbegin+0xe8>)
 8000a3c:	601a      	str	r2, [r3, #0]
		  huart1.Init.BaudRate = 115200;
 8000a3e:	4b31      	ldr	r3, [pc, #196]	; (8000b04 <Serialbegin+0xe4>)
 8000a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a44:	605a      	str	r2, [r3, #4]
		  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b2f      	ldr	r3, [pc, #188]	; (8000b04 <Serialbegin+0xe4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
		  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b2d      	ldr	r3, [pc, #180]	; (8000b04 <Serialbegin+0xe4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
		  huart1.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b2c      	ldr	r3, [pc, #176]	; (8000b04 <Serialbegin+0xe4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
		  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b2a      	ldr	r3, [pc, #168]	; (8000b04 <Serialbegin+0xe4>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
		  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b29      	ldr	r3, [pc, #164]	; (8000b04 <Serialbegin+0xe4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
		  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a64:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <Serialbegin+0xe4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
		  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6a:	4b26      	ldr	r3, [pc, #152]	; (8000b04 <Serialbegin+0xe4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
		  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a70:	4b24      	ldr	r3, [pc, #144]	; (8000b04 <Serialbegin+0xe4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	; 0x24
		  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a76:	4823      	ldr	r0, [pc, #140]	; (8000b04 <Serialbegin+0xe4>)
 8000a78:	f002 fa98 	bl	8002fac <HAL_UART_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <Serialbegin+0x66>
		    Error_Handler();
 8000a82:	f7ff fe3d 	bl	8000700 <Error_Handler>
		  delay(500);
 8000a86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a8a:	f7ff ffbc 	bl	8000a06 <delay>
		  HAL_UART_Receive_IT(&huart1, (uint8_t *)rx1_temp, 1);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	491e      	ldr	r1, [pc, #120]	; (8000b0c <Serialbegin+0xec>)
 8000a92:	481c      	ldr	r0, [pc, #112]	; (8000b04 <Serialbegin+0xe4>)
 8000a94:	f002 fba0 	bl	80031d8 <HAL_UART_Receive_IT>
		break;
 8000a98:	e030      	b.n	8000afc <Serialbegin+0xdc>
		  huart2.Instance = USART2;
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <Serialbegin+0xf0>)
 8000a9c:	4a1d      	ldr	r2, [pc, #116]	; (8000b14 <Serialbegin+0xf4>)
 8000a9e:	601a      	str	r2, [r3, #0]
		  huart2.Init.BaudRate = 115200;
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <Serialbegin+0xf0>)
 8000aa2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa6:	605a      	str	r2, [r3, #4]
		  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa8:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <Serialbegin+0xf0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
		  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aae:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <Serialbegin+0xf0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
		  huart2.Init.Parity = UART_PARITY_NONE;
 8000ab4:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <Serialbegin+0xf0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
		  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <Serialbegin+0xf0>)
 8000abc:	220c      	movs	r2, #12
 8000abe:	615a      	str	r2, [r3, #20]
		  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <Serialbegin+0xf0>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
		  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <Serialbegin+0xf0>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	61da      	str	r2, [r3, #28]
		  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000acc:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <Serialbegin+0xf0>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	621a      	str	r2, [r3, #32]
		  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <Serialbegin+0xf0>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	625a      	str	r2, [r3, #36]	; 0x24
		  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad8:	480d      	ldr	r0, [pc, #52]	; (8000b10 <Serialbegin+0xf0>)
 8000ada:	f002 fa67 	bl	8002fac <HAL_UART_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <Serialbegin+0xc8>
		    Error_Handler();
 8000ae4:	f7ff fe0c 	bl	8000700 <Error_Handler>
		  delay(500);
 8000ae8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aec:	f7ff ff8b 	bl	8000a06 <delay>
		  HAL_UART_Receive_IT(&huart2, (uint8_t *)rx2_temp, 1);
 8000af0:	2201      	movs	r2, #1
 8000af2:	4909      	ldr	r1, [pc, #36]	; (8000b18 <Serialbegin+0xf8>)
 8000af4:	4806      	ldr	r0, [pc, #24]	; (8000b10 <Serialbegin+0xf0>)
 8000af6:	f002 fb6f 	bl	80031d8 <HAL_UART_Receive_IT>
		break;
 8000afa:	bf00      	nop
	}

}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000078 	.word	0x20000078
 8000b08:	40013800 	.word	0x40013800
 8000b0c:	20000064 	.word	0x20000064
 8000b10:	200000fc 	.word	0x200000fc
 8000b14:	40004400 	.word	0x40004400
 8000b18:	20000060 	.word	0x20000060

08000b1c <Serialclose>:


// disconnects the internal peripheral in the processor
void Serialclose(uint8_t portNum)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
  switch(portNum)
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d002      	beq.n	8000b32 <Serialclose+0x16>
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d004      	beq.n	8000b3a <Serialclose+0x1e>
	  break;
  case 2:
	  HAL_UART_DeInit(&huart2);
	  break;
  default:
	  break;
 8000b30:	e007      	b.n	8000b42 <Serialclose+0x26>
	  HAL_UART_DeInit(&huart1);
 8000b32:	4806      	ldr	r0, [pc, #24]	; (8000b4c <Serialclose+0x30>)
 8000b34:	f002 fa88 	bl	8003048 <HAL_UART_DeInit>
	  break;
 8000b38:	e003      	b.n	8000b42 <Serialclose+0x26>
	  HAL_UART_DeInit(&huart2);
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <Serialclose+0x34>)
 8000b3c:	f002 fa84 	bl	8003048 <HAL_UART_DeInit>
	  break;
 8000b40:	bf00      	nop
  }
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000078 	.word	0x20000078
 8000b50:	200000fc 	.word	0x200000fc

08000b54 <SerialWrite>:


void SerialWrite(unsigned char c, uint8_t portNum)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	460a      	mov	r2, r1
 8000b5e:	71fb      	strb	r3, [r7, #7]
 8000b60:	4613      	mov	r3, r2
 8000b62:	71bb      	strb	r3, [r7, #6]
	 switch(portNum)
 8000b64:	79bb      	ldrb	r3, [r7, #6]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d002      	beq.n	8000b70 <SerialWrite+0x1c>
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d007      	beq.n	8000b7e <SerialWrite+0x2a>
		 break;
	 case 2:
		 HAL_UART_Transmit(&huart2, &c, 1, SERIAL_DEFAULT_TIMEOUT);
		 break;
	 default :
		 break;
 8000b6e:	e00d      	b.n	8000b8c <SerialWrite+0x38>
		 HAL_UART_Transmit(&huart1, &c, 1, SERIAL_DEFAULT_TIMEOUT);
 8000b70:	1df9      	adds	r1, r7, #7
 8000b72:	2364      	movs	r3, #100	; 0x64
 8000b74:	2201      	movs	r2, #1
 8000b76:	4807      	ldr	r0, [pc, #28]	; (8000b94 <SerialWrite+0x40>)
 8000b78:	f002 fa9b 	bl	80030b2 <HAL_UART_Transmit>
		 break;
 8000b7c:	e006      	b.n	8000b8c <SerialWrite+0x38>
		 HAL_UART_Transmit(&huart2, &c, 1, SERIAL_DEFAULT_TIMEOUT);
 8000b7e:	1df9      	adds	r1, r7, #7
 8000b80:	2364      	movs	r3, #100	; 0x64
 8000b82:	2201      	movs	r2, #1
 8000b84:	4804      	ldr	r0, [pc, #16]	; (8000b98 <SerialWrite+0x44>)
 8000b86:	f002 fa94 	bl	80030b2 <HAL_UART_Transmit>
		 break;
 8000b8a:	bf00      	nop
	 }
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000078 	.word	0x20000078
 8000b98:	200000fc 	.word	0x200000fc

08000b9c <SerialAvailable>:

int SerialAvailable(uint8_t portNum)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
	switch(portNum)
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d003      	beq.n	8000bb4 <SerialAvailable+0x18>
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d010      	beq.n	8000bd2 <SerialAvailable+0x36>
		break;
	case 2:
		return (RX_BUFFER_SIZE_2 + rx_buffer_head2 - rx_buffer_tail2) % RX_BUFFER_SIZE_2;
		break;
	default:
		break;
 8000bb0:	bf00      	nop
	}
}
 8000bb2:	e01c      	b.n	8000bee <SerialAvailable+0x52>
		return (RX_BUFFER_SIZE_1 + rx_buffer_head1 - rx_buffer_tail1) % RX_BUFFER_SIZE_1;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <SerialAvailable+0x60>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8000bbc:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <SerialAvailable+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	425a      	negs	r2, r3
 8000bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000bc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000bcc:	bf58      	it	pl
 8000bce:	4253      	negpl	r3, r2
 8000bd0:	e00d      	b.n	8000bee <SerialAvailable+0x52>
		return (RX_BUFFER_SIZE_2 + rx_buffer_head2 - rx_buffer_tail2) % RX_BUFFER_SIZE_2;
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <SerialAvailable+0x68>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <SerialAvailable+0x6c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	425a      	negs	r2, r3
 8000be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000be6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000bea:	bf58      	it	pl
 8000bec:	4253      	negpl	r3, r2
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000068 	.word	0x20000068
 8000c00:	2000006c 	.word	0x2000006c
 8000c04:	20000070 	.word	0x20000070
 8000c08:	20000074 	.word	0x20000074

08000c0c <SerialRead>:

int SerialRead(uint8_t portNum)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
	switch(portNum)
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d003      	beq.n	8000c24 <SerialRead+0x18>
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d01d      	beq.n	8000c5c <SerialRead+0x50>
					rx_buffer_tail2 = (rx_buffer_tail2 + 1) % RX_BUFFER_SIZE_2;
					return c;
				}
		break;
	default:
		break;
 8000c20:	bf00      	nop
	}
}
 8000c22:	e036      	b.n	8000c92 <SerialRead+0x86>
		if (rx_buffer_head1 == rx_buffer_tail1) {
 8000c24:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <SerialRead+0x94>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <SerialRead+0x98>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d102      	bne.n	8000c36 <SerialRead+0x2a>
					return -1;
 8000c30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c34:	e02d      	b.n	8000c92 <SerialRead+0x86>
					unsigned char c = rx_buffer1[rx_buffer_tail1];
 8000c36:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <SerialRead+0x98>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a1b      	ldr	r2, [pc, #108]	; (8000ca8 <SerialRead+0x9c>)
 8000c3c:	5cd3      	ldrb	r3, [r2, r3]
 8000c3e:	73bb      	strb	r3, [r7, #14]
					rx_buffer_tail1 = (rx_buffer_tail1 + 1) % RX_BUFFER_SIZE_1;
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <SerialRead+0x98>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	3301      	adds	r3, #1
 8000c46:	425a      	negs	r2, r3
 8000c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c50:	bf58      	it	pl
 8000c52:	4253      	negpl	r3, r2
 8000c54:	4a13      	ldr	r2, [pc, #76]	; (8000ca4 <SerialRead+0x98>)
 8000c56:	6013      	str	r3, [r2, #0]
					return c;
 8000c58:	7bbb      	ldrb	r3, [r7, #14]
 8000c5a:	e01a      	b.n	8000c92 <SerialRead+0x86>
				if (rx_buffer_head2 == rx_buffer_tail2) {
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <SerialRead+0xa0>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <SerialRead+0xa4>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d102      	bne.n	8000c6e <SerialRead+0x62>
					return -1;
 8000c68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c6c:	e011      	b.n	8000c92 <SerialRead+0x86>
					unsigned char c = rx_buffer2[rx_buffer_tail2];
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <SerialRead+0xa4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a10      	ldr	r2, [pc, #64]	; (8000cb4 <SerialRead+0xa8>)
 8000c74:	5cd3      	ldrb	r3, [r2, r3]
 8000c76:	73fb      	strb	r3, [r7, #15]
					rx_buffer_tail2 = (rx_buffer_tail2 + 1) % RX_BUFFER_SIZE_2;
 8000c78:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <SerialRead+0xa4>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	425a      	negs	r2, r3
 8000c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c88:	bf58      	it	pl
 8000c8a:	4253      	negpl	r3, r2
 8000c8c:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <SerialRead+0xa4>)
 8000c8e:	6013      	str	r3, [r2, #0]
					return c;
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000068 	.word	0x20000068
 8000ca4:	2000006c 	.word	0x2000006c
 8000ca8:	20000180 	.word	0x20000180
 8000cac:	20000070 	.word	0x20000070
 8000cb0:	20000074 	.word	0x20000074
 8000cb4:	20000380 	.word	0x20000380

08000cb8 <SerialFlush>:

void SerialFlush(uint8_t portNum)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
	// occurs after reading the value of rx_buffer_head but before writing
	// the value to rx_buffer_tail; the previous value of rx_buffer_head
	// may be written to rx_buffer_tail, making it appear as if the buffer
	// were full, not empty.

	switch(portNum)
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d002      	beq.n	8000cce <SerialFlush+0x16>
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d008      	beq.n	8000cde <SerialFlush+0x26>
	case 2:
		rx_buffer_tail2=0;
	    rx_buffer_head2 = rx_buffer_tail2;
		break;
	default :
		break;
 8000ccc:	e00f      	b.n	8000cee <SerialFlush+0x36>
		rx_buffer_tail1=0;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <SerialFlush+0x44>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
	    rx_buffer_head1 = rx_buffer_tail1;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <SerialFlush+0x44>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a09      	ldr	r2, [pc, #36]	; (8000d00 <SerialFlush+0x48>)
 8000cda:	6013      	str	r3, [r2, #0]
		break;
 8000cdc:	e007      	b.n	8000cee <SerialFlush+0x36>
		rx_buffer_tail2=0;
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <SerialFlush+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
	    rx_buffer_head2 = rx_buffer_tail2;
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <SerialFlush+0x4c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a07      	ldr	r2, [pc, #28]	; (8000d08 <SerialFlush+0x50>)
 8000cea:	6013      	str	r3, [r2, #0]
		break;
 8000cec:	bf00      	nop
	}
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	2000006c 	.word	0x2000006c
 8000d00:	20000068 	.word	0x20000068
 8000d04:	20000074 	.word	0x20000074
 8000d08:	20000070 	.word	0x20000070

08000d0c <SerialprintMode>:


void SerialprintMode(int mode, uint8_t portNum)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	70fb      	strb	r3, [r7, #3]
	// do nothing, we only support serial printing, not lcd.
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <SerialprintByte>:

void SerialprintByte(unsigned char c, uint8_t portNum)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	460a      	mov	r2, r1
 8000d2e:	71fb      	strb	r3, [r7, #7]
 8000d30:	4613      	mov	r3, r2
 8000d32:	71bb      	strb	r3, [r7, #6]
	SerialWrite(c, portNum);
 8000d34:	79ba      	ldrb	r2, [r7, #6]
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff0a 	bl	8000b54 <SerialWrite>
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <SerialprintString>:
	SerialprintByte('\r', portNum);
	SerialprintByte('\n', portNum);
}

void SerialprintString(const char *s, uint8_t portNum)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	70fb      	strb	r3, [r7, #3]
	switch(portNum)
 8000d54:	78fb      	ldrb	r3, [r7, #3]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d002      	beq.n	8000d60 <SerialprintString+0x18>
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d00b      	beq.n	8000d76 <SerialprintString+0x2e>
	case 2:
		HAL_UART_Transmit(&huart2, (uint8_t *)s, strlen(s), SERIAL_DEFAULT_TIMEOUT);
		break;

	default :
		break;
 8000d5e:	e015      	b.n	8000d8c <SerialprintString+0x44>
		HAL_UART_Transmit(&huart1, (uint8_t *)s, strlen(s), SERIAL_DEFAULT_TIMEOUT);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff fa31 	bl	80001c8 <strlen>
 8000d66:	4603      	mov	r3, r0
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	2364      	movs	r3, #100	; 0x64
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	4809      	ldr	r0, [pc, #36]	; (8000d94 <SerialprintString+0x4c>)
 8000d70:	f002 f99f 	bl	80030b2 <HAL_UART_Transmit>
		break;
 8000d74:	e00a      	b.n	8000d8c <SerialprintString+0x44>
		HAL_UART_Transmit(&huart2, (uint8_t *)s, strlen(s), SERIAL_DEFAULT_TIMEOUT);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff fa26 	bl	80001c8 <strlen>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	2364      	movs	r3, #100	; 0x64
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	4804      	ldr	r0, [pc, #16]	; (8000d98 <SerialprintString+0x50>)
 8000d86:	f002 f994 	bl	80030b2 <HAL_UART_Transmit>
		break;
 8000d8a:	bf00      	nop
	}

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000078 	.word	0x20000078
 8000d98:	200000fc 	.word	0x200000fc

08000d9c <SerialprintIntegerInBase>:

void SerialprintIntegerInBase(unsigned long n, unsigned long base, uint8_t portNum)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08e      	sub	sp, #56	; 0x38
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	4613      	mov	r3, r2
 8000da8:	71fb      	strb	r3, [r7, #7]
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars.
	unsigned long i = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	637b      	str	r3, [r7, #52]	; 0x34

	if (n == 0) {
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d11b      	bne.n	8000dec <SerialprintIntegerInBase+0x50>
		SerialprintByte('0', portNum);
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	4619      	mov	r1, r3
 8000db8:	2030      	movs	r0, #48	; 0x30
 8000dba:	f7ff ffb3 	bl	8000d24 <SerialprintByte>
 8000dbe:	e040      	b.n	8000e42 <SerialprintIntegerInBase+0xa6>
		return;
	}

	while (n > 0) {
		buf[i++] = n % base;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	fbb3 f2f2 	udiv	r2, r3, r2
 8000dc8:	68b9      	ldr	r1, [r7, #8]
 8000dca:	fb01 f202 	mul.w	r2, r1, r2
 8000dce:	1a99      	subs	r1, r3, r2
 8000dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dd2:	1c5a      	adds	r2, r3, #1
 8000dd4:	637a      	str	r2, [r7, #52]	; 0x34
 8000dd6:	b2ca      	uxtb	r2, r1
 8000dd8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000ddc:	440b      	add	r3, r1
 8000dde:	f803 2c24 	strb.w	r2, [r3, #-36]
		n /= base;
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dea:	60fb      	str	r3, [r7, #12]
	while (n > 0) {
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1e6      	bne.n	8000dc0 <SerialprintIntegerInBase+0x24>
	}

	for (; i > 0; i--)
 8000df2:	e023      	b.n	8000e3c <SerialprintIntegerInBase+0xa0>
		SerialprintByte(buf[i - 1] < 10 ?
 8000df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df6:	3b01      	subs	r3, #1
 8000df8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000dfc:	4413      	add	r3, r2
 8000dfe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e02:	2b09      	cmp	r3, #9
 8000e04:	d809      	bhi.n	8000e1a <SerialprintIntegerInBase+0x7e>
			'0' + buf[i - 1] :
 8000e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000e0e:	4413      	add	r3, r2
 8000e10:	f813 3c24 	ldrb.w	r3, [r3, #-36]
		SerialprintByte(buf[i - 1] < 10 ?
 8000e14:	3330      	adds	r3, #48	; 0x30
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	e008      	b.n	8000e2c <SerialprintIntegerInBase+0x90>
			'A' + buf[i - 1] - 10, portNum);
 8000e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000e22:	4413      	add	r3, r2
 8000e24:	f813 3c24 	ldrb.w	r3, [r3, #-36]
		SerialprintByte(buf[i - 1] < 10 ?
 8000e28:	3337      	adds	r3, #55	; 0x37
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	79fa      	ldrb	r2, [r7, #7]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff77 	bl	8000d24 <SerialprintByte>
	for (; i > 0; i--)
 8000e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8000e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1d8      	bne.n	8000df4 <SerialprintIntegerInBase+0x58>
}
 8000e42:	3738      	adds	r7, #56	; 0x38
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <Serialputhex>:


void Serialputhex(char ch, uint8_t portNum) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	460a      	mov	r2, r1
 8000e52:	71fb      	strb	r3, [r7, #7]
 8000e54:	4613      	mov	r3, r2
 8000e56:	71bb      	strb	r3, [r7, #6]
    char ah,al;

    ah = (ch & 0xf0) >> 4;
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	091b      	lsrs	r3, r3, #4
 8000e5c:	73fb      	strb	r3, [r7, #15]
    if(ah >= 0x0a) {
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	2b09      	cmp	r3, #9
 8000e62:	d903      	bls.n	8000e6c <Serialputhex+0x24>
	ah = ah - 0x0a + 'A';
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	3337      	adds	r3, #55	; 0x37
 8000e68:	73fb      	strb	r3, [r7, #15]
 8000e6a:	e002      	b.n	8000e72 <Serialputhex+0x2a>
    } else {
	ah += '0';
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	3330      	adds	r3, #48	; 0x30
 8000e70:	73fb      	strb	r3, [r7, #15]
    }
    al = (ch & 0x0f);
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f003 030f 	and.w	r3, r3, #15
 8000e78:	73bb      	strb	r3, [r7, #14]
    if(al >= 0x0a) {
 8000e7a:	7bbb      	ldrb	r3, [r7, #14]
 8000e7c:	2b09      	cmp	r3, #9
 8000e7e:	d903      	bls.n	8000e88 <Serialputhex+0x40>
	al = al - 0x0a + 'A';
 8000e80:	7bbb      	ldrb	r3, [r7, #14]
 8000e82:	3337      	adds	r3, #55	; 0x37
 8000e84:	73bb      	strb	r3, [r7, #14]
 8000e86:	e002      	b.n	8000e8e <Serialputhex+0x46>
    } else {
	al += '0';
 8000e88:	7bbb      	ldrb	r3, [r7, #14]
 8000e8a:	3330      	adds	r3, #48	; 0x30
 8000e8c:	73bb      	strb	r3, [r7, #14]
    }
    SerialprintByte(ah, portNum);
 8000e8e:	79ba      	ldrb	r2, [r7, #6]
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff45 	bl	8000d24 <SerialprintByte>
    SerialprintByte(al, portNum);
 8000e9a:	79ba      	ldrb	r2, [r7, #6]
 8000e9c:	7bbb      	ldrb	r3, [r7, #14]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff3f 	bl	8000d24 <SerialprintByte>
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <SerialprintInteger>:



void SerialprintInteger(long n, uint8_t portNum)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	70fb      	strb	r3, [r7, #3]
	if (n < 0) {
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	da07      	bge.n	8000ed0 <SerialprintInteger+0x22>
		SerialprintByte('-', portNum);
 8000ec0:	78fb      	ldrb	r3, [r7, #3]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	202d      	movs	r0, #45	; 0x2d
 8000ec6:	f7ff ff2d 	bl	8000d24 <SerialprintByte>
		n = -n;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	425b      	negs	r3, r3
 8000ece:	607b      	str	r3, [r7, #4]
	}

	SerialprintIntegerInBase(n, 10, portNum);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	78fa      	ldrb	r2, [r7, #3]
 8000ed4:	210a      	movs	r1, #10
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff60 	bl	8000d9c <SerialprintIntegerInBase>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <SerialprintHexlong>:

void SerialprintHexlong(unsigned long n, uint8_t portNum)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
	SerialprintIntegerInBase(n, 16, portNum);
 8000ef0:	78fb      	ldrb	r3, [r7, #3]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	2110      	movs	r1, #16
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ff50 	bl	8000d9c <SerialprintIntegerInBase>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <SerialprintOctal>:

void SerialprintOctal(unsigned long n, uint8_t portNum)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	70fb      	strb	r3, [r7, #3]
	SerialprintIntegerInBase(n, 8, portNum);
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	461a      	mov	r2, r3
 8000f14:	2108      	movs	r1, #8
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ff40 	bl	8000d9c <SerialprintIntegerInBase>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <SerialprintBinary>:

void SerialprintBinary(unsigned long n, uint8_t portNum)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	70fb      	strb	r3, [r7, #3]
	SerialprintIntegerInBase(n, 2, portNum);
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	461a      	mov	r2, r3
 8000f34:	2102      	movs	r1, #2
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ff30 	bl	8000d9c <SerialprintIntegerInBase>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	 if(huart->Instance== USART2)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a25      	ldr	r2, [pc, #148]	; (8000fe8 <HAL_UART_RxCpltCallback+0xa4>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d11f      	bne.n	8000f96 <HAL_UART_RxCpltCallback+0x52>
	 {
		 unsigned char buff = rx2_temp[0];
 8000f56:	4b25      	ldr	r3, [pc, #148]	; (8000fec <HAL_UART_RxCpltCallback+0xa8>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	75fb      	strb	r3, [r7, #23]
		 int i = (rx_buffer_head2 + 1) % RX_BUFFER_SIZE_2;
 8000f5c:	4b24      	ldr	r3, [pc, #144]	; (8000ff0 <HAL_UART_RxCpltCallback+0xac>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	425a      	negs	r2, r3
 8000f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f6c:	bf58      	it	pl
 8000f6e:	4253      	negpl	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
		 // if we should be storing the received character into the location
		 // just before the tail (meaning that the head would advance to the
		 // current location of the tail), we're about to overflow the buffer
		 // and so we don't write the character or advance the head.
		 if (i != rx_buffer_tail2) {
 8000f72:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <HAL_UART_RxCpltCallback+0xb0>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d007      	beq.n	8000f8c <HAL_UART_RxCpltCallback+0x48>
		 	 rx_buffer2[rx_buffer_head2] = buff;
 8000f7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <HAL_UART_RxCpltCallback+0xac>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	491d      	ldr	r1, [pc, #116]	; (8000ff8 <HAL_UART_RxCpltCallback+0xb4>)
 8000f82:	7dfa      	ldrb	r2, [r7, #23]
 8000f84:	54ca      	strb	r2, [r1, r3]
		 	 rx_buffer_head2 = i;
 8000f86:	4a1a      	ldr	r2, [pc, #104]	; (8000ff0 <HAL_UART_RxCpltCallback+0xac>)
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	6013      	str	r3, [r2, #0]
		 	 }
		 HAL_UART_Receive_IT(&huart2, (uint8_t *)rx2_temp, 1);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4917      	ldr	r1, [pc, #92]	; (8000fec <HAL_UART_RxCpltCallback+0xa8>)
 8000f90:	481a      	ldr	r0, [pc, #104]	; (8000ffc <HAL_UART_RxCpltCallback+0xb8>)
 8000f92:	f002 f921 	bl	80031d8 <HAL_UART_Receive_IT>
	 }

	 if(huart->Instance== USART1)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a19      	ldr	r2, [pc, #100]	; (8001000 <HAL_UART_RxCpltCallback+0xbc>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d11f      	bne.n	8000fe0 <HAL_UART_RxCpltCallback+0x9c>
	 	 {
	 		 unsigned char buff = rx1_temp[0];
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <HAL_UART_RxCpltCallback+0xc0>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	73fb      	strb	r3, [r7, #15]
	 		 int i = (rx_buffer_head1 + 1) % RX_BUFFER_SIZE_1;
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <HAL_UART_RxCpltCallback+0xc4>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	3301      	adds	r3, #1
 8000fac:	425a      	negs	r2, r3
 8000fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000fb6:	bf58      	it	pl
 8000fb8:	4253      	negpl	r3, r2
 8000fba:	60bb      	str	r3, [r7, #8]
	 		 // if we should be storing the received character into the location
	 		 // just before the tail (meaning that the head would advance to the
	 		 // current location of the tail), we're about to overflow the buffer
	 		 // and so we don't write the character or advance the head.
	 		 if (i != rx_buffer_tail1) {
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <HAL_UART_RxCpltCallback+0xc8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	68ba      	ldr	r2, [r7, #8]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d007      	beq.n	8000fd6 <HAL_UART_RxCpltCallback+0x92>
	 		 	 rx_buffer1[rx_buffer_head1] = buff;
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <HAL_UART_RxCpltCallback+0xc4>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4911      	ldr	r1, [pc, #68]	; (8001010 <HAL_UART_RxCpltCallback+0xcc>)
 8000fcc:	7bfa      	ldrb	r2, [r7, #15]
 8000fce:	54ca      	strb	r2, [r1, r3]
	 		 	 rx_buffer_head1 = i;
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <HAL_UART_RxCpltCallback+0xc4>)
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	6013      	str	r3, [r2, #0]
	 		 	 }
	 		 HAL_UART_Receive_IT(&huart1, (uint8_t *)rx1_temp, 1);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	490a      	ldr	r1, [pc, #40]	; (8001004 <HAL_UART_RxCpltCallback+0xc0>)
 8000fda:	480e      	ldr	r0, [pc, #56]	; (8001014 <HAL_UART_RxCpltCallback+0xd0>)
 8000fdc:	f002 f8fc 	bl	80031d8 <HAL_UART_Receive_IT>
	 	 }

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8000fe0:	bf00      	nop
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40004400 	.word	0x40004400
 8000fec:	20000060 	.word	0x20000060
 8000ff0:	20000070 	.word	0x20000070
 8000ff4:	20000074 	.word	0x20000074
 8000ff8:	20000380 	.word	0x20000380
 8000ffc:	200000fc 	.word	0x200000fc
 8001000:	40013800 	.word	0x40013800
 8001004:	20000064 	.word	0x20000064
 8001008:	20000068 	.word	0x20000068
 800100c:	2000006c 	.word	0x2000006c
 8001010:	20000180 	.word	0x20000180
 8001014:	20000078 	.word	0x20000078

08001018 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001022:	2003      	movs	r0, #3
 8001024:	f000 f980 	bl	8001328 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001028:	2000      	movs	r0, #0
 800102a:	f000 f80d 	bl	8001048 <HAL_InitTick>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d002      	beq.n	800103a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	e001      	b.n	800103e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800103a:	f7ff fb65 	bl	8000708 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800103e:	79fb      	ldrb	r3, [r7, #7]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <HAL_InitTick+0x6c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d023      	beq.n	80010a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <HAL_InitTick+0x70>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_InitTick+0x6c>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106a:	fbb3 f3f1 	udiv	r3, r3, r1
 800106e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f99b 	bl	80013ae <HAL_SYSTICK_Config>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10f      	bne.n	800109e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d809      	bhi.n	8001098 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800108c:	f000 f957 	bl	800133e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001090:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <HAL_InitTick+0x74>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	e007      	b.n	80010a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	e004      	b.n	80010a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	73fb      	strb	r3, [r7, #15]
 80010a2:	e001      	b.n	80010a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000040 	.word	0x20000040
 80010b8:	20000000 	.word	0x20000000
 80010bc:	2000003c 	.word	0x2000003c

080010c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x20>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_IncTick+0x24>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <HAL_IncTick+0x24>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000040 	.word	0x20000040
 80010e4:	20000580 	.word	0x20000580

080010e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <HAL_GetTick+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000580 	.word	0x20000580

08001100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001108:	f7ff ffee 	bl	80010e8 <HAL_GetTick>
 800110c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001118:	d005      	beq.n	8001126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_Delay+0x40>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001126:	bf00      	nop
 8001128:	f7ff ffde 	bl	80010e8 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	429a      	cmp	r2, r3
 8001136:	d8f7      	bhi.n	8001128 <HAL_Delay+0x28>
  {
  }
}
 8001138:	bf00      	nop
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000040 	.word	0x20000040

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0b      	blt.n	80011d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	4907      	ldr	r1, [pc, #28]	; (80011e0 <__NVIC_EnableIRQ+0x38>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	db10      	blt.n	8001218 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	f003 021f 	and.w	r2, r3, #31
 80011fc:	4909      	ldr	r1, [pc, #36]	; (8001224 <__NVIC_DisableIRQ+0x40>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	095b      	lsrs	r3, r3, #5
 8001204:	2001      	movs	r0, #1
 8001206:	fa00 f202 	lsl.w	r2, r0, r2
 800120a:	3320      	adds	r3, #32
 800120c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001210:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001214:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000e100 	.word	0xe000e100

08001228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	6039      	str	r1, [r7, #0]
 8001232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001238:	2b00      	cmp	r3, #0
 800123a:	db0a      	blt.n	8001252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	b2da      	uxtb	r2, r3
 8001240:	490c      	ldr	r1, [pc, #48]	; (8001274 <__NVIC_SetPriority+0x4c>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	0112      	lsls	r2, r2, #4
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	440b      	add	r3, r1
 800124c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001250:	e00a      	b.n	8001268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4908      	ldr	r1, [pc, #32]	; (8001278 <__NVIC_SetPriority+0x50>)
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	3b04      	subs	r3, #4
 8001260:	0112      	lsls	r2, r2, #4
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	440b      	add	r3, r1
 8001266:	761a      	strb	r2, [r3, #24]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000e100 	.word	0xe000e100
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	; 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f1c3 0307 	rsb	r3, r3, #7
 8001296:	2b04      	cmp	r3, #4
 8001298:	bf28      	it	cs
 800129a:	2304      	movcs	r3, #4
 800129c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3304      	adds	r3, #4
 80012a2:	2b06      	cmp	r3, #6
 80012a4:	d902      	bls.n	80012ac <NVIC_EncodePriority+0x30>
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3b03      	subs	r3, #3
 80012aa:	e000      	b.n	80012ae <NVIC_EncodePriority+0x32>
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43da      	mvns	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	401a      	ands	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	43d9      	mvns	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	4313      	orrs	r3, r2
         );
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3724      	adds	r7, #36	; 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f4:	d301      	bcc.n	80012fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f6:	2301      	movs	r3, #1
 80012f8:	e00f      	b.n	800131a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fa:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <SysTick_Config+0x40>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3b01      	subs	r3, #1
 8001300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001302:	210f      	movs	r1, #15
 8001304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001308:	f7ff ff8e 	bl	8001228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <SysTick_Config+0x40>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001312:	4b04      	ldr	r3, [pc, #16]	; (8001324 <SysTick_Config+0x40>)
 8001314:	2207      	movs	r2, #7
 8001316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	e000e010 	.word	0xe000e010

08001328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff07 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b086      	sub	sp, #24
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	607a      	str	r2, [r7, #4]
 800134a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001350:	f7ff ff1c 	bl	800118c <__NVIC_GetPriorityGrouping>
 8001354:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f7ff ff8e 	bl	800127c <NVIC_EncodePriority>
 8001360:	4602      	mov	r2, r0
 8001362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff5d 	bl	8001228 <__NVIC_SetPriority>
}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff0f 	bl	80011a8 <__NVIC_EnableIRQ>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff1f 	bl	80011e4 <__NVIC_DisableIRQ>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ff94 	bl	80012e4 <SysTick_Config>
 80013bc:	4603      	mov	r3, r0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b084      	sub	sp, #16
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d005      	beq.n	80013ea <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2204      	movs	r2, #4
 80013e2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	73fb      	strb	r3, [r7, #15]
 80013e8:	e029      	b.n	800143e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 020e 	bic.w	r2, r2, #14
 80013f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 0201 	bic.w	r2, r2, #1
 8001408:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	f003 021c 	and.w	r2, r3, #28
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	2101      	movs	r1, #1
 8001418:	fa01 f202 	lsl.w	r2, r1, r2
 800141c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	4798      	blx	r3
    }
  }
  return status;
 800143e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001448:	b480      	push	{r7}
 800144a:	b087      	sub	sp, #28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001456:	e17f      	b.n	8001758 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	2101      	movs	r1, #1
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	fa01 f303 	lsl.w	r3, r1, r3
 8001464:	4013      	ands	r3, r2
 8001466:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 8171 	beq.w	8001752 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d00b      	beq.n	8001490 <HAL_GPIO_Init+0x48>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b02      	cmp	r3, #2
 800147e:	d007      	beq.n	8001490 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001484:	2b11      	cmp	r3, #17
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b12      	cmp	r3, #18
 800148e:	d130      	bne.n	80014f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	2203      	movs	r2, #3
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	68da      	ldr	r2, [r3, #12]
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014c6:	2201      	movs	r2, #1
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	091b      	lsrs	r3, r3, #4
 80014dc:	f003 0201 	and.w	r2, r3, #1
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d118      	bne.n	8001530 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001502:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001504:	2201      	movs	r2, #1
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	08db      	lsrs	r3, r3, #3
 800151a:	f003 0201 	and.w	r2, r3, #1
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	2203      	movs	r2, #3
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b02      	cmp	r3, #2
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x128>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b12      	cmp	r3, #18
 800156e:	d123      	bne.n	80015b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	08da      	lsrs	r2, r3, #3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3208      	adds	r2, #8
 8001578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	220f      	movs	r2, #15
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	691a      	ldr	r2, [r3, #16]
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	08da      	lsrs	r2, r3, #3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3208      	adds	r2, #8
 80015b2:	6939      	ldr	r1, [r7, #16]
 80015b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0203 	and.w	r2, r3, #3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 80ac 	beq.w	8001752 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	4b5e      	ldr	r3, [pc, #376]	; (8001774 <HAL_GPIO_Init+0x32c>)
 80015fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fe:	4a5d      	ldr	r2, [pc, #372]	; (8001774 <HAL_GPIO_Init+0x32c>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6613      	str	r3, [r2, #96]	; 0x60
 8001606:	4b5b      	ldr	r3, [pc, #364]	; (8001774 <HAL_GPIO_Init+0x32c>)
 8001608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001612:	4a59      	ldr	r2, [pc, #356]	; (8001778 <HAL_GPIO_Init+0x330>)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	089b      	lsrs	r3, r3, #2
 8001618:	3302      	adds	r3, #2
 800161a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	220f      	movs	r2, #15
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800163c:	d025      	beq.n	800168a <HAL_GPIO_Init+0x242>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a4e      	ldr	r2, [pc, #312]	; (800177c <HAL_GPIO_Init+0x334>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d01f      	beq.n	8001686 <HAL_GPIO_Init+0x23e>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a4d      	ldr	r2, [pc, #308]	; (8001780 <HAL_GPIO_Init+0x338>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d019      	beq.n	8001682 <HAL_GPIO_Init+0x23a>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a4c      	ldr	r2, [pc, #304]	; (8001784 <HAL_GPIO_Init+0x33c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d013      	beq.n	800167e <HAL_GPIO_Init+0x236>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a4b      	ldr	r2, [pc, #300]	; (8001788 <HAL_GPIO_Init+0x340>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d00d      	beq.n	800167a <HAL_GPIO_Init+0x232>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a4a      	ldr	r2, [pc, #296]	; (800178c <HAL_GPIO_Init+0x344>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d007      	beq.n	8001676 <HAL_GPIO_Init+0x22e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a49      	ldr	r2, [pc, #292]	; (8001790 <HAL_GPIO_Init+0x348>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d101      	bne.n	8001672 <HAL_GPIO_Init+0x22a>
 800166e:	2306      	movs	r3, #6
 8001670:	e00c      	b.n	800168c <HAL_GPIO_Init+0x244>
 8001672:	2307      	movs	r3, #7
 8001674:	e00a      	b.n	800168c <HAL_GPIO_Init+0x244>
 8001676:	2305      	movs	r3, #5
 8001678:	e008      	b.n	800168c <HAL_GPIO_Init+0x244>
 800167a:	2304      	movs	r3, #4
 800167c:	e006      	b.n	800168c <HAL_GPIO_Init+0x244>
 800167e:	2303      	movs	r3, #3
 8001680:	e004      	b.n	800168c <HAL_GPIO_Init+0x244>
 8001682:	2302      	movs	r3, #2
 8001684:	e002      	b.n	800168c <HAL_GPIO_Init+0x244>
 8001686:	2301      	movs	r3, #1
 8001688:	e000      	b.n	800168c <HAL_GPIO_Init+0x244>
 800168a:	2300      	movs	r3, #0
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	f002 0203 	and.w	r2, r2, #3
 8001692:	0092      	lsls	r2, r2, #2
 8001694:	4093      	lsls	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800169c:	4936      	ldr	r1, [pc, #216]	; (8001778 <HAL_GPIO_Init+0x330>)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	089b      	lsrs	r3, r3, #2
 80016a2:	3302      	adds	r3, #2
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016aa:	4b3a      	ldr	r3, [pc, #232]	; (8001794 <HAL_GPIO_Init+0x34c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4013      	ands	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016ce:	4a31      	ldr	r2, [pc, #196]	; (8001794 <HAL_GPIO_Init+0x34c>)
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80016d4:	4b2f      	ldr	r3, [pc, #188]	; (8001794 <HAL_GPIO_Init+0x34c>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	43db      	mvns	r3, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016f8:	4a26      	ldr	r2, [pc, #152]	; (8001794 <HAL_GPIO_Init+0x34c>)
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016fe:	4b25      	ldr	r3, [pc, #148]	; (8001794 <HAL_GPIO_Init+0x34c>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	43db      	mvns	r3, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4013      	ands	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4313      	orrs	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001722:	4a1c      	ldr	r2, [pc, #112]	; (8001794 <HAL_GPIO_Init+0x34c>)
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <HAL_GPIO_Init+0x34c>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	43db      	mvns	r3, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800174c:	4a11      	ldr	r2, [pc, #68]	; (8001794 <HAL_GPIO_Init+0x34c>)
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3301      	adds	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fa22 f303 	lsr.w	r3, r2, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	f47f ae78 	bne.w	8001458 <HAL_GPIO_Init+0x10>
  }
}
 8001768:	bf00      	nop
 800176a:	371c      	adds	r7, #28
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	40021000 	.word	0x40021000
 8001778:	40010000 	.word	0x40010000
 800177c:	48000400 	.word	0x48000400
 8001780:	48000800 	.word	0x48000800
 8001784:	48000c00 	.word	0x48000c00
 8001788:	48001000 	.word	0x48001000
 800178c:	48001400 	.word	0x48001400
 8001790:	48001800 	.word	0x48001800
 8001794:	40010400 	.word	0x40010400

08001798 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001798:	b480      	push	{r7}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80017a6:	e0cd      	b.n	8001944 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80017a8:	2201      	movs	r2, #1
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 80c0 	beq.w	800193e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80017be:	4a68      	ldr	r2, [pc, #416]	; (8001960 <HAL_GPIO_DeInit+0x1c8>)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	3302      	adds	r3, #2
 80017c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ca:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	220f      	movs	r2, #15
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4013      	ands	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017e6:	d025      	beq.n	8001834 <HAL_GPIO_DeInit+0x9c>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a5e      	ldr	r2, [pc, #376]	; (8001964 <HAL_GPIO_DeInit+0x1cc>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d01f      	beq.n	8001830 <HAL_GPIO_DeInit+0x98>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a5d      	ldr	r2, [pc, #372]	; (8001968 <HAL_GPIO_DeInit+0x1d0>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d019      	beq.n	800182c <HAL_GPIO_DeInit+0x94>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a5c      	ldr	r2, [pc, #368]	; (800196c <HAL_GPIO_DeInit+0x1d4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d013      	beq.n	8001828 <HAL_GPIO_DeInit+0x90>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a5b      	ldr	r2, [pc, #364]	; (8001970 <HAL_GPIO_DeInit+0x1d8>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d00d      	beq.n	8001824 <HAL_GPIO_DeInit+0x8c>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a5a      	ldr	r2, [pc, #360]	; (8001974 <HAL_GPIO_DeInit+0x1dc>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d007      	beq.n	8001820 <HAL_GPIO_DeInit+0x88>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a59      	ldr	r2, [pc, #356]	; (8001978 <HAL_GPIO_DeInit+0x1e0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d101      	bne.n	800181c <HAL_GPIO_DeInit+0x84>
 8001818:	2306      	movs	r3, #6
 800181a:	e00c      	b.n	8001836 <HAL_GPIO_DeInit+0x9e>
 800181c:	2307      	movs	r3, #7
 800181e:	e00a      	b.n	8001836 <HAL_GPIO_DeInit+0x9e>
 8001820:	2305      	movs	r3, #5
 8001822:	e008      	b.n	8001836 <HAL_GPIO_DeInit+0x9e>
 8001824:	2304      	movs	r3, #4
 8001826:	e006      	b.n	8001836 <HAL_GPIO_DeInit+0x9e>
 8001828:	2303      	movs	r3, #3
 800182a:	e004      	b.n	8001836 <HAL_GPIO_DeInit+0x9e>
 800182c:	2302      	movs	r3, #2
 800182e:	e002      	b.n	8001836 <HAL_GPIO_DeInit+0x9e>
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <HAL_GPIO_DeInit+0x9e>
 8001834:	2300      	movs	r3, #0
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	f002 0203 	and.w	r2, r2, #3
 800183c:	0092      	lsls	r2, r2, #2
 800183e:	4093      	lsls	r3, r2
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	429a      	cmp	r2, r3
 8001844:	d132      	bne.n	80018ac <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001846:	4b4d      	ldr	r3, [pc, #308]	; (800197c <HAL_GPIO_DeInit+0x1e4>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	43db      	mvns	r3, r3
 800184e:	494b      	ldr	r1, [pc, #300]	; (800197c <HAL_GPIO_DeInit+0x1e4>)
 8001850:	4013      	ands	r3, r2
 8001852:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001854:	4b49      	ldr	r3, [pc, #292]	; (800197c <HAL_GPIO_DeInit+0x1e4>)
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	43db      	mvns	r3, r3
 800185c:	4947      	ldr	r1, [pc, #284]	; (800197c <HAL_GPIO_DeInit+0x1e4>)
 800185e:	4013      	ands	r3, r2
 8001860:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001862:	4b46      	ldr	r3, [pc, #280]	; (800197c <HAL_GPIO_DeInit+0x1e4>)
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	43db      	mvns	r3, r3
 800186a:	4944      	ldr	r1, [pc, #272]	; (800197c <HAL_GPIO_DeInit+0x1e4>)
 800186c:	4013      	ands	r3, r2
 800186e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001870:	4b42      	ldr	r3, [pc, #264]	; (800197c <HAL_GPIO_DeInit+0x1e4>)
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	43db      	mvns	r3, r3
 8001878:	4940      	ldr	r1, [pc, #256]	; (800197c <HAL_GPIO_DeInit+0x1e4>)
 800187a:	4013      	ands	r3, r2
 800187c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	220f      	movs	r2, #15
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800188e:	4a34      	ldr	r2, [pc, #208]	; (8001960 <HAL_GPIO_DeInit+0x1c8>)
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	089b      	lsrs	r3, r3, #2
 8001894:	3302      	adds	r3, #2
 8001896:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	43da      	mvns	r2, r3
 800189e:	4830      	ldr	r0, [pc, #192]	; (8001960 <HAL_GPIO_DeInit+0x1c8>)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	400a      	ands	r2, r1
 80018a6:	3302      	adds	r3, #2
 80018a8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	2103      	movs	r1, #3
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	08da      	lsrs	r2, r3, #3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3208      	adds	r2, #8
 80018c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	08d2      	lsrs	r2, r2, #3
 80018e0:	4019      	ands	r1, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3208      	adds	r2, #8
 80018e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	2103      	movs	r1, #3
 80018f4:	fa01 f303 	lsl.w	r3, r1, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	401a      	ands	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	2101      	movs	r1, #1
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	401a      	ands	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	2103      	movs	r1, #3
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	401a      	ands	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800192e:	2101      	movs	r1, #1
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	43db      	mvns	r3, r3
 8001938:	401a      	ands	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	3301      	adds	r3, #1
 8001942:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	f47f af2b 	bne.w	80017a8 <HAL_GPIO_DeInit+0x10>
  }
}
 8001952:	bf00      	nop
 8001954:	371c      	adds	r7, #28
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40010000 	.word	0x40010000
 8001964:	48000400 	.word	0x48000400
 8001968:	48000800 	.word	0x48000800
 800196c:	48000c00 	.word	0x48000c00
 8001970:	48001000 	.word	0x48001000
 8001974:	48001400 	.word	0x48001400
 8001978:	48001800 	.word	0x48001800
 800197c:	40010400 	.word	0x40010400

08001980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	807b      	strh	r3, [r7, #2]
 800198c:	4613      	mov	r3, r2
 800198e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001990:	787b      	ldrb	r3, [r7, #1]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001996:	887a      	ldrh	r2, [r7, #2]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800199c:	e002      	b.n	80019a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40007000 	.word	0x40007000

080019cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019da:	d130      	bne.n	8001a3e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019dc:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019e8:	d038      	beq.n	8001a5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019ea:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019f2:	4a1e      	ldr	r2, [pc, #120]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019fa:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2232      	movs	r2, #50	; 0x32
 8001a00:	fb02 f303 	mul.w	r3, r2, r3
 8001a04:	4a1b      	ldr	r2, [pc, #108]	; (8001a74 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	0c9b      	lsrs	r3, r3, #18
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a10:	e002      	b.n	8001a18 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a18:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a24:	d102      	bne.n	8001a2c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f2      	bne.n	8001a12 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a38:	d110      	bne.n	8001a5c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e00f      	b.n	8001a5e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a4a:	d007      	beq.n	8001a5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a4c:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a54:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a5a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40007000 	.word	0x40007000
 8001a70:	20000000 	.word	0x20000000
 8001a74:	431bde83 	.word	0x431bde83

08001a78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e3d4      	b.n	8002234 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a8a:	4ba1      	ldr	r3, [pc, #644]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a94:	4b9e      	ldr	r3, [pc, #632]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0310 	and.w	r3, r3, #16
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 80e4 	beq.w	8001c74 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d007      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x4a>
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	2b0c      	cmp	r3, #12
 8001ab6:	f040 808b 	bne.w	8001bd0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	f040 8087 	bne.w	8001bd0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ac2:	4b93      	ldr	r3, [pc, #588]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d005      	beq.n	8001ada <HAL_RCC_OscConfig+0x62>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e3ac      	b.n	8002234 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a1a      	ldr	r2, [r3, #32]
 8001ade:	4b8c      	ldr	r3, [pc, #560]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d004      	beq.n	8001af4 <HAL_RCC_OscConfig+0x7c>
 8001aea:	4b89      	ldr	r3, [pc, #548]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001af2:	e005      	b.n	8001b00 <HAL_RCC_OscConfig+0x88>
 8001af4:	4b86      	ldr	r3, [pc, #536]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001afa:	091b      	lsrs	r3, r3, #4
 8001afc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d223      	bcs.n	8001b4c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 fd3f 	bl	800258c <RCC_SetFlashLatencyFromMSIRange>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e38d      	b.n	8002234 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b18:	4b7d      	ldr	r3, [pc, #500]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a7c      	ldr	r2, [pc, #496]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001b1e:	f043 0308 	orr.w	r3, r3, #8
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	4b7a      	ldr	r3, [pc, #488]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	4977      	ldr	r1, [pc, #476]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b36:	4b76      	ldr	r3, [pc, #472]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	4972      	ldr	r1, [pc, #456]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	604b      	str	r3, [r1, #4]
 8001b4a:	e025      	b.n	8001b98 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b4c:	4b70      	ldr	r3, [pc, #448]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a6f      	ldr	r2, [pc, #444]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001b52:	f043 0308 	orr.w	r3, r3, #8
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b6d      	ldr	r3, [pc, #436]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	496a      	ldr	r1, [pc, #424]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b6a:	4b69      	ldr	r3, [pc, #420]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	021b      	lsls	r3, r3, #8
 8001b78:	4965      	ldr	r1, [pc, #404]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d109      	bne.n	8001b98 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 fcff 	bl	800258c <RCC_SetFlashLatencyFromMSIRange>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e34d      	b.n	8002234 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b98:	f000 fc36 	bl	8002408 <HAL_RCC_GetSysClockFreq>
 8001b9c:	4601      	mov	r1, r0
 8001b9e:	4b5c      	ldr	r3, [pc, #368]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	091b      	lsrs	r3, r3, #4
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	4a5a      	ldr	r2, [pc, #360]	; (8001d14 <HAL_RCC_OscConfig+0x29c>)
 8001baa:	5cd3      	ldrb	r3, [r2, r3]
 8001bac:	f003 031f 	and.w	r3, r3, #31
 8001bb0:	fa21 f303 	lsr.w	r3, r1, r3
 8001bb4:	4a58      	ldr	r2, [pc, #352]	; (8001d18 <HAL_RCC_OscConfig+0x2a0>)
 8001bb6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bb8:	4b58      	ldr	r3, [pc, #352]	; (8001d1c <HAL_RCC_OscConfig+0x2a4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fa43 	bl	8001048 <HAL_InitTick>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d052      	beq.n	8001c72 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	e331      	b.n	8002234 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d032      	beq.n	8001c3e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bd8:	4b4d      	ldr	r3, [pc, #308]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a4c      	ldr	r2, [pc, #304]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001be4:	f7ff fa80 	bl	80010e8 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bec:	f7ff fa7c 	bl	80010e8 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e31a      	b.n	8002234 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bfe:	4b44      	ldr	r3, [pc, #272]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c0a:	4b41      	ldr	r3, [pc, #260]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a40      	ldr	r2, [pc, #256]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001c10:	f043 0308 	orr.w	r3, r3, #8
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	4b3e      	ldr	r3, [pc, #248]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	493b      	ldr	r1, [pc, #236]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c28:	4b39      	ldr	r3, [pc, #228]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	4936      	ldr	r1, [pc, #216]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
 8001c3c:	e01a      	b.n	8001c74 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c3e:	4b34      	ldr	r3, [pc, #208]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a33      	ldr	r2, [pc, #204]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001c44:	f023 0301 	bic.w	r3, r3, #1
 8001c48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c4a:	f7ff fa4d 	bl	80010e8 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c52:	f7ff fa49 	bl	80010e8 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e2e7      	b.n	8002234 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c64:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1f0      	bne.n	8001c52 <HAL_RCC_OscConfig+0x1da>
 8001c70:	e000      	b.n	8001c74 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c72:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d074      	beq.n	8001d6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d005      	beq.n	8001c92 <HAL_RCC_OscConfig+0x21a>
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	2b0c      	cmp	r3, #12
 8001c8a:	d10e      	bne.n	8001caa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	d10b      	bne.n	8001caa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c92:	4b1f      	ldr	r3, [pc, #124]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d064      	beq.n	8001d68 <HAL_RCC_OscConfig+0x2f0>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d160      	bne.n	8001d68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e2c4      	b.n	8002234 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb2:	d106      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x24a>
 8001cb4:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a15      	ldr	r2, [pc, #84]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	e01d      	b.n	8001cfe <HAL_RCC_OscConfig+0x286>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cca:	d10c      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x26e>
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0f      	ldr	r2, [pc, #60]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001cd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	e00b      	b.n	8001cfe <HAL_RCC_OscConfig+0x286>
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a09      	ldr	r2, [pc, #36]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a06      	ldr	r2, [pc, #24]	; (8001d10 <HAL_RCC_OscConfig+0x298>)
 8001cf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cfc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d01c      	beq.n	8001d40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d06:	f7ff f9ef 	bl	80010e8 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d0c:	e011      	b.n	8001d32 <HAL_RCC_OscConfig+0x2ba>
 8001d0e:	bf00      	nop
 8001d10:	40021000 	.word	0x40021000
 8001d14:	08004134 	.word	0x08004134
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	2000003c 	.word	0x2000003c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d20:	f7ff f9e2 	bl	80010e8 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b64      	cmp	r3, #100	; 0x64
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e280      	b.n	8002234 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d32:	4baf      	ldr	r3, [pc, #700]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0x2a8>
 8001d3e:	e014      	b.n	8001d6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7ff f9d2 	bl	80010e8 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d48:	f7ff f9ce 	bl	80010e8 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b64      	cmp	r3, #100	; 0x64
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e26c      	b.n	8002234 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d5a:	4ba5      	ldr	r3, [pc, #660]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x2d0>
 8001d66:	e000      	b.n	8001d6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d060      	beq.n	8001e38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_OscConfig+0x310>
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2b0c      	cmp	r3, #12
 8001d80:	d119      	bne.n	8001db6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d116      	bne.n	8001db6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d88:	4b99      	ldr	r3, [pc, #612]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_OscConfig+0x328>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e249      	b.n	8002234 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da0:	4b93      	ldr	r3, [pc, #588]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	061b      	lsls	r3, r3, #24
 8001dae:	4990      	ldr	r1, [pc, #576]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001db4:	e040      	b.n	8001e38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d023      	beq.n	8001e06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dbe:	4b8c      	ldr	r3, [pc, #560]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a8b      	ldr	r2, [pc, #556]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dca:	f7ff f98d 	bl	80010e8 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd2:	f7ff f989 	bl	80010e8 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e227      	b.n	8002234 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001de4:	4b82      	ldr	r3, [pc, #520]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df0:	4b7f      	ldr	r3, [pc, #508]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	061b      	lsls	r3, r3, #24
 8001dfe:	497c      	ldr	r1, [pc, #496]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	604b      	str	r3, [r1, #4]
 8001e04:	e018      	b.n	8001e38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e06:	4b7a      	ldr	r3, [pc, #488]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a79      	ldr	r2, [pc, #484]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7ff f969 	bl	80010e8 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1a:	f7ff f965 	bl	80010e8 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e203      	b.n	8002234 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e2c:	4b70      	ldr	r3, [pc, #448]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1f0      	bne.n	8001e1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0308 	and.w	r3, r3, #8
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d03c      	beq.n	8001ebe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01c      	beq.n	8001e86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e4c:	4b68      	ldr	r3, [pc, #416]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e52:	4a67      	ldr	r2, [pc, #412]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5c:	f7ff f944 	bl	80010e8 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e64:	f7ff f940 	bl	80010e8 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e1de      	b.n	8002234 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e76:	4b5e      	ldr	r3, [pc, #376]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0ef      	beq.n	8001e64 <HAL_RCC_OscConfig+0x3ec>
 8001e84:	e01b      	b.n	8001ebe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e86:	4b5a      	ldr	r3, [pc, #360]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8c:	4a58      	ldr	r2, [pc, #352]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001e8e:	f023 0301 	bic.w	r3, r3, #1
 8001e92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e96:	f7ff f927 	bl	80010e8 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9e:	f7ff f923 	bl	80010e8 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e1c1      	b.n	8002234 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eb0:	4b4f      	ldr	r3, [pc, #316]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1ef      	bne.n	8001e9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 80a6 	beq.w	8002018 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ed0:	4b47      	ldr	r3, [pc, #284]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10d      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001edc:	4b44      	ldr	r3, [pc, #272]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee0:	4a43      	ldr	r2, [pc, #268]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee8:	4b41      	ldr	r3, [pc, #260]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef8:	4b3e      	ldr	r3, [pc, #248]	; (8001ff4 <HAL_RCC_OscConfig+0x57c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d118      	bne.n	8001f36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f04:	4b3b      	ldr	r3, [pc, #236]	; (8001ff4 <HAL_RCC_OscConfig+0x57c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a3a      	ldr	r2, [pc, #232]	; (8001ff4 <HAL_RCC_OscConfig+0x57c>)
 8001f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f10:	f7ff f8ea 	bl	80010e8 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f18:	f7ff f8e6 	bl	80010e8 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e184      	b.n	8002234 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f2a:	4b32      	ldr	r3, [pc, #200]	; (8001ff4 <HAL_RCC_OscConfig+0x57c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d108      	bne.n	8001f50 <HAL_RCC_OscConfig+0x4d8>
 8001f3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f44:	4a2a      	ldr	r2, [pc, #168]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f4e:	e024      	b.n	8001f9a <HAL_RCC_OscConfig+0x522>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2b05      	cmp	r3, #5
 8001f56:	d110      	bne.n	8001f7a <HAL_RCC_OscConfig+0x502>
 8001f58:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5e:	4a24      	ldr	r2, [pc, #144]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001f60:	f043 0304 	orr.w	r3, r3, #4
 8001f64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f68:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6e:	4a20      	ldr	r2, [pc, #128]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f78:	e00f      	b.n	8001f9a <HAL_RCC_OscConfig+0x522>
 8001f7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f80:	4a1b      	ldr	r2, [pc, #108]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f8a:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f90:	4a17      	ldr	r2, [pc, #92]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001f92:	f023 0304 	bic.w	r3, r3, #4
 8001f96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d016      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa2:	f7ff f8a1 	bl	80010e8 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa8:	e00a      	b.n	8001fc0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001faa:	f7ff f89d 	bl	80010e8 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e139      	b.n	8002234 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_RCC_OscConfig+0x578>)
 8001fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0ed      	beq.n	8001faa <HAL_RCC_OscConfig+0x532>
 8001fce:	e01a      	b.n	8002006 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd0:	f7ff f88a 	bl	80010e8 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fd6:	e00f      	b.n	8001ff8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd8:	f7ff f886 	bl	80010e8 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d906      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e122      	b.n	8002234 <HAL_RCC_OscConfig+0x7bc>
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ff8:	4b90      	ldr	r3, [pc, #576]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 8001ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1e8      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002006:	7ffb      	ldrb	r3, [r7, #31]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d105      	bne.n	8002018 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200c:	4b8b      	ldr	r3, [pc, #556]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 800200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002010:	4a8a      	ldr	r2, [pc, #552]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 8002012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002016:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 8108 	beq.w	8002232 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002026:	2b02      	cmp	r3, #2
 8002028:	f040 80d0 	bne.w	80021cc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800202c:	4b83      	ldr	r3, [pc, #524]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f003 0203 	and.w	r2, r3, #3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	429a      	cmp	r2, r3
 800203e:	d130      	bne.n	80020a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	3b01      	subs	r3, #1
 800204c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800204e:	429a      	cmp	r2, r3
 8002050:	d127      	bne.n	80020a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800205e:	429a      	cmp	r2, r3
 8002060:	d11f      	bne.n	80020a2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800206c:	2a07      	cmp	r2, #7
 800206e:	bf14      	ite	ne
 8002070:	2201      	movne	r2, #1
 8002072:	2200      	moveq	r2, #0
 8002074:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002076:	4293      	cmp	r3, r2
 8002078:	d113      	bne.n	80020a2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002084:	085b      	lsrs	r3, r3, #1
 8002086:	3b01      	subs	r3, #1
 8002088:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800208a:	429a      	cmp	r2, r3
 800208c:	d109      	bne.n	80020a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	085b      	lsrs	r3, r3, #1
 800209a:	3b01      	subs	r3, #1
 800209c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800209e:	429a      	cmp	r2, r3
 80020a0:	d06e      	beq.n	8002180 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	2b0c      	cmp	r3, #12
 80020a6:	d069      	beq.n	800217c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020a8:	4b64      	ldr	r3, [pc, #400]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d105      	bne.n	80020c0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020b4:	4b61      	ldr	r3, [pc, #388]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0b7      	b.n	8002234 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020c4:	4b5d      	ldr	r3, [pc, #372]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a5c      	ldr	r2, [pc, #368]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 80020ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020d0:	f7ff f80a 	bl	80010e8 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d8:	f7ff f806 	bl	80010e8 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e0a4      	b.n	8002234 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ea:	4b54      	ldr	r3, [pc, #336]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f6:	4b51      	ldr	r3, [pc, #324]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	4b51      	ldr	r3, [pc, #324]	; (8002240 <HAL_RCC_OscConfig+0x7c8>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002106:	3a01      	subs	r2, #1
 8002108:	0112      	lsls	r2, r2, #4
 800210a:	4311      	orrs	r1, r2
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002110:	0212      	lsls	r2, r2, #8
 8002112:	4311      	orrs	r1, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002118:	0852      	lsrs	r2, r2, #1
 800211a:	3a01      	subs	r2, #1
 800211c:	0552      	lsls	r2, r2, #21
 800211e:	4311      	orrs	r1, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002124:	0852      	lsrs	r2, r2, #1
 8002126:	3a01      	subs	r2, #1
 8002128:	0652      	lsls	r2, r2, #25
 800212a:	4311      	orrs	r1, r2
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002130:	0912      	lsrs	r2, r2, #4
 8002132:	0452      	lsls	r2, r2, #17
 8002134:	430a      	orrs	r2, r1
 8002136:	4941      	ldr	r1, [pc, #260]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 8002138:	4313      	orrs	r3, r2
 800213a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800213c:	4b3f      	ldr	r3, [pc, #252]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a3e      	ldr	r2, [pc, #248]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 8002142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002146:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002148:	4b3c      	ldr	r3, [pc, #240]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	4a3b      	ldr	r2, [pc, #236]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 800214e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002152:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002154:	f7fe ffc8 	bl	80010e8 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215c:	f7fe ffc4 	bl	80010e8 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e062      	b.n	8002234 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216e:	4b33      	ldr	r3, [pc, #204]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800217a:	e05a      	b.n	8002232 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e059      	b.n	8002234 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002180:	4b2e      	ldr	r3, [pc, #184]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d152      	bne.n	8002232 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800218c:	4b2b      	ldr	r3, [pc, #172]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a2a      	ldr	r2, [pc, #168]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 8002192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002196:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002198:	4b28      	ldr	r3, [pc, #160]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4a27      	ldr	r2, [pc, #156]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 800219e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021a4:	f7fe ffa0 	bl	80010e8 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ac:	f7fe ff9c 	bl	80010e8 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e03a      	b.n	8002234 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021be:	4b1f      	ldr	r3, [pc, #124]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCC_OscConfig+0x734>
 80021ca:	e032      	b.n	8002232 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	2b0c      	cmp	r3, #12
 80021d0:	d02d      	beq.n	800222e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d2:	4b1a      	ldr	r3, [pc, #104]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a19      	ldr	r2, [pc, #100]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 80021d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021dc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80021de:	4b17      	ldr	r3, [pc, #92]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d105      	bne.n	80021f6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80021ea:	4b14      	ldr	r3, [pc, #80]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	4a13      	ldr	r2, [pc, #76]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 80021f0:	f023 0303 	bic.w	r3, r3, #3
 80021f4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021f6:	4b11      	ldr	r3, [pc, #68]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	4a10      	ldr	r2, [pc, #64]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 80021fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002204:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002206:	f7fe ff6f 	bl	80010e8 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220e:	f7fe ff6b 	bl	80010e8 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e009      	b.n	8002234 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_RCC_OscConfig+0x7c4>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f0      	bne.n	800220e <HAL_RCC_OscConfig+0x796>
 800222c:	e001      	b.n	8002232 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3720      	adds	r7, #32
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40021000 	.word	0x40021000
 8002240:	f99d808c 	.word	0xf99d808c

08002244 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e0c8      	b.n	80023ea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002258:	4b66      	ldr	r3, [pc, #408]	; (80023f4 <HAL_RCC_ClockConfig+0x1b0>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d910      	bls.n	8002288 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002266:	4b63      	ldr	r3, [pc, #396]	; (80023f4 <HAL_RCC_ClockConfig+0x1b0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 0207 	bic.w	r2, r3, #7
 800226e:	4961      	ldr	r1, [pc, #388]	; (80023f4 <HAL_RCC_ClockConfig+0x1b0>)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002276:	4b5f      	ldr	r3, [pc, #380]	; (80023f4 <HAL_RCC_ClockConfig+0x1b0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d001      	beq.n	8002288 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0b0      	b.n	80023ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d04c      	beq.n	800232e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d107      	bne.n	80022ac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800229c:	4b56      	ldr	r3, [pc, #344]	; (80023f8 <HAL_RCC_ClockConfig+0x1b4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d121      	bne.n	80022ec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e09e      	b.n	80023ea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d107      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022b4:	4b50      	ldr	r3, [pc, #320]	; (80023f8 <HAL_RCC_ClockConfig+0x1b4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d115      	bne.n	80022ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e092      	b.n	80023ea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d107      	bne.n	80022dc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022cc:	4b4a      	ldr	r3, [pc, #296]	; (80023f8 <HAL_RCC_ClockConfig+0x1b4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d109      	bne.n	80022ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e086      	b.n	80023ea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022dc:	4b46      	ldr	r3, [pc, #280]	; (80023f8 <HAL_RCC_ClockConfig+0x1b4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e07e      	b.n	80023ea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022ec:	4b42      	ldr	r3, [pc, #264]	; (80023f8 <HAL_RCC_ClockConfig+0x1b4>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f023 0203 	bic.w	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	493f      	ldr	r1, [pc, #252]	; (80023f8 <HAL_RCC_ClockConfig+0x1b4>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022fe:	f7fe fef3 	bl	80010e8 <HAL_GetTick>
 8002302:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002304:	e00a      	b.n	800231c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002306:	f7fe feef 	bl	80010e8 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f241 3288 	movw	r2, #5000	; 0x1388
 8002314:	4293      	cmp	r3, r2
 8002316:	d901      	bls.n	800231c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e066      	b.n	80023ea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231c:	4b36      	ldr	r3, [pc, #216]	; (80023f8 <HAL_RCC_ClockConfig+0x1b4>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 020c 	and.w	r2, r3, #12
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	429a      	cmp	r2, r3
 800232c:	d1eb      	bne.n	8002306 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d008      	beq.n	800234c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800233a:	4b2f      	ldr	r3, [pc, #188]	; (80023f8 <HAL_RCC_ClockConfig+0x1b4>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	492c      	ldr	r1, [pc, #176]	; (80023f8 <HAL_RCC_ClockConfig+0x1b4>)
 8002348:	4313      	orrs	r3, r2
 800234a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800234c:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <HAL_RCC_ClockConfig+0x1b0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d210      	bcs.n	800237c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <HAL_RCC_ClockConfig+0x1b0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 0207 	bic.w	r2, r3, #7
 8002362:	4924      	ldr	r1, [pc, #144]	; (80023f4 <HAL_RCC_ClockConfig+0x1b0>)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <HAL_RCC_ClockConfig+0x1b0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e036      	b.n	80023ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d008      	beq.n	800239a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002388:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_RCC_ClockConfig+0x1b4>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	4918      	ldr	r1, [pc, #96]	; (80023f8 <HAL_RCC_ClockConfig+0x1b4>)
 8002396:	4313      	orrs	r3, r2
 8002398:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d009      	beq.n	80023ba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023a6:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <HAL_RCC_ClockConfig+0x1b4>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4910      	ldr	r1, [pc, #64]	; (80023f8 <HAL_RCC_ClockConfig+0x1b4>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023ba:	f000 f825 	bl	8002408 <HAL_RCC_GetSysClockFreq>
 80023be:	4601      	mov	r1, r0
 80023c0:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <HAL_RCC_ClockConfig+0x1b4>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	091b      	lsrs	r3, r3, #4
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	4a0c      	ldr	r2, [pc, #48]	; (80023fc <HAL_RCC_ClockConfig+0x1b8>)
 80023cc:	5cd3      	ldrb	r3, [r2, r3]
 80023ce:	f003 031f 	and.w	r3, r3, #31
 80023d2:	fa21 f303 	lsr.w	r3, r1, r3
 80023d6:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023da:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <HAL_RCC_ClockConfig+0x1c0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe fe32 	bl	8001048 <HAL_InitTick>
 80023e4:	4603      	mov	r3, r0
 80023e6:	72fb      	strb	r3, [r7, #11]

  return status;
 80023e8:	7afb      	ldrb	r3, [r7, #11]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40022000 	.word	0x40022000
 80023f8:	40021000 	.word	0x40021000
 80023fc:	08004134 	.word	0x08004134
 8002400:	20000000 	.word	0x20000000
 8002404:	2000003c 	.word	0x2000003c

08002408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	; 0x24
 800240c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
 8002412:	2300      	movs	r3, #0
 8002414:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002416:	4b3d      	ldr	r3, [pc, #244]	; (800250c <HAL_RCC_GetSysClockFreq+0x104>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002420:	4b3a      	ldr	r3, [pc, #232]	; (800250c <HAL_RCC_GetSysClockFreq+0x104>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_RCC_GetSysClockFreq+0x34>
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	2b0c      	cmp	r3, #12
 8002434:	d121      	bne.n	800247a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d11e      	bne.n	800247a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800243c:	4b33      	ldr	r3, [pc, #204]	; (800250c <HAL_RCC_GetSysClockFreq+0x104>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d107      	bne.n	8002458 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002448:	4b30      	ldr	r3, [pc, #192]	; (800250c <HAL_RCC_GetSysClockFreq+0x104>)
 800244a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800244e:	0a1b      	lsrs	r3, r3, #8
 8002450:	f003 030f 	and.w	r3, r3, #15
 8002454:	61fb      	str	r3, [r7, #28]
 8002456:	e005      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002458:	4b2c      	ldr	r3, [pc, #176]	; (800250c <HAL_RCC_GetSysClockFreq+0x104>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002464:	4a2a      	ldr	r2, [pc, #168]	; (8002510 <HAL_RCC_GetSysClockFreq+0x108>)
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10d      	bne.n	8002490 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002478:	e00a      	b.n	8002490 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	2b04      	cmp	r3, #4
 800247e:	d102      	bne.n	8002486 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002480:	4b24      	ldr	r3, [pc, #144]	; (8002514 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002482:	61bb      	str	r3, [r7, #24]
 8002484:	e004      	b.n	8002490 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	2b08      	cmp	r3, #8
 800248a:	d101      	bne.n	8002490 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800248c:	4b22      	ldr	r3, [pc, #136]	; (8002518 <HAL_RCC_GetSysClockFreq+0x110>)
 800248e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	2b0c      	cmp	r3, #12
 8002494:	d133      	bne.n	80024fe <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002496:	4b1d      	ldr	r3, [pc, #116]	; (800250c <HAL_RCC_GetSysClockFreq+0x104>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d002      	beq.n	80024ac <HAL_RCC_GetSysClockFreq+0xa4>
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d003      	beq.n	80024b2 <HAL_RCC_GetSysClockFreq+0xaa>
 80024aa:	e005      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024ac:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024ae:	617b      	str	r3, [r7, #20]
      break;
 80024b0:	e005      	b.n	80024be <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024b2:	4b19      	ldr	r3, [pc, #100]	; (8002518 <HAL_RCC_GetSysClockFreq+0x110>)
 80024b4:	617b      	str	r3, [r7, #20]
      break;
 80024b6:	e002      	b.n	80024be <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	617b      	str	r3, [r7, #20]
      break;
 80024bc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024be:	4b13      	ldr	r3, [pc, #76]	; (800250c <HAL_RCC_GetSysClockFreq+0x104>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	091b      	lsrs	r3, r3, #4
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	3301      	adds	r3, #1
 80024ca:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <HAL_RCC_GetSysClockFreq+0x104>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	0a1b      	lsrs	r3, r3, #8
 80024d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	fb02 f203 	mul.w	r2, r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <HAL_RCC_GetSysClockFreq+0x104>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	0e5b      	lsrs	r3, r3, #25
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	3301      	adds	r3, #1
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024fe:	69bb      	ldr	r3, [r7, #24]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3724      	adds	r7, #36	; 0x24
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	40021000 	.word	0x40021000
 8002510:	0800414c 	.word	0x0800414c
 8002514:	00f42400 	.word	0x00f42400
 8002518:	007a1200 	.word	0x007a1200

0800251c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002520:	4b03      	ldr	r3, [pc, #12]	; (8002530 <HAL_RCC_GetHCLKFreq+0x14>)
 8002522:	681b      	ldr	r3, [r3, #0]
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20000000 	.word	0x20000000

08002534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002538:	f7ff fff0 	bl	800251c <HAL_RCC_GetHCLKFreq>
 800253c:	4601      	mov	r1, r0
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	0a1b      	lsrs	r3, r3, #8
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	4a04      	ldr	r2, [pc, #16]	; (800255c <HAL_RCC_GetPCLK1Freq+0x28>)
 800254a:	5cd3      	ldrb	r3, [r2, r3]
 800254c:	f003 031f 	and.w	r3, r3, #31
 8002550:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002554:	4618      	mov	r0, r3
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40021000 	.word	0x40021000
 800255c:	08004144 	.word	0x08004144

08002560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002564:	f7ff ffda 	bl	800251c <HAL_RCC_GetHCLKFreq>
 8002568:	4601      	mov	r1, r0
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_RCC_GetPCLK2Freq+0x24>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	0adb      	lsrs	r3, r3, #11
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	4a04      	ldr	r2, [pc, #16]	; (8002588 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002576:	5cd3      	ldrb	r3, [r2, r3]
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002580:	4618      	mov	r0, r3
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40021000 	.word	0x40021000
 8002588:	08004144 	.word	0x08004144

0800258c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002594:	2300      	movs	r3, #0
 8002596:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002598:	4b2a      	ldr	r3, [pc, #168]	; (8002644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800259a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025a4:	f7ff fa04 	bl	80019b0 <HAL_PWREx_GetVoltageRange>
 80025a8:	6178      	str	r0, [r7, #20]
 80025aa:	e014      	b.n	80025d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025ac:	4b25      	ldr	r3, [pc, #148]	; (8002644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b0:	4a24      	ldr	r2, [pc, #144]	; (8002644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b6:	6593      	str	r3, [r2, #88]	; 0x58
 80025b8:	4b22      	ldr	r3, [pc, #136]	; (8002644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025c4:	f7ff f9f4 	bl	80019b0 <HAL_PWREx_GetVoltageRange>
 80025c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025ca:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ce:	4a1d      	ldr	r2, [pc, #116]	; (8002644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025dc:	d10b      	bne.n	80025f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b80      	cmp	r3, #128	; 0x80
 80025e2:	d919      	bls.n	8002618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2ba0      	cmp	r3, #160	; 0xa0
 80025e8:	d902      	bls.n	80025f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025ea:	2302      	movs	r3, #2
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	e013      	b.n	8002618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025f0:	2301      	movs	r3, #1
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	e010      	b.n	8002618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b80      	cmp	r3, #128	; 0x80
 80025fa:	d902      	bls.n	8002602 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025fc:	2303      	movs	r3, #3
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	e00a      	b.n	8002618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b80      	cmp	r3, #128	; 0x80
 8002606:	d102      	bne.n	800260e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002608:	2302      	movs	r3, #2
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	e004      	b.n	8002618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b70      	cmp	r3, #112	; 0x70
 8002612:	d101      	bne.n	8002618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002614:	2301      	movs	r3, #1
 8002616:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f023 0207 	bic.w	r2, r3, #7
 8002620:	4909      	ldr	r1, [pc, #36]	; (8002648 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002628:	4b07      	ldr	r3, [pc, #28]	; (8002648 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	429a      	cmp	r2, r3
 8002634:	d001      	beq.n	800263a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40021000 	.word	0x40021000
 8002648:	40022000 	.word	0x40022000

0800264c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002654:	2300      	movs	r3, #0
 8002656:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002658:	2300      	movs	r3, #0
 800265a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002664:	2b00      	cmp	r3, #0
 8002666:	d03f      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800266c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002670:	d01c      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002672:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002676:	d802      	bhi.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00e      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800267c:	e01f      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x72>
 800267e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002682:	d003      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002684:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002688:	d01c      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800268a:	e018      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800268c:	4b85      	ldr	r3, [pc, #532]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4a84      	ldr	r2, [pc, #528]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002696:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002698:	e015      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3304      	adds	r3, #4
 800269e:	2100      	movs	r1, #0
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 fab9 	bl	8002c18 <RCCEx_PLLSAI1_Config>
 80026a6:	4603      	mov	r3, r0
 80026a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026aa:	e00c      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3320      	adds	r3, #32
 80026b0:	2100      	movs	r1, #0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 fba0 	bl	8002df8 <RCCEx_PLLSAI2_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026bc:	e003      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	74fb      	strb	r3, [r7, #19]
      break;
 80026c2:	e000      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80026c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026c6:	7cfb      	ldrb	r3, [r7, #19]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10b      	bne.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026cc:	4b75      	ldr	r3, [pc, #468]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026da:	4972      	ldr	r1, [pc, #456]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026e2:	e001      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026e4:	7cfb      	ldrb	r3, [r7, #19]
 80026e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d03f      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026fc:	d01c      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80026fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002702:	d802      	bhi.n	800270a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00e      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002708:	e01f      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800270a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800270e:	d003      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002710:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002714:	d01c      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002716:	e018      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002718:	4b62      	ldr	r3, [pc, #392]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4a61      	ldr	r2, [pc, #388]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800271e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002722:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002724:	e015      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3304      	adds	r3, #4
 800272a:	2100      	movs	r1, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fa73 	bl	8002c18 <RCCEx_PLLSAI1_Config>
 8002732:	4603      	mov	r3, r0
 8002734:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002736:	e00c      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3320      	adds	r3, #32
 800273c:	2100      	movs	r1, #0
 800273e:	4618      	mov	r0, r3
 8002740:	f000 fb5a 	bl	8002df8 <RCCEx_PLLSAI2_Config>
 8002744:	4603      	mov	r3, r0
 8002746:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002748:	e003      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	74fb      	strb	r3, [r7, #19]
      break;
 800274e:	e000      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002750:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002752:	7cfb      	ldrb	r3, [r7, #19]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10b      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002758:	4b52      	ldr	r3, [pc, #328]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002766:	494f      	ldr	r1, [pc, #316]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800276e:	e001      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002770:	7cfb      	ldrb	r3, [r7, #19]
 8002772:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80a0 	beq.w	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002782:	2300      	movs	r3, #0
 8002784:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002786:	4b47      	ldr	r3, [pc, #284]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002796:	2300      	movs	r3, #0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00d      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800279c:	4b41      	ldr	r3, [pc, #260]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800279e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a0:	4a40      	ldr	r2, [pc, #256]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a6:	6593      	str	r3, [r2, #88]	; 0x58
 80027a8:	4b3e      	ldr	r3, [pc, #248]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027b4:	2301      	movs	r3, #1
 80027b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027b8:	4b3b      	ldr	r3, [pc, #236]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a3a      	ldr	r2, [pc, #232]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80027be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027c4:	f7fe fc90 	bl	80010e8 <HAL_GetTick>
 80027c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027ca:	e009      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027cc:	f7fe fc8c 	bl	80010e8 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d902      	bls.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	74fb      	strb	r3, [r7, #19]
        break;
 80027de:	e005      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027e0:	4b31      	ldr	r3, [pc, #196]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0ef      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80027ec:	7cfb      	ldrb	r3, [r7, #19]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d15c      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027f2:	4b2c      	ldr	r3, [pc, #176]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d01f      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	429a      	cmp	r2, r3
 800280e:	d019      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002810:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800281a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800281c:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800281e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002822:	4a20      	ldr	r2, [pc, #128]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800282c:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002832:	4a1c      	ldr	r2, [pc, #112]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800283c:	4a19      	ldr	r2, [pc, #100]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d016      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284e:	f7fe fc4b 	bl	80010e8 <HAL_GetTick>
 8002852:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002854:	e00b      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002856:	f7fe fc47 	bl	80010e8 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f241 3288 	movw	r2, #5000	; 0x1388
 8002864:	4293      	cmp	r3, r2
 8002866:	d902      	bls.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	74fb      	strb	r3, [r7, #19]
            break;
 800286c:	e006      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800286e:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0ec      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800287c:	7cfb      	ldrb	r3, [r7, #19]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10c      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002888:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002892:	4904      	ldr	r1, [pc, #16]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800289a:	e009      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800289c:	7cfb      	ldrb	r3, [r7, #19]
 800289e:	74bb      	strb	r3, [r7, #18]
 80028a0:	e006      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ac:	7cfb      	ldrb	r3, [r7, #19]
 80028ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028b0:	7c7b      	ldrb	r3, [r7, #17]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d105      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b6:	4b9e      	ldr	r3, [pc, #632]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ba:	4a9d      	ldr	r2, [pc, #628]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00a      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ce:	4b98      	ldr	r3, [pc, #608]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d4:	f023 0203 	bic.w	r2, r3, #3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028dc:	4994      	ldr	r1, [pc, #592]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00a      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028f0:	4b8f      	ldr	r3, [pc, #572]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f6:	f023 020c 	bic.w	r2, r3, #12
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fe:	498c      	ldr	r1, [pc, #560]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002912:	4b87      	ldr	r3, [pc, #540]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002918:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	4983      	ldr	r1, [pc, #524]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002934:	4b7e      	ldr	r3, [pc, #504]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	497b      	ldr	r1, [pc, #492]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0310 	and.w	r3, r3, #16
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002956:	4b76      	ldr	r3, [pc, #472]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002964:	4972      	ldr	r1, [pc, #456]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0320 	and.w	r3, r3, #32
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002978:	4b6d      	ldr	r3, [pc, #436]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002986:	496a      	ldr	r1, [pc, #424]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800299a:	4b65      	ldr	r3, [pc, #404]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a8:	4961      	ldr	r1, [pc, #388]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029bc:	4b5c      	ldr	r3, [pc, #368]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ca:	4959      	ldr	r1, [pc, #356]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029de:	4b54      	ldr	r3, [pc, #336]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ec:	4950      	ldr	r1, [pc, #320]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00a      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a00:	4b4b      	ldr	r3, [pc, #300]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a06:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0e:	4948      	ldr	r1, [pc, #288]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00a      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a22:	4b43      	ldr	r3, [pc, #268]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a30:	493f      	ldr	r1, [pc, #252]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d028      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a44:	4b3a      	ldr	r3, [pc, #232]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a52:	4937      	ldr	r1, [pc, #220]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a62:	d106      	bne.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a64:	4b32      	ldr	r3, [pc, #200]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	4a31      	ldr	r2, [pc, #196]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a6e:	60d3      	str	r3, [r2, #12]
 8002a70:	e011      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a7a:	d10c      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3304      	adds	r3, #4
 8002a80:	2101      	movs	r1, #1
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f8c8 	bl	8002c18 <RCCEx_PLLSAI1_Config>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a8c:	7cfb      	ldrb	r3, [r7, #19]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002a92:	7cfb      	ldrb	r3, [r7, #19]
 8002a94:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d028      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002aa2:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab0:	491f      	ldr	r1, [pc, #124]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ac0:	d106      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	4a1a      	ldr	r2, [pc, #104]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ac8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002acc:	60d3      	str	r3, [r2, #12]
 8002ace:	e011      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3304      	adds	r3, #4
 8002ade:	2101      	movs	r1, #1
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 f899 	bl	8002c18 <RCCEx_PLLSAI1_Config>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aea:	7cfb      	ldrb	r3, [r7, #19]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002af0:	7cfb      	ldrb	r3, [r7, #19]
 8002af2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d02b      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b0e:	4908      	ldr	r1, [pc, #32]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b1e:	d109      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4a02      	ldr	r2, [pc, #8]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b2a:	60d3      	str	r3, [r2, #12]
 8002b2c:	e014      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b3c:	d10c      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3304      	adds	r3, #4
 8002b42:	2101      	movs	r1, #1
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 f867 	bl	8002c18 <RCCEx_PLLSAI1_Config>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b4e:	7cfb      	ldrb	r3, [r7, #19]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002b54:	7cfb      	ldrb	r3, [r7, #19]
 8002b56:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d02f      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b64:	4b2b      	ldr	r3, [pc, #172]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b72:	4928      	ldr	r1, [pc, #160]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b82:	d10d      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3304      	adds	r3, #4
 8002b88:	2102      	movs	r1, #2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 f844 	bl	8002c18 <RCCEx_PLLSAI1_Config>
 8002b90:	4603      	mov	r3, r0
 8002b92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b94:	7cfb      	ldrb	r3, [r7, #19]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d014      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002b9a:	7cfb      	ldrb	r3, [r7, #19]
 8002b9c:	74bb      	strb	r3, [r7, #18]
 8002b9e:	e011      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3320      	adds	r3, #32
 8002bae:	2102      	movs	r1, #2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 f921 	bl	8002df8 <RCCEx_PLLSAI2_Config>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bba:	7cfb      	ldrb	r3, [r7, #19]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002bc0:	7cfb      	ldrb	r3, [r7, #19]
 8002bc2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002bd0:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bde:	490d      	ldr	r1, [pc, #52]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00b      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bf2:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c02:	4904      	ldr	r1, [pc, #16]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c0a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40021000 	.word	0x40021000

08002c18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c26:	4b73      	ldr	r3, [pc, #460]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d018      	beq.n	8002c64 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c32:	4b70      	ldr	r3, [pc, #448]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f003 0203 	and.w	r2, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d10d      	bne.n	8002c5e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
       ||
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d009      	beq.n	8002c5e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c4a:	4b6a      	ldr	r3, [pc, #424]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	091b      	lsrs	r3, r3, #4
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
       ||
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d044      	beq.n	8002ce8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	73fb      	strb	r3, [r7, #15]
 8002c62:	e041      	b.n	8002ce8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d00c      	beq.n	8002c86 <RCCEx_PLLSAI1_Config+0x6e>
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d013      	beq.n	8002c98 <RCCEx_PLLSAI1_Config+0x80>
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d120      	bne.n	8002cb6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c74:	4b5f      	ldr	r3, [pc, #380]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d11d      	bne.n	8002cbc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c84:	e01a      	b.n	8002cbc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c86:	4b5b      	ldr	r3, [pc, #364]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d116      	bne.n	8002cc0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c96:	e013      	b.n	8002cc0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c98:	4b56      	ldr	r3, [pc, #344]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10f      	bne.n	8002cc4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ca4:	4b53      	ldr	r3, [pc, #332]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d109      	bne.n	8002cc4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cb4:	e006      	b.n	8002cc4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	73fb      	strb	r3, [r7, #15]
      break;
 8002cba:	e004      	b.n	8002cc6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002cbc:	bf00      	nop
 8002cbe:	e002      	b.n	8002cc6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002cc0:	bf00      	nop
 8002cc2:	e000      	b.n	8002cc6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002cc4:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10d      	bne.n	8002ce8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ccc:	4b49      	ldr	r3, [pc, #292]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6819      	ldr	r1, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	4944      	ldr	r1, [pc, #272]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d17d      	bne.n	8002dea <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002cee:	4b41      	ldr	r3, [pc, #260]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a40      	ldr	r2, [pc, #256]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cf4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cfa:	f7fe f9f5 	bl	80010e8 <HAL_GetTick>
 8002cfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d00:	e009      	b.n	8002d16 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d02:	f7fe f9f1 	bl	80010e8 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d902      	bls.n	8002d16 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	73fb      	strb	r3, [r7, #15]
        break;
 8002d14:	e005      	b.n	8002d22 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d16:	4b37      	ldr	r3, [pc, #220]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1ef      	bne.n	8002d02 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d160      	bne.n	8002dea <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d111      	bne.n	8002d52 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d2e:	4b31      	ldr	r3, [pc, #196]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6892      	ldr	r2, [r2, #8]
 8002d3e:	0211      	lsls	r1, r2, #8
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	68d2      	ldr	r2, [r2, #12]
 8002d44:	0912      	lsrs	r2, r2, #4
 8002d46:	0452      	lsls	r2, r2, #17
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	492a      	ldr	r1, [pc, #168]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	610b      	str	r3, [r1, #16]
 8002d50:	e027      	b.n	8002da2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d112      	bne.n	8002d7e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d58:	4b26      	ldr	r3, [pc, #152]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6892      	ldr	r2, [r2, #8]
 8002d68:	0211      	lsls	r1, r2, #8
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6912      	ldr	r2, [r2, #16]
 8002d6e:	0852      	lsrs	r2, r2, #1
 8002d70:	3a01      	subs	r2, #1
 8002d72:	0552      	lsls	r2, r2, #21
 8002d74:	430a      	orrs	r2, r1
 8002d76:	491f      	ldr	r1, [pc, #124]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	610b      	str	r3, [r1, #16]
 8002d7c:	e011      	b.n	8002da2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d7e:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d86:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6892      	ldr	r2, [r2, #8]
 8002d8e:	0211      	lsls	r1, r2, #8
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6952      	ldr	r2, [r2, #20]
 8002d94:	0852      	lsrs	r2, r2, #1
 8002d96:	3a01      	subs	r2, #1
 8002d98:	0652      	lsls	r2, r2, #25
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	4915      	ldr	r1, [pc, #84]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002da2:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a13      	ldr	r2, [pc, #76]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002da8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dae:	f7fe f99b 	bl	80010e8 <HAL_GetTick>
 8002db2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002db4:	e009      	b.n	8002dca <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002db6:	f7fe f997 	bl	80010e8 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d902      	bls.n	8002dca <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	73fb      	strb	r3, [r7, #15]
          break;
 8002dc8:	e005      	b.n	8002dd6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dca:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0ef      	beq.n	8002db6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d106      	bne.n	8002dea <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	4903      	ldr	r1, [pc, #12]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40021000 	.word	0x40021000

08002df8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e02:	2300      	movs	r3, #0
 8002e04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e06:	4b68      	ldr	r3, [pc, #416]	; (8002fa8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d018      	beq.n	8002e44 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e12:	4b65      	ldr	r3, [pc, #404]	; (8002fa8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f003 0203 	and.w	r2, r3, #3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d10d      	bne.n	8002e3e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
       ||
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d009      	beq.n	8002e3e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e2a:	4b5f      	ldr	r3, [pc, #380]	; (8002fa8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	091b      	lsrs	r3, r3, #4
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
       ||
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d044      	beq.n	8002ec8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	73fb      	strb	r3, [r7, #15]
 8002e42:	e041      	b.n	8002ec8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d00c      	beq.n	8002e66 <RCCEx_PLLSAI2_Config+0x6e>
 8002e4c:	2b03      	cmp	r3, #3
 8002e4e:	d013      	beq.n	8002e78 <RCCEx_PLLSAI2_Config+0x80>
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d120      	bne.n	8002e96 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e54:	4b54      	ldr	r3, [pc, #336]	; (8002fa8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d11d      	bne.n	8002e9c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e64:	e01a      	b.n	8002e9c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e66:	4b50      	ldr	r3, [pc, #320]	; (8002fa8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d116      	bne.n	8002ea0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e76:	e013      	b.n	8002ea0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e78:	4b4b      	ldr	r3, [pc, #300]	; (8002fa8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10f      	bne.n	8002ea4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e84:	4b48      	ldr	r3, [pc, #288]	; (8002fa8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d109      	bne.n	8002ea4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e94:	e006      	b.n	8002ea4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	73fb      	strb	r3, [r7, #15]
      break;
 8002e9a:	e004      	b.n	8002ea6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002e9c:	bf00      	nop
 8002e9e:	e002      	b.n	8002ea6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ea0:	bf00      	nop
 8002ea2:	e000      	b.n	8002ea6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ea4:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10d      	bne.n	8002ec8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002eac:	4b3e      	ldr	r3, [pc, #248]	; (8002fa8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6819      	ldr	r1, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	4939      	ldr	r1, [pc, #228]	; (8002fa8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d167      	bne.n	8002f9e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ece:	4b36      	ldr	r3, [pc, #216]	; (8002fa8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a35      	ldr	r2, [pc, #212]	; (8002fa8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eda:	f7fe f905 	bl	80010e8 <HAL_GetTick>
 8002ede:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ee0:	e009      	b.n	8002ef6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ee2:	f7fe f901 	bl	80010e8 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d902      	bls.n	8002ef6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	73fb      	strb	r3, [r7, #15]
        break;
 8002ef4:	e005      	b.n	8002f02 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ef6:	4b2c      	ldr	r3, [pc, #176]	; (8002fa8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1ef      	bne.n	8002ee2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d14a      	bne.n	8002f9e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d111      	bne.n	8002f32 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f0e:	4b26      	ldr	r3, [pc, #152]	; (8002fa8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6892      	ldr	r2, [r2, #8]
 8002f1e:	0211      	lsls	r1, r2, #8
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	68d2      	ldr	r2, [r2, #12]
 8002f24:	0912      	lsrs	r2, r2, #4
 8002f26:	0452      	lsls	r2, r2, #17
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	491f      	ldr	r1, [pc, #124]	; (8002fa8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	614b      	str	r3, [r1, #20]
 8002f30:	e011      	b.n	8002f56 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f32:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f3a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6892      	ldr	r2, [r2, #8]
 8002f42:	0211      	lsls	r1, r2, #8
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6912      	ldr	r2, [r2, #16]
 8002f48:	0852      	lsrs	r2, r2, #1
 8002f4a:	3a01      	subs	r2, #1
 8002f4c:	0652      	lsls	r2, r2, #25
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	4915      	ldr	r1, [pc, #84]	; (8002fa8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f56:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a13      	ldr	r2, [pc, #76]	; (8002fa8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f60:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f62:	f7fe f8c1 	bl	80010e8 <HAL_GetTick>
 8002f66:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f68:	e009      	b.n	8002f7e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f6a:	f7fe f8bd 	bl	80010e8 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d902      	bls.n	8002f7e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	73fb      	strb	r3, [r7, #15]
          break;
 8002f7c:	e005      	b.n	8002f8a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f7e:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0ef      	beq.n	8002f6a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d106      	bne.n	8002f9e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f90:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f92:	695a      	ldr	r2, [r3, #20]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	4903      	ldr	r1, [pc, #12]	; (8002fa8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40021000 	.word	0x40021000

08002fac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e040      	b.n	8003040 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fd fbbe 	bl	8000750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2224      	movs	r2, #36	; 0x24
 8002fd8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0201 	bic.w	r2, r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 faf2 	bl	80035d4 <UART_SetConfig>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e022      	b.n	8003040 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fd70 	bl	8003ae8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003016:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003026:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 fdf7 	bl	8003c2c <UART_CheckIdleState>
 800303e:	4603      	mov	r3, r0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e027      	b.n	80030aa <HAL_UART_DeInit+0x62>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2224      	movs	r2, #36	; 0x24
 800305e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0201 	bic.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2200      	movs	r2, #0
 800307e:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2200      	movs	r2, #0
 8003086:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7fd fbe7 	bl	800085c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b08a      	sub	sp, #40	; 0x28
 80030b6:	af02      	add	r7, sp, #8
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	4613      	mov	r3, r2
 80030c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	f040 8081 	bne.w	80031ce <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_UART_Transmit+0x26>
 80030d2:	88fb      	ldrh	r3, [r7, #6]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e079      	b.n	80031d0 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <HAL_UART_Transmit+0x38>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e072      	b.n	80031d0 <HAL_UART_Transmit+0x11e>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2221      	movs	r2, #33	; 0x21
 80030fc:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80030fe:	f7fd fff3 	bl	80010e8 <HAL_GetTick>
 8003102:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	88fa      	ldrh	r2, [r7, #6]
 8003108:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	88fa      	ldrh	r2, [r7, #6]
 8003110:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311c:	d108      	bne.n	8003130 <HAL_UART_Transmit+0x7e>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d104      	bne.n	8003130 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003126:	2300      	movs	r3, #0
 8003128:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	e003      	b.n	8003138 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003134:	2300      	movs	r3, #0
 8003136:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003140:	e02d      	b.n	800319e <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2200      	movs	r2, #0
 800314a:	2180      	movs	r1, #128	; 0x80
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 fdb2 	bl	8003cb6 <UART_WaitOnFlagUntilTimeout>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e039      	b.n	80031d0 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10b      	bne.n	800317a <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	881a      	ldrh	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800316e:	b292      	uxth	r2, r2
 8003170:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	3302      	adds	r3, #2
 8003176:	61bb      	str	r3, [r7, #24]
 8003178:	e008      	b.n	800318c <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	781a      	ldrb	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	b292      	uxth	r2, r2
 8003184:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3301      	adds	r3, #1
 800318a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1cb      	bne.n	8003142 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2200      	movs	r2, #0
 80031b2:	2140      	movs	r1, #64	; 0x40
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 fd7e 	bl	8003cb6 <UART_WaitOnFlagUntilTimeout>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e005      	b.n	80031d0 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e000      	b.n	80031d0 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80031ce:	2302      	movs	r3, #2
  }
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3720      	adds	r7, #32
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	4613      	mov	r3, r2
 80031e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ea:	2b20      	cmp	r3, #32
 80031ec:	f040 808a 	bne.w	8003304 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <HAL_UART_Receive_IT+0x24>
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e082      	b.n	8003306 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_UART_Receive_IT+0x36>
 800320a:	2302      	movs	r3, #2
 800320c:	e07b      	b.n	8003306 <HAL_UART_Receive_IT+0x12e>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	88fa      	ldrh	r2, [r7, #6]
 8003220:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	88fa      	ldrh	r2, [r7, #6]
 8003228:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800323a:	d10e      	bne.n	800325a <HAL_UART_Receive_IT+0x82>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d105      	bne.n	8003250 <HAL_UART_Receive_IT+0x78>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f240 12ff 	movw	r2, #511	; 0x1ff
 800324a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800324e:	e02d      	b.n	80032ac <HAL_UART_Receive_IT+0xd4>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	22ff      	movs	r2, #255	; 0xff
 8003254:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003258:	e028      	b.n	80032ac <HAL_UART_Receive_IT+0xd4>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10d      	bne.n	800327e <HAL_UART_Receive_IT+0xa6>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d104      	bne.n	8003274 <HAL_UART_Receive_IT+0x9c>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	22ff      	movs	r2, #255	; 0xff
 800326e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003272:	e01b      	b.n	80032ac <HAL_UART_Receive_IT+0xd4>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	227f      	movs	r2, #127	; 0x7f
 8003278:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800327c:	e016      	b.n	80032ac <HAL_UART_Receive_IT+0xd4>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003286:	d10d      	bne.n	80032a4 <HAL_UART_Receive_IT+0xcc>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d104      	bne.n	800329a <HAL_UART_Receive_IT+0xc2>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	227f      	movs	r2, #127	; 0x7f
 8003294:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003298:	e008      	b.n	80032ac <HAL_UART_Receive_IT+0xd4>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	223f      	movs	r2, #63	; 0x3f
 800329e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032a2:	e003      	b.n	80032ac <HAL_UART_Receive_IT+0xd4>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2222      	movs	r2, #34	; 0x22
 80032b6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0201 	orr.w	r2, r2, #1
 80032c6:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d0:	d107      	bne.n	80032e2 <HAL_UART_Receive_IT+0x10a>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d103      	bne.n	80032e2 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4a0d      	ldr	r2, [pc, #52]	; (8003314 <HAL_UART_Receive_IT+0x13c>)
 80032de:	661a      	str	r2, [r3, #96]	; 0x60
 80032e0:	e002      	b.n	80032e8 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4a0c      	ldr	r2, [pc, #48]	; (8003318 <HAL_UART_Receive_IT+0x140>)
 80032e6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80032fe:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	e000      	b.n	8003306 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8003304:	2302      	movs	r3, #2
  }
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	08003ef5 	.word	0x08003ef5
 8003318:	08003e4b 	.word	0x08003e4b

0800331c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b088      	sub	sp, #32
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003342:	4013      	ands	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d113      	bne.n	8003374 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00e      	beq.n	8003374 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b00      	cmp	r3, #0
 800335e:	d009      	beq.n	8003374 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 8114 	beq.w	8003592 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	4798      	blx	r3
      }
      return;
 8003372:	e10e      	b.n	8003592 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 80d6 	beq.w	8003528 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d105      	bne.n	8003392 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4b86      	ldr	r3, [pc, #536]	; (80035a4 <HAL_UART_IRQHandler+0x288>)
 800338a:	4013      	ands	r3, r2
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80cb 	beq.w	8003528 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00e      	beq.n	80033ba <HAL_UART_IRQHandler+0x9e>
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d009      	beq.n	80033ba <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2201      	movs	r2, #1
 80033ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033b2:	f043 0201 	orr.w	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00e      	beq.n	80033e2 <HAL_UART_IRQHandler+0xc6>
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d009      	beq.n	80033e2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2202      	movs	r2, #2
 80033d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033da:	f043 0204 	orr.w	r2, r3, #4
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00e      	beq.n	800340a <HAL_UART_IRQHandler+0xee>
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2204      	movs	r2, #4
 80033fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003402:	f043 0202 	orr.w	r2, r3, #2
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b00      	cmp	r3, #0
 8003412:	d013      	beq.n	800343c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b00      	cmp	r3, #0
 800341c:	d104      	bne.n	8003428 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003424:	2b00      	cmp	r3, #0
 8003426:	d009      	beq.n	800343c <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2208      	movs	r2, #8
 800342e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003434:	f043 0208 	orr.w	r2, r3, #8
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00f      	beq.n	8003466 <HAL_UART_IRQHandler+0x14a>
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00a      	beq.n	8003466 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003458:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800345e:	f043 0220 	orr.w	r2, r3, #32
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 8093 	beq.w	8003596 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f003 0320 	and.w	r3, r3, #32
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00c      	beq.n	8003494 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b00      	cmp	r3, #0
 8003482:	d007      	beq.n	8003494 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003498:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a4:	2b40      	cmp	r3, #64	; 0x40
 80034a6:	d004      	beq.n	80034b2 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d031      	beq.n	8003516 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fc7a 	bl	8003dac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c2:	2b40      	cmp	r3, #64	; 0x40
 80034c4:	d123      	bne.n	800350e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d013      	beq.n	8003506 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034e2:	4a31      	ldr	r2, [pc, #196]	; (80035a8 <HAL_UART_IRQHandler+0x28c>)
 80034e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fd ff6b 	bl	80013c6 <HAL_DMA_Abort_IT>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d016      	beq.n	8003524 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003500:	4610      	mov	r0, r2
 8003502:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003504:	e00e      	b.n	8003524 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f85a 	bl	80035c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800350c:	e00a      	b.n	8003524 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f856 	bl	80035c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003514:	e006      	b.n	8003524 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f852 	bl	80035c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003522:	e038      	b.n	8003596 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003524:	bf00      	nop
    return;
 8003526:	e036      	b.n	8003596 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00d      	beq.n	800354e <HAL_UART_IRQHandler+0x232>
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d008      	beq.n	800354e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003544:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 fd29 	bl	8003f9e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800354c:	e026      	b.n	800359c <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00d      	beq.n	8003574 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003566:	2b00      	cmp	r3, #0
 8003568:	d017      	beq.n	800359a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	4798      	blx	r3
    }
    return;
 8003572:	e012      	b.n	800359a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00e      	beq.n	800359c <HAL_UART_IRQHandler+0x280>
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003584:	2b00      	cmp	r3, #0
 8003586:	d009      	beq.n	800359c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 fc45 	bl	8003e18 <UART_EndTransmit_IT>
    return;
 800358e:	bf00      	nop
 8003590:	e004      	b.n	800359c <HAL_UART_IRQHandler+0x280>
      return;
 8003592:	bf00      	nop
 8003594:	e002      	b.n	800359c <HAL_UART_IRQHandler+0x280>
    return;
 8003596:	bf00      	nop
 8003598:	e000      	b.n	800359c <HAL_UART_IRQHandler+0x280>
    return;
 800359a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800359c:	3720      	adds	r7, #32
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	04000120 	.word	0x04000120
 80035a8:	08003ded 	.word	0x08003ded

080035ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035d4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80035d8:	b088      	sub	sp, #32
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	4bac      	ldr	r3, [pc, #688]	; (80038b4 <UART_SetConfig+0x2e0>)
 8003602:	4013      	ands	r3, r2
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	69f9      	ldr	r1, [r7, #28]
 800360a:	430b      	orrs	r3, r1
 800360c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4aa2      	ldr	r2, [pc, #648]	; (80038b8 <UART_SetConfig+0x2e4>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d004      	beq.n	800363e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	69fa      	ldr	r2, [r7, #28]
 800363a:	4313      	orrs	r3, r2
 800363c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	69fa      	ldr	r2, [r7, #28]
 800364e:	430a      	orrs	r2, r1
 8003650:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a99      	ldr	r2, [pc, #612]	; (80038bc <UART_SetConfig+0x2e8>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d121      	bne.n	80036a0 <UART_SetConfig+0xcc>
 800365c:	4b98      	ldr	r3, [pc, #608]	; (80038c0 <UART_SetConfig+0x2ec>)
 800365e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b03      	cmp	r3, #3
 8003668:	d816      	bhi.n	8003698 <UART_SetConfig+0xc4>
 800366a:	a201      	add	r2, pc, #4	; (adr r2, 8003670 <UART_SetConfig+0x9c>)
 800366c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003670:	08003681 	.word	0x08003681
 8003674:	0800368d 	.word	0x0800368d
 8003678:	08003687 	.word	0x08003687
 800367c:	08003693 	.word	0x08003693
 8003680:	2301      	movs	r3, #1
 8003682:	76fb      	strb	r3, [r7, #27]
 8003684:	e0e8      	b.n	8003858 <UART_SetConfig+0x284>
 8003686:	2302      	movs	r3, #2
 8003688:	76fb      	strb	r3, [r7, #27]
 800368a:	e0e5      	b.n	8003858 <UART_SetConfig+0x284>
 800368c:	2304      	movs	r3, #4
 800368e:	76fb      	strb	r3, [r7, #27]
 8003690:	e0e2      	b.n	8003858 <UART_SetConfig+0x284>
 8003692:	2308      	movs	r3, #8
 8003694:	76fb      	strb	r3, [r7, #27]
 8003696:	e0df      	b.n	8003858 <UART_SetConfig+0x284>
 8003698:	2310      	movs	r3, #16
 800369a:	76fb      	strb	r3, [r7, #27]
 800369c:	bf00      	nop
 800369e:	e0db      	b.n	8003858 <UART_SetConfig+0x284>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a87      	ldr	r2, [pc, #540]	; (80038c4 <UART_SetConfig+0x2f0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d134      	bne.n	8003714 <UART_SetConfig+0x140>
 80036aa:	4b85      	ldr	r3, [pc, #532]	; (80038c0 <UART_SetConfig+0x2ec>)
 80036ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b0:	f003 030c 	and.w	r3, r3, #12
 80036b4:	2b0c      	cmp	r3, #12
 80036b6:	d829      	bhi.n	800370c <UART_SetConfig+0x138>
 80036b8:	a201      	add	r2, pc, #4	; (adr r2, 80036c0 <UART_SetConfig+0xec>)
 80036ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036be:	bf00      	nop
 80036c0:	080036f5 	.word	0x080036f5
 80036c4:	0800370d 	.word	0x0800370d
 80036c8:	0800370d 	.word	0x0800370d
 80036cc:	0800370d 	.word	0x0800370d
 80036d0:	08003701 	.word	0x08003701
 80036d4:	0800370d 	.word	0x0800370d
 80036d8:	0800370d 	.word	0x0800370d
 80036dc:	0800370d 	.word	0x0800370d
 80036e0:	080036fb 	.word	0x080036fb
 80036e4:	0800370d 	.word	0x0800370d
 80036e8:	0800370d 	.word	0x0800370d
 80036ec:	0800370d 	.word	0x0800370d
 80036f0:	08003707 	.word	0x08003707
 80036f4:	2300      	movs	r3, #0
 80036f6:	76fb      	strb	r3, [r7, #27]
 80036f8:	e0ae      	b.n	8003858 <UART_SetConfig+0x284>
 80036fa:	2302      	movs	r3, #2
 80036fc:	76fb      	strb	r3, [r7, #27]
 80036fe:	e0ab      	b.n	8003858 <UART_SetConfig+0x284>
 8003700:	2304      	movs	r3, #4
 8003702:	76fb      	strb	r3, [r7, #27]
 8003704:	e0a8      	b.n	8003858 <UART_SetConfig+0x284>
 8003706:	2308      	movs	r3, #8
 8003708:	76fb      	strb	r3, [r7, #27]
 800370a:	e0a5      	b.n	8003858 <UART_SetConfig+0x284>
 800370c:	2310      	movs	r3, #16
 800370e:	76fb      	strb	r3, [r7, #27]
 8003710:	bf00      	nop
 8003712:	e0a1      	b.n	8003858 <UART_SetConfig+0x284>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a6b      	ldr	r2, [pc, #428]	; (80038c8 <UART_SetConfig+0x2f4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d120      	bne.n	8003760 <UART_SetConfig+0x18c>
 800371e:	4b68      	ldr	r3, [pc, #416]	; (80038c0 <UART_SetConfig+0x2ec>)
 8003720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003724:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003728:	2b10      	cmp	r3, #16
 800372a:	d00f      	beq.n	800374c <UART_SetConfig+0x178>
 800372c:	2b10      	cmp	r3, #16
 800372e:	d802      	bhi.n	8003736 <UART_SetConfig+0x162>
 8003730:	2b00      	cmp	r3, #0
 8003732:	d005      	beq.n	8003740 <UART_SetConfig+0x16c>
 8003734:	e010      	b.n	8003758 <UART_SetConfig+0x184>
 8003736:	2b20      	cmp	r3, #32
 8003738:	d005      	beq.n	8003746 <UART_SetConfig+0x172>
 800373a:	2b30      	cmp	r3, #48	; 0x30
 800373c:	d009      	beq.n	8003752 <UART_SetConfig+0x17e>
 800373e:	e00b      	b.n	8003758 <UART_SetConfig+0x184>
 8003740:	2300      	movs	r3, #0
 8003742:	76fb      	strb	r3, [r7, #27]
 8003744:	e088      	b.n	8003858 <UART_SetConfig+0x284>
 8003746:	2302      	movs	r3, #2
 8003748:	76fb      	strb	r3, [r7, #27]
 800374a:	e085      	b.n	8003858 <UART_SetConfig+0x284>
 800374c:	2304      	movs	r3, #4
 800374e:	76fb      	strb	r3, [r7, #27]
 8003750:	e082      	b.n	8003858 <UART_SetConfig+0x284>
 8003752:	2308      	movs	r3, #8
 8003754:	76fb      	strb	r3, [r7, #27]
 8003756:	e07f      	b.n	8003858 <UART_SetConfig+0x284>
 8003758:	2310      	movs	r3, #16
 800375a:	76fb      	strb	r3, [r7, #27]
 800375c:	bf00      	nop
 800375e:	e07b      	b.n	8003858 <UART_SetConfig+0x284>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a59      	ldr	r2, [pc, #356]	; (80038cc <UART_SetConfig+0x2f8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d120      	bne.n	80037ac <UART_SetConfig+0x1d8>
 800376a:	4b55      	ldr	r3, [pc, #340]	; (80038c0 <UART_SetConfig+0x2ec>)
 800376c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003770:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003774:	2b40      	cmp	r3, #64	; 0x40
 8003776:	d00f      	beq.n	8003798 <UART_SetConfig+0x1c4>
 8003778:	2b40      	cmp	r3, #64	; 0x40
 800377a:	d802      	bhi.n	8003782 <UART_SetConfig+0x1ae>
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <UART_SetConfig+0x1b8>
 8003780:	e010      	b.n	80037a4 <UART_SetConfig+0x1d0>
 8003782:	2b80      	cmp	r3, #128	; 0x80
 8003784:	d005      	beq.n	8003792 <UART_SetConfig+0x1be>
 8003786:	2bc0      	cmp	r3, #192	; 0xc0
 8003788:	d009      	beq.n	800379e <UART_SetConfig+0x1ca>
 800378a:	e00b      	b.n	80037a4 <UART_SetConfig+0x1d0>
 800378c:	2300      	movs	r3, #0
 800378e:	76fb      	strb	r3, [r7, #27]
 8003790:	e062      	b.n	8003858 <UART_SetConfig+0x284>
 8003792:	2302      	movs	r3, #2
 8003794:	76fb      	strb	r3, [r7, #27]
 8003796:	e05f      	b.n	8003858 <UART_SetConfig+0x284>
 8003798:	2304      	movs	r3, #4
 800379a:	76fb      	strb	r3, [r7, #27]
 800379c:	e05c      	b.n	8003858 <UART_SetConfig+0x284>
 800379e:	2308      	movs	r3, #8
 80037a0:	76fb      	strb	r3, [r7, #27]
 80037a2:	e059      	b.n	8003858 <UART_SetConfig+0x284>
 80037a4:	2310      	movs	r3, #16
 80037a6:	76fb      	strb	r3, [r7, #27]
 80037a8:	bf00      	nop
 80037aa:	e055      	b.n	8003858 <UART_SetConfig+0x284>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a47      	ldr	r2, [pc, #284]	; (80038d0 <UART_SetConfig+0x2fc>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d124      	bne.n	8003800 <UART_SetConfig+0x22c>
 80037b6:	4b42      	ldr	r3, [pc, #264]	; (80038c0 <UART_SetConfig+0x2ec>)
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c4:	d012      	beq.n	80037ec <UART_SetConfig+0x218>
 80037c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ca:	d802      	bhi.n	80037d2 <UART_SetConfig+0x1fe>
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d007      	beq.n	80037e0 <UART_SetConfig+0x20c>
 80037d0:	e012      	b.n	80037f8 <UART_SetConfig+0x224>
 80037d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d6:	d006      	beq.n	80037e6 <UART_SetConfig+0x212>
 80037d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037dc:	d009      	beq.n	80037f2 <UART_SetConfig+0x21e>
 80037de:	e00b      	b.n	80037f8 <UART_SetConfig+0x224>
 80037e0:	2300      	movs	r3, #0
 80037e2:	76fb      	strb	r3, [r7, #27]
 80037e4:	e038      	b.n	8003858 <UART_SetConfig+0x284>
 80037e6:	2302      	movs	r3, #2
 80037e8:	76fb      	strb	r3, [r7, #27]
 80037ea:	e035      	b.n	8003858 <UART_SetConfig+0x284>
 80037ec:	2304      	movs	r3, #4
 80037ee:	76fb      	strb	r3, [r7, #27]
 80037f0:	e032      	b.n	8003858 <UART_SetConfig+0x284>
 80037f2:	2308      	movs	r3, #8
 80037f4:	76fb      	strb	r3, [r7, #27]
 80037f6:	e02f      	b.n	8003858 <UART_SetConfig+0x284>
 80037f8:	2310      	movs	r3, #16
 80037fa:	76fb      	strb	r3, [r7, #27]
 80037fc:	bf00      	nop
 80037fe:	e02b      	b.n	8003858 <UART_SetConfig+0x284>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a2c      	ldr	r2, [pc, #176]	; (80038b8 <UART_SetConfig+0x2e4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d124      	bne.n	8003854 <UART_SetConfig+0x280>
 800380a:	4b2d      	ldr	r3, [pc, #180]	; (80038c0 <UART_SetConfig+0x2ec>)
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003810:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003818:	d012      	beq.n	8003840 <UART_SetConfig+0x26c>
 800381a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800381e:	d802      	bhi.n	8003826 <UART_SetConfig+0x252>
 8003820:	2b00      	cmp	r3, #0
 8003822:	d007      	beq.n	8003834 <UART_SetConfig+0x260>
 8003824:	e012      	b.n	800384c <UART_SetConfig+0x278>
 8003826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800382a:	d006      	beq.n	800383a <UART_SetConfig+0x266>
 800382c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003830:	d009      	beq.n	8003846 <UART_SetConfig+0x272>
 8003832:	e00b      	b.n	800384c <UART_SetConfig+0x278>
 8003834:	2300      	movs	r3, #0
 8003836:	76fb      	strb	r3, [r7, #27]
 8003838:	e00e      	b.n	8003858 <UART_SetConfig+0x284>
 800383a:	2302      	movs	r3, #2
 800383c:	76fb      	strb	r3, [r7, #27]
 800383e:	e00b      	b.n	8003858 <UART_SetConfig+0x284>
 8003840:	2304      	movs	r3, #4
 8003842:	76fb      	strb	r3, [r7, #27]
 8003844:	e008      	b.n	8003858 <UART_SetConfig+0x284>
 8003846:	2308      	movs	r3, #8
 8003848:	76fb      	strb	r3, [r7, #27]
 800384a:	e005      	b.n	8003858 <UART_SetConfig+0x284>
 800384c:	2310      	movs	r3, #16
 800384e:	76fb      	strb	r3, [r7, #27]
 8003850:	bf00      	nop
 8003852:	e001      	b.n	8003858 <UART_SetConfig+0x284>
 8003854:	2310      	movs	r3, #16
 8003856:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a16      	ldr	r2, [pc, #88]	; (80038b8 <UART_SetConfig+0x2e4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	f040 8087 	bne.w	8003972 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003864:	7efb      	ldrb	r3, [r7, #27]
 8003866:	2b08      	cmp	r3, #8
 8003868:	d836      	bhi.n	80038d8 <UART_SetConfig+0x304>
 800386a:	a201      	add	r2, pc, #4	; (adr r2, 8003870 <UART_SetConfig+0x29c>)
 800386c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003870:	08003895 	.word	0x08003895
 8003874:	080038d9 	.word	0x080038d9
 8003878:	0800389d 	.word	0x0800389d
 800387c:	080038d9 	.word	0x080038d9
 8003880:	080038a3 	.word	0x080038a3
 8003884:	080038d9 	.word	0x080038d9
 8003888:	080038d9 	.word	0x080038d9
 800388c:	080038d9 	.word	0x080038d9
 8003890:	080038ab 	.word	0x080038ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003894:	f7fe fe4e 	bl	8002534 <HAL_RCC_GetPCLK1Freq>
 8003898:	6178      	str	r0, [r7, #20]
        break;
 800389a:	e022      	b.n	80038e2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800389c:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <UART_SetConfig+0x300>)
 800389e:	617b      	str	r3, [r7, #20]
        break;
 80038a0:	e01f      	b.n	80038e2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038a2:	f7fe fdb1 	bl	8002408 <HAL_RCC_GetSysClockFreq>
 80038a6:	6178      	str	r0, [r7, #20]
        break;
 80038a8:	e01b      	b.n	80038e2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ae:	617b      	str	r3, [r7, #20]
        break;
 80038b0:	e017      	b.n	80038e2 <UART_SetConfig+0x30e>
 80038b2:	bf00      	nop
 80038b4:	efff69f3 	.word	0xefff69f3
 80038b8:	40008000 	.word	0x40008000
 80038bc:	40013800 	.word	0x40013800
 80038c0:	40021000 	.word	0x40021000
 80038c4:	40004400 	.word	0x40004400
 80038c8:	40004800 	.word	0x40004800
 80038cc:	40004c00 	.word	0x40004c00
 80038d0:	40005000 	.word	0x40005000
 80038d4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	76bb      	strb	r3, [r7, #26]
        break;
 80038e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 80f1 	beq.w	8003acc <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	4413      	add	r3, r2
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d305      	bcc.n	8003906 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	429a      	cmp	r2, r3
 8003904:	d902      	bls.n	800390c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	76bb      	strb	r3, [r7, #26]
 800390a:	e0df      	b.n	8003acc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	4619      	mov	r1, r3
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	f04f 0400 	mov.w	r4, #0
 800391c:	0214      	lsls	r4, r2, #8
 800391e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003922:	020b      	lsls	r3, r1, #8
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6852      	ldr	r2, [r2, #4]
 8003928:	0852      	lsrs	r2, r2, #1
 800392a:	4611      	mov	r1, r2
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	eb13 0b01 	adds.w	fp, r3, r1
 8003934:	eb44 0c02 	adc.w	ip, r4, r2
 8003938:	4658      	mov	r0, fp
 800393a:	4661      	mov	r1, ip
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f04f 0400 	mov.w	r4, #0
 8003944:	461a      	mov	r2, r3
 8003946:	4623      	mov	r3, r4
 8003948:	f7fc fc46 	bl	80001d8 <__aeabi_uldivmod>
 800394c:	4603      	mov	r3, r0
 800394e:	460c      	mov	r4, r1
 8003950:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003958:	d308      	bcc.n	800396c <UART_SetConfig+0x398>
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003960:	d204      	bcs.n	800396c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	60da      	str	r2, [r3, #12]
 800396a:	e0af      	b.n	8003acc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	76bb      	strb	r3, [r7, #26]
 8003970:	e0ac      	b.n	8003acc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800397a:	d15b      	bne.n	8003a34 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800397c:	7efb      	ldrb	r3, [r7, #27]
 800397e:	2b08      	cmp	r3, #8
 8003980:	d827      	bhi.n	80039d2 <UART_SetConfig+0x3fe>
 8003982:	a201      	add	r2, pc, #4	; (adr r2, 8003988 <UART_SetConfig+0x3b4>)
 8003984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003988:	080039ad 	.word	0x080039ad
 800398c:	080039b5 	.word	0x080039b5
 8003990:	080039bd 	.word	0x080039bd
 8003994:	080039d3 	.word	0x080039d3
 8003998:	080039c3 	.word	0x080039c3
 800399c:	080039d3 	.word	0x080039d3
 80039a0:	080039d3 	.word	0x080039d3
 80039a4:	080039d3 	.word	0x080039d3
 80039a8:	080039cb 	.word	0x080039cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039ac:	f7fe fdc2 	bl	8002534 <HAL_RCC_GetPCLK1Freq>
 80039b0:	6178      	str	r0, [r7, #20]
        break;
 80039b2:	e013      	b.n	80039dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039b4:	f7fe fdd4 	bl	8002560 <HAL_RCC_GetPCLK2Freq>
 80039b8:	6178      	str	r0, [r7, #20]
        break;
 80039ba:	e00f      	b.n	80039dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039bc:	4b49      	ldr	r3, [pc, #292]	; (8003ae4 <UART_SetConfig+0x510>)
 80039be:	617b      	str	r3, [r7, #20]
        break;
 80039c0:	e00c      	b.n	80039dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039c2:	f7fe fd21 	bl	8002408 <HAL_RCC_GetSysClockFreq>
 80039c6:	6178      	str	r0, [r7, #20]
        break;
 80039c8:	e008      	b.n	80039dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ce:	617b      	str	r3, [r7, #20]
        break;
 80039d0:	e004      	b.n	80039dc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	76bb      	strb	r3, [r7, #26]
        break;
 80039da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d074      	beq.n	8003acc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	005a      	lsls	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	085b      	lsrs	r3, r3, #1
 80039ec:	441a      	add	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b0f      	cmp	r3, #15
 80039fe:	d916      	bls.n	8003a2e <UART_SetConfig+0x45a>
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a06:	d212      	bcs.n	8003a2e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	f023 030f 	bic.w	r3, r3, #15
 8003a10:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	085b      	lsrs	r3, r3, #1
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	89fb      	ldrh	r3, [r7, #14]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	89fa      	ldrh	r2, [r7, #14]
 8003a2a:	60da      	str	r2, [r3, #12]
 8003a2c:	e04e      	b.n	8003acc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	76bb      	strb	r3, [r7, #26]
 8003a32:	e04b      	b.n	8003acc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a34:	7efb      	ldrb	r3, [r7, #27]
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d827      	bhi.n	8003a8a <UART_SetConfig+0x4b6>
 8003a3a:	a201      	add	r2, pc, #4	; (adr r2, 8003a40 <UART_SetConfig+0x46c>)
 8003a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a40:	08003a65 	.word	0x08003a65
 8003a44:	08003a6d 	.word	0x08003a6d
 8003a48:	08003a75 	.word	0x08003a75
 8003a4c:	08003a8b 	.word	0x08003a8b
 8003a50:	08003a7b 	.word	0x08003a7b
 8003a54:	08003a8b 	.word	0x08003a8b
 8003a58:	08003a8b 	.word	0x08003a8b
 8003a5c:	08003a8b 	.word	0x08003a8b
 8003a60:	08003a83 	.word	0x08003a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a64:	f7fe fd66 	bl	8002534 <HAL_RCC_GetPCLK1Freq>
 8003a68:	6178      	str	r0, [r7, #20]
        break;
 8003a6a:	e013      	b.n	8003a94 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a6c:	f7fe fd78 	bl	8002560 <HAL_RCC_GetPCLK2Freq>
 8003a70:	6178      	str	r0, [r7, #20]
        break;
 8003a72:	e00f      	b.n	8003a94 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a74:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <UART_SetConfig+0x510>)
 8003a76:	617b      	str	r3, [r7, #20]
        break;
 8003a78:	e00c      	b.n	8003a94 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a7a:	f7fe fcc5 	bl	8002408 <HAL_RCC_GetSysClockFreq>
 8003a7e:	6178      	str	r0, [r7, #20]
        break;
 8003a80:	e008      	b.n	8003a94 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a86:	617b      	str	r3, [r7, #20]
        break;
 8003a88:	e004      	b.n	8003a94 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	76bb      	strb	r3, [r7, #26]
        break;
 8003a92:	bf00      	nop
    }

    if (pclk != 0U)
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d018      	beq.n	8003acc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	085a      	lsrs	r2, r3, #1
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	441a      	add	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	2b0f      	cmp	r3, #15
 8003ab4:	d908      	bls.n	8003ac8 <UART_SetConfig+0x4f4>
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003abc:	d204      	bcs.n	8003ac8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	60da      	str	r2, [r3, #12]
 8003ac6:	e001      	b.n	8003acc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003ad8:	7ebb      	ldrb	r3, [r7, #26]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3720      	adds	r7, #32
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003ae4:	00f42400 	.word	0x00f42400

08003ae8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	f003 0310 	and.w	r3, r3, #16
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	f003 0320 	and.w	r3, r3, #32
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d01a      	beq.n	8003bfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003be6:	d10a      	bne.n	8003bfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	605a      	str	r2, [r3, #4]
  }
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003c3a:	f7fd fa55 	bl	80010e8 <HAL_GetTick>
 8003c3e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d10e      	bne.n	8003c6c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f82a 	bl	8003cb6 <UART_WaitOnFlagUntilTimeout>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e020      	b.n	8003cae <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d10e      	bne.n	8003c98 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f814 	bl	8003cb6 <UART_WaitOnFlagUntilTimeout>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e00a      	b.n	8003cae <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b084      	sub	sp, #16
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	60f8      	str	r0, [r7, #12]
 8003cbe:	60b9      	str	r1, [r7, #8]
 8003cc0:	603b      	str	r3, [r7, #0]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cc6:	e05d      	b.n	8003d84 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cce:	d059      	beq.n	8003d84 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd0:	f7fd fa0a 	bl	80010e8 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d302      	bcc.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d11b      	bne.n	8003d1e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cf4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0201 	bic.w	r2, r2, #1
 8003d04:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e042      	b.n	8003da4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d02b      	beq.n	8003d84 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d3a:	d123      	bne.n	8003d84 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d54:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0201 	bic.w	r2, r2, #1
 8003d64:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2220      	movs	r2, #32
 8003d76:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e00f      	b.n	8003da4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	69da      	ldr	r2, [r3, #28]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	bf0c      	ite	eq
 8003d94:	2301      	moveq	r3, #1
 8003d96:	2300      	movne	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d092      	beq.n	8003cc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003dc2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0201 	bic.w	r2, r2, #1
 8003dd2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f7ff fbd8 	bl	80035c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e10:	bf00      	nop
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e2e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff fbb5 	bl	80035ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e58:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e5e:	2b22      	cmp	r3, #34	; 0x22
 8003e60:	d13a      	bne.n	8003ed8 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003e68:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003e6a:	89bb      	ldrh	r3, [r7, #12]
 8003e6c:	b2d9      	uxtb	r1, r3
 8003e6e:	89fb      	ldrh	r3, [r7, #14]
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e76:	400a      	ands	r2, r1
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d123      	bne.n	8003eec <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003eb2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0201 	bic.w	r2, r2, #1
 8003ec2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7fd f837 	bl	8000f44 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ed6:	e009      	b.n	8003eec <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	8b1b      	ldrh	r3, [r3, #24]
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0208 	orr.w	r2, r2, #8
 8003ee8:	b292      	uxth	r2, r2
 8003eea:	831a      	strh	r2, [r3, #24]
}
 8003eec:	bf00      	nop
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f02:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f08:	2b22      	cmp	r3, #34	; 0x22
 8003f0a:	d13a      	bne.n	8003f82 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f12:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f18:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003f1a:	89ba      	ldrh	r2, [r7, #12]
 8003f1c:	89fb      	ldrh	r3, [r7, #14]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2a:	1c9a      	adds	r2, r3, #2
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d123      	bne.n	8003f96 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f5c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0201 	bic.w	r2, r2, #1
 8003f6c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2220      	movs	r2, #32
 8003f72:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fc ffe2 	bl	8000f44 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f80:	e009      	b.n	8003f96 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	8b1b      	ldrh	r3, [r3, #24]
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0208 	orr.w	r2, r2, #8
 8003f92:	b292      	uxth	r2, r2
 8003f94:	831a      	strh	r2, [r3, #24]
}
 8003f96:	bf00      	nop
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <__libc_init_array>:
 8003fb4:	b570      	push	{r4, r5, r6, lr}
 8003fb6:	4e0d      	ldr	r6, [pc, #52]	; (8003fec <__libc_init_array+0x38>)
 8003fb8:	4c0d      	ldr	r4, [pc, #52]	; (8003ff0 <__libc_init_array+0x3c>)
 8003fba:	1ba4      	subs	r4, r4, r6
 8003fbc:	10a4      	asrs	r4, r4, #2
 8003fbe:	2500      	movs	r5, #0
 8003fc0:	42a5      	cmp	r5, r4
 8003fc2:	d109      	bne.n	8003fd8 <__libc_init_array+0x24>
 8003fc4:	4e0b      	ldr	r6, [pc, #44]	; (8003ff4 <__libc_init_array+0x40>)
 8003fc6:	4c0c      	ldr	r4, [pc, #48]	; (8003ff8 <__libc_init_array+0x44>)
 8003fc8:	f000 f820 	bl	800400c <_init>
 8003fcc:	1ba4      	subs	r4, r4, r6
 8003fce:	10a4      	asrs	r4, r4, #2
 8003fd0:	2500      	movs	r5, #0
 8003fd2:	42a5      	cmp	r5, r4
 8003fd4:	d105      	bne.n	8003fe2 <__libc_init_array+0x2e>
 8003fd6:	bd70      	pop	{r4, r5, r6, pc}
 8003fd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fdc:	4798      	blx	r3
 8003fde:	3501      	adds	r5, #1
 8003fe0:	e7ee      	b.n	8003fc0 <__libc_init_array+0xc>
 8003fe2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fe6:	4798      	blx	r3
 8003fe8:	3501      	adds	r5, #1
 8003fea:	e7f2      	b.n	8003fd2 <__libc_init_array+0x1e>
 8003fec:	08004184 	.word	0x08004184
 8003ff0:	08004184 	.word	0x08004184
 8003ff4:	08004184 	.word	0x08004184
 8003ff8:	08004188 	.word	0x08004188

08003ffc <memset>:
 8003ffc:	4402      	add	r2, r0
 8003ffe:	4603      	mov	r3, r0
 8004000:	4293      	cmp	r3, r2
 8004002:	d100      	bne.n	8004006 <memset+0xa>
 8004004:	4770      	bx	lr
 8004006:	f803 1b01 	strb.w	r1, [r3], #1
 800400a:	e7f9      	b.n	8004000 <memset+0x4>

0800400c <_init>:
 800400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400e:	bf00      	nop
 8004010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004012:	bc08      	pop	{r3}
 8004014:	469e      	mov	lr, r3
 8004016:	4770      	bx	lr

08004018 <_fini>:
 8004018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401a:	bf00      	nop
 800401c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800401e:	bc08      	pop	{r3}
 8004020:	469e      	mov	lr, r3
 8004022:	4770      	bx	lr
