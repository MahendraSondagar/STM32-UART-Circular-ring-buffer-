
STM32_Ringbuffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000411c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  080042a4  080042a4  000142a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004538  08004538  00020044  2**0
                  CONTENTS
  4 .ARM          00000008  08004538  08004538  00014538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004540  08004540  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004540  08004540  00014540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004544  08004544  00014544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08004548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  20000044  0800458c  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00001804  20000584  0800458c  00020584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dbc8  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d55  00000000  00000000  0002dc3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a58  00000000  00000000  0002f998  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000970  00000000  00000000  000303f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026601  00000000  00000000  00030d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008f4f  00000000  00000000  00057361  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e995a  00000000  00000000  000602b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00149c0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f8  00000000  00000000  00149c88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000044 	.word	0x20000044
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800428c 	.word	0x0800428c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000048 	.word	0x20000048
 80001c4:	0800428c 	.word	0x0800428c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <milis>:
{
	HAL_Delay(x);
}

static __inline uint32_t milis(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	HAL_GetTick();
 80004dc:	f000 ff44 	bl	8001368 <HAL_GetTick>
}
 80004e0:	bf00      	nop
 80004e2:	4618      	mov	r0, r3
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <PrintHelp>:
/* USER CODE BEGIN 0 */
 char rx2_temp[1]={0};
 char rx1_temp[1]={0};

 void PrintHelp(void)
 {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	 Serial.PrintString(HELP_MENU, DEBUG_PORT);
 80004ec:	4b03      	ldr	r3, [pc, #12]	; (80004fc <PrintHelp+0x14>)
 80004ee:	69db      	ldr	r3, [r3, #28]
 80004f0:	2102      	movs	r1, #2
 80004f2:	4803      	ldr	r0, [pc, #12]	; (8000500 <PrintHelp+0x18>)
 80004f4:	4798      	blx	r3
 }
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000004 	.word	0x20000004
 8000500:	080042a4 	.word	0x080042a4

08000504 <PrintString>:
 void PrintString(void)
 {
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	 Serial.PrintString("Hello world\r\n", DEBUG_PORT);
 8000508:	4b03      	ldr	r3, [pc, #12]	; (8000518 <PrintString+0x14>)
 800050a:	69db      	ldr	r3, [r3, #28]
 800050c:	2102      	movs	r1, #2
 800050e:	4803      	ldr	r0, [pc, #12]	; (800051c <PrintString+0x18>)
 8000510:	4798      	blx	r3
 }
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000004 	.word	0x20000004
 800051c:	080043a4 	.word	0x080043a4

08000520 <PrintIntInBase>:

 void PrintIntInBase(void)
 {
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
   Serial.PrintIntegerInBase(12, 2, DEBUG_PORT);
 8000524:	4b03      	ldr	r3, [pc, #12]	; (8000534 <PrintIntInBase+0x14>)
 8000526:	6a1b      	ldr	r3, [r3, #32]
 8000528:	2202      	movs	r2, #2
 800052a:	2102      	movs	r1, #2
 800052c:	200c      	movs	r0, #12
 800052e:	4798      	blx	r3
 }
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000004 	.word	0x20000004

08000538 <PutHex>:

 void PutHex(void)
 {
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  Serial.Puthex(12, DEBUG_PORT);
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <PutHex+0x14>)
 800053e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000540:	2102      	movs	r1, #2
 8000542:	200c      	movs	r0, #12
 8000544:	4798      	blx	r3
 }
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000004 	.word	0x20000004

08000550 <PrintHexLong>:

 void PrintHexLong(void)
 {
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  Serial.PrintHexlong(12536, DEBUG_PORT);
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <PrintHexLong+0x14>)
 8000556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000558:	2102      	movs	r1, #2
 800055a:	f243 00f8 	movw	r0, #12536	; 0x30f8
 800055e:	4798      	blx	r3
 }
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000004 	.word	0x20000004

08000568 <PrintOctal>:

 void PrintOctal(void)
 {
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  Serial.PrintOctal(15, DEBUG_PORT);
 800056c:	4b03      	ldr	r3, [pc, #12]	; (800057c <PrintOctal+0x14>)
 800056e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000570:	2102      	movs	r1, #2
 8000572:	200f      	movs	r0, #15
 8000574:	4798      	blx	r3
 }
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000004 	.word	0x20000004

08000580 <PrintBinary>:

 void PrintBinary(void)
 {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  Serial.PrintBinary(125, DEBUG_PORT);
 8000584:	4b03      	ldr	r3, [pc, #12]	; (8000594 <PrintBinary+0x14>)
 8000586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000588:	2102      	movs	r1, #2
 800058a:	207d      	movs	r0, #125	; 0x7d
 800058c:	4798      	blx	r3
 }
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000004 	.word	0x20000004

08000598 <PrintEcho>:

 void PrintEcho(void)
 {
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
  unsigned long previous = milis();
 800059e:	f7ff ff9b 	bl	80004d8 <milis>
 80005a2:	6078      	str	r0, [r7, #4]
  while(milis()-previous<10000)
 80005a4:	e01b      	b.n	80005de <PrintEcho+0x46>
  {
	  if(Serial.Available(DEBUG_PORT)>0)
 80005a6:	4b17      	ldr	r3, [pc, #92]	; (8000604 <PrintEcho+0x6c>)
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	2002      	movs	r0, #2
 80005ac:	4798      	blx	r3
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dd0b      	ble.n	80005cc <PrintEcho+0x34>
	  {
		  char var = Serial.Read(DEBUG_PORT);
 80005b4:	4b13      	ldr	r3, [pc, #76]	; (8000604 <PrintEcho+0x6c>)
 80005b6:	691b      	ldr	r3, [r3, #16]
 80005b8:	2002      	movs	r0, #2
 80005ba:	4798      	blx	r3
 80005bc:	4603      	mov	r3, r0
 80005be:	70fb      	strb	r3, [r7, #3]
		  Serial.Write(var, DEBUG_PORT);
 80005c0:	4b10      	ldr	r3, [pc, #64]	; (8000604 <PrintEcho+0x6c>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	78fa      	ldrb	r2, [r7, #3]
 80005c6:	2102      	movs	r1, #2
 80005c8:	4610      	mov	r0, r2
 80005ca:	4798      	blx	r3
	  }
	  /* to avoid overflow */
	  if(milis()<previous) previous= milis();
 80005cc:	f7ff ff84 	bl	80004d8 <milis>
 80005d0:	4602      	mov	r2, r0
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d902      	bls.n	80005de <PrintEcho+0x46>
 80005d8:	f7ff ff7e 	bl	80004d8 <milis>
 80005dc:	6078      	str	r0, [r7, #4]
  while(milis()-previous<10000)
 80005de:	f7ff ff7b 	bl	80004d8 <milis>
 80005e2:	4602      	mov	r2, r0
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	f242 720f 	movw	r2, #9999	; 0x270f
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d9da      	bls.n	80005a6 <PrintEcho+0xe>
  }
  Serial.PrintString("timeout!\r\n", DEBUG_PORT);
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <PrintEcho+0x6c>)
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	2102      	movs	r1, #2
 80005f6:	4804      	ldr	r0, [pc, #16]	; (8000608 <PrintEcho+0x70>)
 80005f8:	4798      	blx	r3
 }
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000004 	.word	0x20000004
 8000608:	080043b4 	.word	0x080043b4

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b5b0      	push	{r4, r5, r7, lr}
 800060e:	b08a      	sub	sp, #40	; 0x28
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  Menue_t Menue ={PrintHelp,PrintString, PrintIntInBase,PutHex,PrintHexLong,PrintOctal,PrintBinary,PrintEcho, PrintEchoCR_LF};
 8000612:	4b63      	ldr	r3, [pc, #396]	; (80007a0 <main+0x194>)
 8000614:	1d3c      	adds	r4, r7, #4
 8000616:	461d      	mov	r5, r3
 8000618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000620:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 fe38 	bl	8001298 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f8c2 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 f93a 	bl	80008a4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Serial.begin(115200, DEBUG_PORT);
 8000630:	4b5c      	ldr	r3, [pc, #368]	; (80007a4 <main+0x198>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2102      	movs	r1, #2
 8000636:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800063a:	4798      	blx	r3
  Serial.PrintString(WELCOME_MSG,DEBUG_PORT);
 800063c:	4b59      	ldr	r3, [pc, #356]	; (80007a4 <main+0x198>)
 800063e:	69db      	ldr	r3, [r3, #28]
 8000640:	2102      	movs	r1, #2
 8000642:	4859      	ldr	r0, [pc, #356]	; (80007a8 <main+0x19c>)
 8000644:	4798      	blx	r3
  Serial.PrintString(HELP_MENU, DEBUG_PORT);
 8000646:	4b57      	ldr	r3, [pc, #348]	; (80007a4 <main+0x198>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	2102      	movs	r1, #2
 800064c:	4857      	ldr	r0, [pc, #348]	; (80007ac <main+0x1a0>)
 800064e:	4798      	blx	r3
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(Serial.Available(DEBUG_PORT)>0)
 8000650:	4b54      	ldr	r3, [pc, #336]	; (80007a4 <main+0x198>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	2002      	movs	r0, #2
 8000656:	4798      	blx	r3
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	f340 809b 	ble.w	8000796 <main+0x18a>
		{
			char cmd = Serial.Read(DEBUG_PORT);
 8000660:	4b50      	ldr	r3, [pc, #320]	; (80007a4 <main+0x198>)
 8000662:	691b      	ldr	r3, [r3, #16]
 8000664:	2002      	movs	r0, #2
 8000666:	4798      	blx	r3
 8000668:	4603      	mov	r3, r0
 800066a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			switch (cmd)
 800066e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000672:	3b31      	subs	r3, #49	; 0x31
 8000674:	2b37      	cmp	r3, #55	; 0x37
 8000676:	f200 8090 	bhi.w	800079a <main+0x18e>
 800067a:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <main+0x74>)
 800067c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000680:	08000767 	.word	0x08000767
 8000684:	0800076d 	.word	0x0800076d
 8000688:	08000773 	.word	0x08000773
 800068c:	08000779 	.word	0x08000779
 8000690:	0800077f 	.word	0x0800077f
 8000694:	08000785 	.word	0x08000785
 8000698:	0800078b 	.word	0x0800078b
 800069c:	08000791 	.word	0x08000791
 80006a0:	0800079b 	.word	0x0800079b
 80006a4:	0800079b 	.word	0x0800079b
 80006a8:	0800079b 	.word	0x0800079b
 80006ac:	0800079b 	.word	0x0800079b
 80006b0:	0800079b 	.word	0x0800079b
 80006b4:	0800079b 	.word	0x0800079b
 80006b8:	0800079b 	.word	0x0800079b
 80006bc:	0800079b 	.word	0x0800079b
 80006c0:	0800079b 	.word	0x0800079b
 80006c4:	0800079b 	.word	0x0800079b
 80006c8:	0800079b 	.word	0x0800079b
 80006cc:	0800079b 	.word	0x0800079b
 80006d0:	0800079b 	.word	0x0800079b
 80006d4:	0800079b 	.word	0x0800079b
 80006d8:	0800079b 	.word	0x0800079b
 80006dc:	0800079b 	.word	0x0800079b
 80006e0:	0800079b 	.word	0x0800079b
 80006e4:	0800079b 	.word	0x0800079b
 80006e8:	0800079b 	.word	0x0800079b
 80006ec:	0800079b 	.word	0x0800079b
 80006f0:	0800079b 	.word	0x0800079b
 80006f4:	0800079b 	.word	0x0800079b
 80006f8:	0800079b 	.word	0x0800079b
 80006fc:	0800079b 	.word	0x0800079b
 8000700:	0800079b 	.word	0x0800079b
 8000704:	0800079b 	.word	0x0800079b
 8000708:	0800079b 	.word	0x0800079b
 800070c:	0800079b 	.word	0x0800079b
 8000710:	0800079b 	.word	0x0800079b
 8000714:	0800079b 	.word	0x0800079b
 8000718:	0800079b 	.word	0x0800079b
 800071c:	0800079b 	.word	0x0800079b
 8000720:	0800079b 	.word	0x0800079b
 8000724:	0800079b 	.word	0x0800079b
 8000728:	0800079b 	.word	0x0800079b
 800072c:	0800079b 	.word	0x0800079b
 8000730:	0800079b 	.word	0x0800079b
 8000734:	0800079b 	.word	0x0800079b
 8000738:	0800079b 	.word	0x0800079b
 800073c:	0800079b 	.word	0x0800079b
 8000740:	0800079b 	.word	0x0800079b
 8000744:	0800079b 	.word	0x0800079b
 8000748:	0800079b 	.word	0x0800079b
 800074c:	0800079b 	.word	0x0800079b
 8000750:	0800079b 	.word	0x0800079b
 8000754:	0800079b 	.word	0x0800079b
 8000758:	0800079b 	.word	0x0800079b
 800075c:	08000761 	.word	0x08000761
			{
			case 'h':
							(Menue[0]());
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4798      	blx	r3
							break;
 8000764:	e01a      	b.n	800079c <main+0x190>

			case '1':
							(Menue[1]());
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	4798      	blx	r3
							break;
 800076a:	e017      	b.n	800079c <main+0x190>
			case '2':
							(Menue[2]());
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	4798      	blx	r3
							break;
 8000770:	e014      	b.n	800079c <main+0x190>
			case '3':
							(Menue[3]());
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	4798      	blx	r3
							break;
 8000776:	e011      	b.n	800079c <main+0x190>
			case '4':
							(Menue[4]());
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	4798      	blx	r3
							break;
 800077c:	e00e      	b.n	800079c <main+0x190>
			case '5':
							(Menue[5]());
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	4798      	blx	r3
							break;
 8000782:	e00b      	b.n	800079c <main+0x190>
			case '6':
							(Menue[6]());
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	4798      	blx	r3
							break;
 8000788:	e008      	b.n	800079c <main+0x190>
			case '7':
							(Menue[7]());
 800078a:	6a3b      	ldr	r3, [r7, #32]
 800078c:	4798      	blx	r3
							break;
 800078e:	e005      	b.n	800079c <main+0x190>

			case '8':
							(Menue[8]());
 8000790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000792:	4798      	blx	r3
							break;
 8000794:	e002      	b.n	800079c <main+0x190>
			default :
				break;

			}
		}
 8000796:	bf00      	nop
 8000798:	e75a      	b.n	8000650 <main+0x44>
				break;
 800079a:	bf00      	nop
		if(Serial.Available(DEBUG_PORT)>0)
 800079c:	e758      	b.n	8000650 <main+0x44>
 800079e:	bf00      	nop
 80007a0:	080044d0 	.word	0x080044d0
 80007a4:	20000004 	.word	0x20000004
 80007a8:	080043c0 	.word	0x080043c0
 80007ac:	080042a4 	.word	0x080042a4

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b0b8      	sub	sp, #224	; 0xe0
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007ba:	2244      	movs	r2, #68	; 0x44
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f003 fd5c 	bl	800427c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d4:	463b      	mov	r3, r7
 80007d6:	2288      	movs	r2, #136	; 0x88
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f003 fd4e 	bl	800427c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007e0:	2310      	movs	r3, #16
 80007e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007e6:	2301      	movs	r3, #1
 80007e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007f2:	2360      	movs	r3, #96	; 0x60
 80007f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f8:	2302      	movs	r3, #2
 80007fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007fe:	2301      	movs	r3, #1
 8000800:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800080a:	2328      	movs	r3, #40	; 0x28
 800080c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000810:	2307      	movs	r3, #7
 8000812:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000816:	2302      	movs	r3, #2
 8000818:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800081c:	2302      	movs	r3, #2
 800081e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000822:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000826:	4618      	mov	r0, r3
 8000828:	f001 fa66 	bl	8001cf8 <HAL_RCC_OscConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000832:	f000 f8a5 	bl	8000980 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000836:	230f      	movs	r3, #15
 8000838:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083c:	2303      	movs	r3, #3
 800083e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000854:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000858:	2104      	movs	r1, #4
 800085a:	4618      	mov	r0, r3
 800085c:	f001 fe32 	bl	80024c4 <HAL_RCC_ClockConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000866:	f000 f88b 	bl	8000980 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800086a:	2303      	movs	r3, #3
 800086c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800086e:	2300      	movs	r3, #0
 8000870:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000872:	2300      	movs	r3, #0
 8000874:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000876:	463b      	mov	r3, r7
 8000878:	4618      	mov	r0, r3
 800087a:	f002 f827 	bl	80028cc <HAL_RCCEx_PeriphCLKConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000884:	f000 f87c 	bl	8000980 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000888:	f44f 7000 	mov.w	r0, #512	; 0x200
 800088c:	f001 f9de 	bl	8001c4c <HAL_PWREx_ControlVoltageScaling>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000896:	f000 f873 	bl	8000980 <Error_Handler>
  }
}
 800089a:	bf00      	nop
 800089c:	37e0      	adds	r7, #224	; 0xe0
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <MX_GPIO_Init+0xd0>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	4a2d      	ldr	r2, [pc, #180]	; (8000974 <MX_GPIO_Init+0xd0>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c6:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <MX_GPIO_Init+0xd0>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008d2:	4b28      	ldr	r3, [pc, #160]	; (8000974 <MX_GPIO_Init+0xd0>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	4a27      	ldr	r2, [pc, #156]	; (8000974 <MX_GPIO_Init+0xd0>)
 80008d8:	f043 0310 	orr.w	r3, r3, #16
 80008dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <MX_GPIO_Init+0xd0>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	f003 0310 	and.w	r3, r3, #16
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b22      	ldr	r3, [pc, #136]	; (8000974 <MX_GPIO_Init+0xd0>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	4a21      	ldr	r2, [pc, #132]	; (8000974 <MX_GPIO_Init+0xd0>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_GPIO_Init+0xd0>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <MX_GPIO_Init+0xd0>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	4a1b      	ldr	r2, [pc, #108]	; (8000974 <MX_GPIO_Init+0xd0>)
 8000908:	f043 0308 	orr.w	r3, r3, #8
 800090c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <MX_GPIO_Init+0xd0>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	f003 0308 	and.w	r3, r3, #8
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	2104      	movs	r1, #4
 800091e:	4816      	ldr	r0, [pc, #88]	; (8000978 <MX_GPIO_Init+0xd4>)
 8000920:	f001 f96e 	bl	8001c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	f44f 7180 	mov.w	r1, #256	; 0x100
 800092a:	4814      	ldr	r0, [pc, #80]	; (800097c <MX_GPIO_Init+0xd8>)
 800092c:	f001 f968 	bl	8001c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000930:	2304      	movs	r3, #4
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093c:	2302      	movs	r3, #2
 800093e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4619      	mov	r1, r3
 8000946:	480c      	ldr	r0, [pc, #48]	; (8000978 <MX_GPIO_Init+0xd4>)
 8000948:	f000 febe 	bl	80016c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800094c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095a:	2302      	movs	r3, #2
 800095c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_GPIO_Init+0xd8>)
 8000966:	f000 feaf 	bl	80016c8 <HAL_GPIO_Init>

}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	; 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000
 8000978:	48000400 	.word	0x48000400
 800097c:	48001000 	.word	0x48001000

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000986:	e7fe      	b.n	8000986 <Error_Handler+0x6>

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <HAL_MspInit+0x44>)
 8000990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000992:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <HAL_MspInit+0x44>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6613      	str	r3, [r2, #96]	; 0x60
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <HAL_MspInit+0x44>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_MspInit+0x44>)
 80009a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <HAL_MspInit+0x44>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b0:	6593      	str	r3, [r2, #88]	; 0x58
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_MspInit+0x44>)
 80009b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08c      	sub	sp, #48	; 0x30
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a37      	ldr	r2, [pc, #220]	; (8000acc <HAL_UART_MspInit+0xfc>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d132      	bne.n	8000a58 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009f2:	4b37      	ldr	r3, [pc, #220]	; (8000ad0 <HAL_UART_MspInit+0x100>)
 80009f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f6:	4a36      	ldr	r2, [pc, #216]	; (8000ad0 <HAL_UART_MspInit+0x100>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6613      	str	r3, [r2, #96]	; 0x60
 80009fe:	4b34      	ldr	r3, [pc, #208]	; (8000ad0 <HAL_UART_MspInit+0x100>)
 8000a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a06:	61bb      	str	r3, [r7, #24]
 8000a08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	4b31      	ldr	r3, [pc, #196]	; (8000ad0 <HAL_UART_MspInit+0x100>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4a30      	ldr	r2, [pc, #192]	; (8000ad0 <HAL_UART_MspInit+0x100>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4b2e      	ldr	r3, [pc, #184]	; (8000ad0 <HAL_UART_MspInit+0x100>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a34:	2307      	movs	r3, #7
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a42:	f000 fe41 	bl	80016c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2101      	movs	r1, #1
 8000a4a:	2025      	movs	r0, #37	; 0x25
 8000a4c:	f000 fdb7 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a50:	2025      	movs	r0, #37	; 0x25
 8000a52:	f000 fdd0 	bl	80015f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a56:	e034      	b.n	8000ac2 <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART2)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a1d      	ldr	r2, [pc, #116]	; (8000ad4 <HAL_UART_MspInit+0x104>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d12f      	bne.n	8000ac2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a62:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <HAL_UART_MspInit+0x100>)
 8000a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a66:	4a1a      	ldr	r2, [pc, #104]	; (8000ad0 <HAL_UART_MspInit+0x100>)
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <HAL_UART_MspInit+0x100>)
 8000a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_UART_MspInit+0x100>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <HAL_UART_MspInit+0x100>)
 8000a80:	f043 0308 	orr.w	r3, r3, #8
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_UART_MspInit+0x100>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0308 	and.w	r3, r3, #8
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000a92:	2360      	movs	r3, #96	; 0x60
 8000a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aa2:	2307      	movs	r3, #7
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	480a      	ldr	r0, [pc, #40]	; (8000ad8 <HAL_UART_MspInit+0x108>)
 8000aae:	f000 fe0b 	bl	80016c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2026      	movs	r0, #38	; 0x26
 8000ab8:	f000 fd81 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000abc:	2026      	movs	r0, #38	; 0x26
 8000abe:	f000 fd9a 	bl	80015f6 <HAL_NVIC_EnableIRQ>
}
 8000ac2:	bf00      	nop
 8000ac4:	3730      	adds	r7, #48	; 0x30
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40013800 	.word	0x40013800
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40004400 	.word	0x40004400
 8000ad8:	48000c00 	.word	0x48000c00

08000adc <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <HAL_UART_MspDeInit+0x60>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d10f      	bne.n	8000b0e <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000aee:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <HAL_UART_MspDeInit+0x64>)
 8000af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af2:	4a13      	ldr	r2, [pc, #76]	; (8000b40 <HAL_UART_MspDeInit+0x64>)
 8000af4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000af8:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8000afa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b02:	f000 ff89 	bl	8001a18 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000b06:	2025      	movs	r0, #37	; 0x25
 8000b08:	f000 fd83 	bl	8001612 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8000b0c:	e011      	b.n	8000b32 <HAL_UART_MspDeInit+0x56>
  else if(huart->Instance==USART2)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a0c      	ldr	r2, [pc, #48]	; (8000b44 <HAL_UART_MspDeInit+0x68>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d10c      	bne.n	8000b32 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_UART_MspDeInit+0x64>)
 8000b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1c:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <HAL_UART_MspDeInit+0x64>)
 8000b1e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b22:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_5|GPIO_PIN_6);
 8000b24:	2160      	movs	r1, #96	; 0x60
 8000b26:	4808      	ldr	r0, [pc, #32]	; (8000b48 <HAL_UART_MspDeInit+0x6c>)
 8000b28:	f000 ff76 	bl	8001a18 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8000b2c:	2026      	movs	r0, #38	; 0x26
 8000b2e:	f000 fd70 	bl	8001612 <HAL_NVIC_DisableIRQ>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40013800 	.word	0x40013800
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40004400 	.word	0x40004400
 8000b48:	48000c00 	.word	0x48000c00

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <NMI_Handler+0x4>

08000b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <MemManage_Handler+0x4>

08000b5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b98:	f000 fbd2 	bl	8001340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <USART1_IRQHandler+0x10>)
 8000ba6:	f002 fcf9 	bl	800359c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000078 	.word	0x20000078

08000bb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <USART2_IRQHandler+0x10>)
 8000bba:	f002 fcef 	bl	800359c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200000fc 	.word	0x200000fc

08000bc8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bcc:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <SystemInit+0x64>)
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd2:	4a16      	ldr	r2, [pc, #88]	; (8000c2c <SystemInit+0x64>)
 8000bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <SystemInit+0x68>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a13      	ldr	r2, [pc, #76]	; (8000c30 <SystemInit+0x68>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <SystemInit+0x68>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <SystemInit+0x68>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a0f      	ldr	r2, [pc, #60]	; (8000c30 <SystemInit+0x68>)
 8000bf4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000bf8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000bfc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <SystemInit+0x68>)
 8000c00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c04:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <SystemInit+0x68>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a09      	ldr	r2, [pc, #36]	; (8000c30 <SystemInit+0x68>)
 8000c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c12:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <SystemInit+0x68>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <SystemInit+0x64>)
 8000c1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c1e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00
 8000c30:	40021000 	.word	0x40021000

08000c34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c38:	f7ff ffc6 	bl	8000bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c3e:	e003      	b.n	8000c48 <LoopCopyDataInit>

08000c40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c46:	3104      	adds	r1, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c48:	480a      	ldr	r0, [pc, #40]	; (8000c74 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c50:	d3f6      	bcc.n	8000c40 <CopyDataInit>
	ldr	r2, =_sbss
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c54:	e002      	b.n	8000c5c <LoopFillZerobss>

08000c56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c56:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c58:	f842 3b04 	str.w	r3, [r2], #4

08000c5c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <LoopForever+0x16>)
	cmp	r2, r3
 8000c5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c60:	d3f9      	bcc.n	8000c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c62:	f003 fae7 	bl	8004234 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c66:	f7ff fcd1 	bl	800060c <main>

08000c6a <LoopForever>:

LoopForever:
    b LoopForever
 8000c6a:	e7fe      	b.n	8000c6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c6c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000c70:	08004548 	.word	0x08004548
	ldr	r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c78:	20000044 	.word	0x20000044
	ldr	r2, =_sbss
 8000c7c:	20000044 	.word	0x20000044
	ldr	r3, = _ebss
 8000c80:	20000584 	.word	0x20000584

08000c84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC1_2_IRQHandler>

08000c86 <delay>:
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
	HAL_Delay(x);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 fb75 	bl	8001380 <HAL_Delay>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <Serialbegin>:
};


// connects the internal peripheral in the processor and configures it
void Serialbegin(long baud, uint8_t portNum)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	70fb      	strb	r3, [r7, #3]

	// defaults to 8-bit, no parity, 1 stop bit

	switch(portNum)
 8000cac:	78fb      	ldrb	r3, [r7, #3]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d002      	beq.n	8000cb8 <Serialbegin+0x18>
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d031      	beq.n	8000d1a <Serialbegin+0x7a>

		break;

	default :

		break;
 8000cb6:	e061      	b.n	8000d7c <Serialbegin+0xdc>
		  huart1.Instance = USART1;
 8000cb8:	4b32      	ldr	r3, [pc, #200]	; (8000d84 <Serialbegin+0xe4>)
 8000cba:	4a33      	ldr	r2, [pc, #204]	; (8000d88 <Serialbegin+0xe8>)
 8000cbc:	601a      	str	r2, [r3, #0]
		  huart1.Init.BaudRate = 115200;
 8000cbe:	4b31      	ldr	r3, [pc, #196]	; (8000d84 <Serialbegin+0xe4>)
 8000cc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cc4:	605a      	str	r2, [r3, #4]
		  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc6:	4b2f      	ldr	r3, [pc, #188]	; (8000d84 <Serialbegin+0xe4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
		  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ccc:	4b2d      	ldr	r3, [pc, #180]	; (8000d84 <Serialbegin+0xe4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
		  huart1.Init.Parity = UART_PARITY_NONE;
 8000cd2:	4b2c      	ldr	r3, [pc, #176]	; (8000d84 <Serialbegin+0xe4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
		  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cd8:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <Serialbegin+0xe4>)
 8000cda:	220c      	movs	r2, #12
 8000cdc:	615a      	str	r2, [r3, #20]
		  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cde:	4b29      	ldr	r3, [pc, #164]	; (8000d84 <Serialbegin+0xe4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
		  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce4:	4b27      	ldr	r3, [pc, #156]	; (8000d84 <Serialbegin+0xe4>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
		  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cea:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <Serialbegin+0xe4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
		  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf0:	4b24      	ldr	r3, [pc, #144]	; (8000d84 <Serialbegin+0xe4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	625a      	str	r2, [r3, #36]	; 0x24
		  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cf6:	4823      	ldr	r0, [pc, #140]	; (8000d84 <Serialbegin+0xe4>)
 8000cf8:	f002 fa98 	bl	800322c <HAL_UART_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <Serialbegin+0x66>
		    Error_Handler();
 8000d02:	f7ff fe3d 	bl	8000980 <Error_Handler>
		  delay(500);
 8000d06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d0a:	f7ff ffbc 	bl	8000c86 <delay>
		  HAL_UART_Receive_IT(&huart1, (uint8_t *)rx1_temp, 1);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	491e      	ldr	r1, [pc, #120]	; (8000d8c <Serialbegin+0xec>)
 8000d12:	481c      	ldr	r0, [pc, #112]	; (8000d84 <Serialbegin+0xe4>)
 8000d14:	f002 fba0 	bl	8003458 <HAL_UART_Receive_IT>
		break;
 8000d18:	e030      	b.n	8000d7c <Serialbegin+0xdc>
		  huart2.Instance = USART2;
 8000d1a:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <Serialbegin+0xf0>)
 8000d1c:	4a1d      	ldr	r2, [pc, #116]	; (8000d94 <Serialbegin+0xf4>)
 8000d1e:	601a      	str	r2, [r3, #0]
		  huart2.Init.BaudRate = 115200;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <Serialbegin+0xf0>)
 8000d22:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d26:	605a      	str	r2, [r3, #4]
		  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d28:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <Serialbegin+0xf0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
		  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <Serialbegin+0xf0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
		  huart2.Init.Parity = UART_PARITY_NONE;
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <Serialbegin+0xf0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
		  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <Serialbegin+0xf0>)
 8000d3c:	220c      	movs	r2, #12
 8000d3e:	615a      	str	r2, [r3, #20]
		  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <Serialbegin+0xf0>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
		  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <Serialbegin+0xf0>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	61da      	str	r2, [r3, #28]
		  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d4c:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <Serialbegin+0xf0>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	621a      	str	r2, [r3, #32]
		  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <Serialbegin+0xf0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	625a      	str	r2, [r3, #36]	; 0x24
		  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d58:	480d      	ldr	r0, [pc, #52]	; (8000d90 <Serialbegin+0xf0>)
 8000d5a:	f002 fa67 	bl	800322c <HAL_UART_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <Serialbegin+0xc8>
		    Error_Handler();
 8000d64:	f7ff fe0c 	bl	8000980 <Error_Handler>
		  delay(500);
 8000d68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d6c:	f7ff ff8b 	bl	8000c86 <delay>
		  HAL_UART_Receive_IT(&huart2, (uint8_t *)rx2_temp, 1);
 8000d70:	2201      	movs	r2, #1
 8000d72:	4909      	ldr	r1, [pc, #36]	; (8000d98 <Serialbegin+0xf8>)
 8000d74:	4806      	ldr	r0, [pc, #24]	; (8000d90 <Serialbegin+0xf0>)
 8000d76:	f002 fb6f 	bl	8003458 <HAL_UART_Receive_IT>
		break;
 8000d7a:	bf00      	nop
	}

}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000078 	.word	0x20000078
 8000d88:	40013800 	.word	0x40013800
 8000d8c:	20000064 	.word	0x20000064
 8000d90:	200000fc 	.word	0x200000fc
 8000d94:	40004400 	.word	0x40004400
 8000d98:	20000060 	.word	0x20000060

08000d9c <Serialclose>:


// disconnects the internal peripheral in the processor
void Serialclose(uint8_t portNum)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  switch(portNum)
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d002      	beq.n	8000db2 <Serialclose+0x16>
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d004      	beq.n	8000dba <Serialclose+0x1e>
	  break;
  case 2:
	  HAL_UART_DeInit(&huart2);
	  break;
  default:
	  break;
 8000db0:	e007      	b.n	8000dc2 <Serialclose+0x26>
	  HAL_UART_DeInit(&huart1);
 8000db2:	4806      	ldr	r0, [pc, #24]	; (8000dcc <Serialclose+0x30>)
 8000db4:	f002 fa88 	bl	80032c8 <HAL_UART_DeInit>
	  break;
 8000db8:	e003      	b.n	8000dc2 <Serialclose+0x26>
	  HAL_UART_DeInit(&huart2);
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <Serialclose+0x34>)
 8000dbc:	f002 fa84 	bl	80032c8 <HAL_UART_DeInit>
	  break;
 8000dc0:	bf00      	nop
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000078 	.word	0x20000078
 8000dd0:	200000fc 	.word	0x200000fc

08000dd4 <SerialWrite>:


void SerialWrite(unsigned char c, uint8_t portNum)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	460a      	mov	r2, r1
 8000dde:	71fb      	strb	r3, [r7, #7]
 8000de0:	4613      	mov	r3, r2
 8000de2:	71bb      	strb	r3, [r7, #6]
	 switch(portNum)
 8000de4:	79bb      	ldrb	r3, [r7, #6]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d002      	beq.n	8000df0 <SerialWrite+0x1c>
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d007      	beq.n	8000dfe <SerialWrite+0x2a>
		 break;
	 case 2:
		 HAL_UART_Transmit(&huart2, &c, 1, SERIAL_DEFAULT_TIMEOUT);
		 break;
	 default :
		 break;
 8000dee:	e00d      	b.n	8000e0c <SerialWrite+0x38>
		 HAL_UART_Transmit(&huart1, &c, 1, SERIAL_DEFAULT_TIMEOUT);
 8000df0:	1df9      	adds	r1, r7, #7
 8000df2:	2364      	movs	r3, #100	; 0x64
 8000df4:	2201      	movs	r2, #1
 8000df6:	4807      	ldr	r0, [pc, #28]	; (8000e14 <SerialWrite+0x40>)
 8000df8:	f002 fa9b 	bl	8003332 <HAL_UART_Transmit>
		 break;
 8000dfc:	e006      	b.n	8000e0c <SerialWrite+0x38>
		 HAL_UART_Transmit(&huart2, &c, 1, SERIAL_DEFAULT_TIMEOUT);
 8000dfe:	1df9      	adds	r1, r7, #7
 8000e00:	2364      	movs	r3, #100	; 0x64
 8000e02:	2201      	movs	r2, #1
 8000e04:	4804      	ldr	r0, [pc, #16]	; (8000e18 <SerialWrite+0x44>)
 8000e06:	f002 fa94 	bl	8003332 <HAL_UART_Transmit>
		 break;
 8000e0a:	bf00      	nop
	 }
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000078 	.word	0x20000078
 8000e18:	200000fc 	.word	0x200000fc

08000e1c <SerialAvailable>:

int SerialAvailable(uint8_t portNum)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
	switch(portNum)
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d003      	beq.n	8000e34 <SerialAvailable+0x18>
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d010      	beq.n	8000e52 <SerialAvailable+0x36>
		break;
	case 2:
		return (RX_BUFFER_SIZE_2 + rx_buffer_head2 - rx_buffer_tail2) % RX_BUFFER_SIZE_2;
		break;
	default:
		break;
 8000e30:	bf00      	nop
	}
}
 8000e32:	e01c      	b.n	8000e6e <SerialAvailable+0x52>
		return (RX_BUFFER_SIZE_1 + rx_buffer_head1 - rx_buffer_tail1) % RX_BUFFER_SIZE_1;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <SerialAvailable+0x60>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8000e3c:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <SerialAvailable+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	425a      	negs	r2, r3
 8000e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e4c:	bf58      	it	pl
 8000e4e:	4253      	negpl	r3, r2
 8000e50:	e00d      	b.n	8000e6e <SerialAvailable+0x52>
		return (RX_BUFFER_SIZE_2 + rx_buffer_head2 - rx_buffer_tail2) % RX_BUFFER_SIZE_2;
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <SerialAvailable+0x68>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <SerialAvailable+0x6c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	425a      	negs	r2, r3
 8000e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e6a:	bf58      	it	pl
 8000e6c:	4253      	negpl	r3, r2
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000068 	.word	0x20000068
 8000e80:	2000006c 	.word	0x2000006c
 8000e84:	20000070 	.word	0x20000070
 8000e88:	20000074 	.word	0x20000074

08000e8c <SerialRead>:

int SerialRead(uint8_t portNum)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
	switch(portNum)
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d003      	beq.n	8000ea4 <SerialRead+0x18>
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d01d      	beq.n	8000edc <SerialRead+0x50>
					rx_buffer_tail2 = (rx_buffer_tail2 + 1) % RX_BUFFER_SIZE_2;
					return c;
				}
		break;
	default:
		break;
 8000ea0:	bf00      	nop
	}
}
 8000ea2:	e036      	b.n	8000f12 <SerialRead+0x86>
		if (rx_buffer_head1 == rx_buffer_tail1) {
 8000ea4:	4b1e      	ldr	r3, [pc, #120]	; (8000f20 <SerialRead+0x94>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <SerialRead+0x98>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d102      	bne.n	8000eb6 <SerialRead+0x2a>
					return -1;
 8000eb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eb4:	e02d      	b.n	8000f12 <SerialRead+0x86>
					unsigned char c = rx_buffer1[rx_buffer_tail1];
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <SerialRead+0x98>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a1b      	ldr	r2, [pc, #108]	; (8000f28 <SerialRead+0x9c>)
 8000ebc:	5cd3      	ldrb	r3, [r2, r3]
 8000ebe:	73bb      	strb	r3, [r7, #14]
					rx_buffer_tail1 = (rx_buffer_tail1 + 1) % RX_BUFFER_SIZE_1;
 8000ec0:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <SerialRead+0x98>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	425a      	negs	r2, r3
 8000ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ecc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ed0:	bf58      	it	pl
 8000ed2:	4253      	negpl	r3, r2
 8000ed4:	4a13      	ldr	r2, [pc, #76]	; (8000f24 <SerialRead+0x98>)
 8000ed6:	6013      	str	r3, [r2, #0]
					return c;
 8000ed8:	7bbb      	ldrb	r3, [r7, #14]
 8000eda:	e01a      	b.n	8000f12 <SerialRead+0x86>
				if (rx_buffer_head2 == rx_buffer_tail2) {
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <SerialRead+0xa0>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <SerialRead+0xa4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d102      	bne.n	8000eee <SerialRead+0x62>
					return -1;
 8000ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eec:	e011      	b.n	8000f12 <SerialRead+0x86>
					unsigned char c = rx_buffer2[rx_buffer_tail2];
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <SerialRead+0xa4>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a10      	ldr	r2, [pc, #64]	; (8000f34 <SerialRead+0xa8>)
 8000ef4:	5cd3      	ldrb	r3, [r2, r3]
 8000ef6:	73fb      	strb	r3, [r7, #15]
					rx_buffer_tail2 = (rx_buffer_tail2 + 1) % RX_BUFFER_SIZE_2;
 8000ef8:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <SerialRead+0xa4>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	425a      	negs	r2, r3
 8000f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f08:	bf58      	it	pl
 8000f0a:	4253      	negpl	r3, r2
 8000f0c:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <SerialRead+0xa4>)
 8000f0e:	6013      	str	r3, [r2, #0]
					return c;
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000068 	.word	0x20000068
 8000f24:	2000006c 	.word	0x2000006c
 8000f28:	20000180 	.word	0x20000180
 8000f2c:	20000070 	.word	0x20000070
 8000f30:	20000074 	.word	0x20000074
 8000f34:	20000380 	.word	0x20000380

08000f38 <SerialFlush>:

void SerialFlush(uint8_t portNum)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
	// occurs after reading the value of rx_buffer_head but before writing
	// the value to rx_buffer_tail; the previous value of rx_buffer_head
	// may be written to rx_buffer_tail, making it appear as if the buffer
	// were full, not empty.

	switch(portNum)
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d002      	beq.n	8000f4e <SerialFlush+0x16>
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d008      	beq.n	8000f5e <SerialFlush+0x26>
	case 2:
		rx_buffer_tail2=0;
	    rx_buffer_head2 = rx_buffer_tail2;
		break;
	default :
		break;
 8000f4c:	e00f      	b.n	8000f6e <SerialFlush+0x36>
		rx_buffer_tail1=0;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <SerialFlush+0x44>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
	    rx_buffer_head1 = rx_buffer_tail1;
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <SerialFlush+0x44>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <SerialFlush+0x48>)
 8000f5a:	6013      	str	r3, [r2, #0]
		break;
 8000f5c:	e007      	b.n	8000f6e <SerialFlush+0x36>
		rx_buffer_tail2=0;
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <SerialFlush+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
	    rx_buffer_head2 = rx_buffer_tail2;
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <SerialFlush+0x4c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <SerialFlush+0x50>)
 8000f6a:	6013      	str	r3, [r2, #0]
		break;
 8000f6c:	bf00      	nop
	}
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	2000006c 	.word	0x2000006c
 8000f80:	20000068 	.word	0x20000068
 8000f84:	20000074 	.word	0x20000074
 8000f88:	20000070 	.word	0x20000070

08000f8c <SerialprintMode>:


void SerialprintMode(int mode, uint8_t portNum)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	70fb      	strb	r3, [r7, #3]
	// do nothing, we only support serial printing, not lcd.
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <SerialprintByte>:

void SerialprintByte(unsigned char c, uint8_t portNum)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	460a      	mov	r2, r1
 8000fae:	71fb      	strb	r3, [r7, #7]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	71bb      	strb	r3, [r7, #6]
	SerialWrite(c, portNum);
 8000fb4:	79ba      	ldrb	r2, [r7, #6]
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	4611      	mov	r1, r2
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff ff0a 	bl	8000dd4 <SerialWrite>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <SerialprintString>:
	SerialprintByte('\r', portNum);
	SerialprintByte('\n', portNum);
}

void SerialprintString(const char *s, uint8_t portNum)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	70fb      	strb	r3, [r7, #3]
	switch(portNum)
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d002      	beq.n	8000fe0 <SerialprintString+0x18>
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d00b      	beq.n	8000ff6 <SerialprintString+0x2e>
	case 2:
		HAL_UART_Transmit(&huart2, (uint8_t *)s, strlen(s), SERIAL_DEFAULT_TIMEOUT);
		break;

	default :
		break;
 8000fde:	e015      	b.n	800100c <SerialprintString+0x44>
		HAL_UART_Transmit(&huart1, (uint8_t *)s, strlen(s), SERIAL_DEFAULT_TIMEOUT);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff f8f1 	bl	80001c8 <strlen>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	2364      	movs	r3, #100	; 0x64
 8000fec:	6879      	ldr	r1, [r7, #4]
 8000fee:	4809      	ldr	r0, [pc, #36]	; (8001014 <SerialprintString+0x4c>)
 8000ff0:	f002 f99f 	bl	8003332 <HAL_UART_Transmit>
		break;
 8000ff4:	e00a      	b.n	800100c <SerialprintString+0x44>
		HAL_UART_Transmit(&huart2, (uint8_t *)s, strlen(s), SERIAL_DEFAULT_TIMEOUT);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff f8e6 	bl	80001c8 <strlen>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	2364      	movs	r3, #100	; 0x64
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	4804      	ldr	r0, [pc, #16]	; (8001018 <SerialprintString+0x50>)
 8001006:	f002 f994 	bl	8003332 <HAL_UART_Transmit>
		break;
 800100a:	bf00      	nop
	}

}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000078 	.word	0x20000078
 8001018:	200000fc 	.word	0x200000fc

0800101c <SerialprintIntegerInBase>:

void SerialprintIntegerInBase(unsigned long n, unsigned long base, uint8_t portNum)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08e      	sub	sp, #56	; 0x38
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	4613      	mov	r3, r2
 8001028:	71fb      	strb	r3, [r7, #7]
	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars.
	unsigned long i = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	637b      	str	r3, [r7, #52]	; 0x34

	if (n == 0) {
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d11b      	bne.n	800106c <SerialprintIntegerInBase+0x50>
		SerialprintByte('0', portNum);
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	4619      	mov	r1, r3
 8001038:	2030      	movs	r0, #48	; 0x30
 800103a:	f7ff ffb3 	bl	8000fa4 <SerialprintByte>
 800103e:	e040      	b.n	80010c2 <SerialprintIntegerInBase+0xa6>
		return;
	}

	while (n > 0) {
		buf[i++] = n % base;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	fbb3 f2f2 	udiv	r2, r3, r2
 8001048:	68b9      	ldr	r1, [r7, #8]
 800104a:	fb01 f202 	mul.w	r2, r1, r2
 800104e:	1a99      	subs	r1, r3, r2
 8001050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	637a      	str	r2, [r7, #52]	; 0x34
 8001056:	b2ca      	uxtb	r2, r1
 8001058:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800105c:	440b      	add	r3, r1
 800105e:	f803 2c24 	strb.w	r2, [r3, #-36]
		n /= base;
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	60fb      	str	r3, [r7, #12]
	while (n > 0) {
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1e6      	bne.n	8001040 <SerialprintIntegerInBase+0x24>
	}

	for (; i > 0; i--)
 8001072:	e023      	b.n	80010bc <SerialprintIntegerInBase+0xa0>
		SerialprintByte(buf[i - 1] < 10 ?
 8001074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001076:	3b01      	subs	r3, #1
 8001078:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800107c:	4413      	add	r3, r2
 800107e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001082:	2b09      	cmp	r3, #9
 8001084:	d809      	bhi.n	800109a <SerialprintIntegerInBase+0x7e>
			'0' + buf[i - 1] :
 8001086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001088:	3b01      	subs	r3, #1
 800108a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800108e:	4413      	add	r3, r2
 8001090:	f813 3c24 	ldrb.w	r3, [r3, #-36]
		SerialprintByte(buf[i - 1] < 10 ?
 8001094:	3330      	adds	r3, #48	; 0x30
 8001096:	b2db      	uxtb	r3, r3
 8001098:	e008      	b.n	80010ac <SerialprintIntegerInBase+0x90>
			'A' + buf[i - 1] - 10, portNum);
 800109a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800109c:	3b01      	subs	r3, #1
 800109e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80010a2:	4413      	add	r3, r2
 80010a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
		SerialprintByte(buf[i - 1] < 10 ?
 80010a8:	3337      	adds	r3, #55	; 0x37
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	79fa      	ldrb	r2, [r7, #7]
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff77 	bl	8000fa4 <SerialprintByte>
	for (; i > 0; i--)
 80010b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b8:	3b01      	subs	r3, #1
 80010ba:	637b      	str	r3, [r7, #52]	; 0x34
 80010bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1d8      	bne.n	8001074 <SerialprintIntegerInBase+0x58>
}
 80010c2:	3738      	adds	r7, #56	; 0x38
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <Serialputhex>:


void Serialputhex(char ch, uint8_t portNum) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	460a      	mov	r2, r1
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	4613      	mov	r3, r2
 80010d6:	71bb      	strb	r3, [r7, #6]
    char ah,al;

    ah = (ch & 0xf0) >> 4;
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	091b      	lsrs	r3, r3, #4
 80010dc:	73fb      	strb	r3, [r7, #15]
    if(ah >= 0x0a) {
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	2b09      	cmp	r3, #9
 80010e2:	d903      	bls.n	80010ec <Serialputhex+0x24>
	ah = ah - 0x0a + 'A';
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	3337      	adds	r3, #55	; 0x37
 80010e8:	73fb      	strb	r3, [r7, #15]
 80010ea:	e002      	b.n	80010f2 <Serialputhex+0x2a>
    } else {
	ah += '0';
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	3330      	adds	r3, #48	; 0x30
 80010f0:	73fb      	strb	r3, [r7, #15]
    }
    al = (ch & 0x0f);
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 030f 	and.w	r3, r3, #15
 80010f8:	73bb      	strb	r3, [r7, #14]
    if(al >= 0x0a) {
 80010fa:	7bbb      	ldrb	r3, [r7, #14]
 80010fc:	2b09      	cmp	r3, #9
 80010fe:	d903      	bls.n	8001108 <Serialputhex+0x40>
	al = al - 0x0a + 'A';
 8001100:	7bbb      	ldrb	r3, [r7, #14]
 8001102:	3337      	adds	r3, #55	; 0x37
 8001104:	73bb      	strb	r3, [r7, #14]
 8001106:	e002      	b.n	800110e <Serialputhex+0x46>
    } else {
	al += '0';
 8001108:	7bbb      	ldrb	r3, [r7, #14]
 800110a:	3330      	adds	r3, #48	; 0x30
 800110c:	73bb      	strb	r3, [r7, #14]
    }
    SerialprintByte(ah, portNum);
 800110e:	79ba      	ldrb	r2, [r7, #6]
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff45 	bl	8000fa4 <SerialprintByte>
    SerialprintByte(al, portNum);
 800111a:	79ba      	ldrb	r2, [r7, #6]
 800111c:	7bbb      	ldrb	r3, [r7, #14]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff3f 	bl	8000fa4 <SerialprintByte>
}
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <SerialprintInteger>:



void SerialprintInteger(long n, uint8_t portNum)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	460b      	mov	r3, r1
 8001138:	70fb      	strb	r3, [r7, #3]
	if (n < 0) {
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	da07      	bge.n	8001150 <SerialprintInteger+0x22>
		SerialprintByte('-', portNum);
 8001140:	78fb      	ldrb	r3, [r7, #3]
 8001142:	4619      	mov	r1, r3
 8001144:	202d      	movs	r0, #45	; 0x2d
 8001146:	f7ff ff2d 	bl	8000fa4 <SerialprintByte>
		n = -n;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	425b      	negs	r3, r3
 800114e:	607b      	str	r3, [r7, #4]
	}

	SerialprintIntegerInBase(n, 10, portNum);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	78fa      	ldrb	r2, [r7, #3]
 8001154:	210a      	movs	r1, #10
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff60 	bl	800101c <SerialprintIntegerInBase>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <SerialprintHexlong>:

void SerialprintHexlong(unsigned long n, uint8_t portNum)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	70fb      	strb	r3, [r7, #3]
	SerialprintIntegerInBase(n, 16, portNum);
 8001170:	78fb      	ldrb	r3, [r7, #3]
 8001172:	461a      	mov	r2, r3
 8001174:	2110      	movs	r1, #16
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ff50 	bl	800101c <SerialprintIntegerInBase>
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <SerialprintOctal>:

void SerialprintOctal(unsigned long n, uint8_t portNum)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	70fb      	strb	r3, [r7, #3]
	SerialprintIntegerInBase(n, 8, portNum);
 8001190:	78fb      	ldrb	r3, [r7, #3]
 8001192:	461a      	mov	r2, r3
 8001194:	2108      	movs	r1, #8
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ff40 	bl	800101c <SerialprintIntegerInBase>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <SerialprintBinary>:

void SerialprintBinary(unsigned long n, uint8_t portNum)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	70fb      	strb	r3, [r7, #3]
	SerialprintIntegerInBase(n, 2, portNum);
 80011b0:	78fb      	ldrb	r3, [r7, #3]
 80011b2:	461a      	mov	r2, r3
 80011b4:	2102      	movs	r1, #2
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ff30 	bl	800101c <SerialprintIntegerInBase>
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	 if(huart->Instance== USART2)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a25      	ldr	r2, [pc, #148]	; (8001268 <HAL_UART_RxCpltCallback+0xa4>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d11f      	bne.n	8001216 <HAL_UART_RxCpltCallback+0x52>
	 {
		 unsigned char buff = rx2_temp[0];
 80011d6:	4b25      	ldr	r3, [pc, #148]	; (800126c <HAL_UART_RxCpltCallback+0xa8>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	75fb      	strb	r3, [r7, #23]
		 int i = (rx_buffer_head2 + 1) % RX_BUFFER_SIZE_2;
 80011dc:	4b24      	ldr	r3, [pc, #144]	; (8001270 <HAL_UART_RxCpltCallback+0xac>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	425a      	negs	r2, r3
 80011e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80011ec:	bf58      	it	pl
 80011ee:	4253      	negpl	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
		 // if we should be storing the received character into the location
		 // just before the tail (meaning that the head would advance to the
		 // current location of the tail), we're about to overflow the buffer
		 // and so we don't write the character or advance the head.
		 if (i != rx_buffer_tail2) {
 80011f2:	4b20      	ldr	r3, [pc, #128]	; (8001274 <HAL_UART_RxCpltCallback+0xb0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d007      	beq.n	800120c <HAL_UART_RxCpltCallback+0x48>
		 	 rx_buffer2[rx_buffer_head2] = buff;
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <HAL_UART_RxCpltCallback+0xac>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	491d      	ldr	r1, [pc, #116]	; (8001278 <HAL_UART_RxCpltCallback+0xb4>)
 8001202:	7dfa      	ldrb	r2, [r7, #23]
 8001204:	54ca      	strb	r2, [r1, r3]
		 	 rx_buffer_head2 = i;
 8001206:	4a1a      	ldr	r2, [pc, #104]	; (8001270 <HAL_UART_RxCpltCallback+0xac>)
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	6013      	str	r3, [r2, #0]
		 	 }
		 HAL_UART_Receive_IT(&huart2, (uint8_t *)rx2_temp, 1);
 800120c:	2201      	movs	r2, #1
 800120e:	4917      	ldr	r1, [pc, #92]	; (800126c <HAL_UART_RxCpltCallback+0xa8>)
 8001210:	481a      	ldr	r0, [pc, #104]	; (800127c <HAL_UART_RxCpltCallback+0xb8>)
 8001212:	f002 f921 	bl	8003458 <HAL_UART_Receive_IT>
	 }

	 if(huart->Instance== USART1)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a19      	ldr	r2, [pc, #100]	; (8001280 <HAL_UART_RxCpltCallback+0xbc>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d11f      	bne.n	8001260 <HAL_UART_RxCpltCallback+0x9c>
	 	 {
	 		 unsigned char buff = rx1_temp[0];
 8001220:	4b18      	ldr	r3, [pc, #96]	; (8001284 <HAL_UART_RxCpltCallback+0xc0>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	73fb      	strb	r3, [r7, #15]
	 		 int i = (rx_buffer_head1 + 1) % RX_BUFFER_SIZE_1;
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <HAL_UART_RxCpltCallback+0xc4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	425a      	negs	r2, r3
 800122e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001232:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001236:	bf58      	it	pl
 8001238:	4253      	negpl	r3, r2
 800123a:	60bb      	str	r3, [r7, #8]
	 		 // if we should be storing the received character into the location
	 		 // just before the tail (meaning that the head would advance to the
	 		 // current location of the tail), we're about to overflow the buffer
	 		 // and so we don't write the character or advance the head.
	 		 if (i != rx_buffer_tail1) {
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <HAL_UART_RxCpltCallback+0xc8>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	429a      	cmp	r2, r3
 8001244:	d007      	beq.n	8001256 <HAL_UART_RxCpltCallback+0x92>
	 		 	 rx_buffer1[rx_buffer_head1] = buff;
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <HAL_UART_RxCpltCallback+0xc4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4911      	ldr	r1, [pc, #68]	; (8001290 <HAL_UART_RxCpltCallback+0xcc>)
 800124c:	7bfa      	ldrb	r2, [r7, #15]
 800124e:	54ca      	strb	r2, [r1, r3]
	 		 	 rx_buffer_head1 = i;
 8001250:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <HAL_UART_RxCpltCallback+0xc4>)
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	6013      	str	r3, [r2, #0]
	 		 	 }
	 		 HAL_UART_Receive_IT(&huart1, (uint8_t *)rx1_temp, 1);
 8001256:	2201      	movs	r2, #1
 8001258:	490a      	ldr	r1, [pc, #40]	; (8001284 <HAL_UART_RxCpltCallback+0xc0>)
 800125a:	480e      	ldr	r0, [pc, #56]	; (8001294 <HAL_UART_RxCpltCallback+0xd0>)
 800125c:	f002 f8fc 	bl	8003458 <HAL_UART_Receive_IT>
	 	 }

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8001260:	bf00      	nop
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40004400 	.word	0x40004400
 800126c:	20000060 	.word	0x20000060
 8001270:	20000070 	.word	0x20000070
 8001274:	20000074 	.word	0x20000074
 8001278:	20000380 	.word	0x20000380
 800127c:	200000fc 	.word	0x200000fc
 8001280:	40013800 	.word	0x40013800
 8001284:	20000064 	.word	0x20000064
 8001288:	20000068 	.word	0x20000068
 800128c:	2000006c 	.word	0x2000006c
 8001290:	20000180 	.word	0x20000180
 8001294:	20000078 	.word	0x20000078

08001298 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a2:	2003      	movs	r0, #3
 80012a4:	f000 f980 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012a8:	2000      	movs	r0, #0
 80012aa:	f000 f80d 	bl	80012c8 <HAL_InitTick>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	71fb      	strb	r3, [r7, #7]
 80012b8:	e001      	b.n	80012be <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012ba:	f7ff fb65 	bl	8000988 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012be:	79fb      	ldrb	r3, [r7, #7]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012d4:	4b17      	ldr	r3, [pc, #92]	; (8001334 <HAL_InitTick+0x6c>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d023      	beq.n	8001324 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012dc:	4b16      	ldr	r3, [pc, #88]	; (8001338 <HAL_InitTick+0x70>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <HAL_InitTick+0x6c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4619      	mov	r1, r3
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f99b 	bl	800162e <HAL_SYSTICK_Config>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10f      	bne.n	800131e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b0f      	cmp	r3, #15
 8001302:	d809      	bhi.n	8001318 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001304:	2200      	movs	r2, #0
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800130c:	f000 f957 	bl	80015be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001310:	4a0a      	ldr	r2, [pc, #40]	; (800133c <HAL_InitTick+0x74>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e007      	b.n	8001328 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	73fb      	strb	r3, [r7, #15]
 800131c:	e004      	b.n	8001328 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	73fb      	strb	r3, [r7, #15]
 8001322:	e001      	b.n	8001328 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001328:	7bfb      	ldrb	r3, [r7, #15]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000040 	.word	0x20000040
 8001338:	20000000 	.word	0x20000000
 800133c:	2000003c 	.word	0x2000003c

08001340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x20>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x24>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4413      	add	r3, r2
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <HAL_IncTick+0x24>)
 8001352:	6013      	str	r3, [r2, #0]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000040 	.word	0x20000040
 8001364:	20000580 	.word	0x20000580

08001368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return uwTick;
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <HAL_GetTick+0x14>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000580 	.word	0x20000580

08001380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001388:	f7ff ffee 	bl	8001368 <HAL_GetTick>
 800138c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001398:	d005      	beq.n	80013a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_Delay+0x40>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013a6:	bf00      	nop
 80013a8:	f7ff ffde 	bl	8001368 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d8f7      	bhi.n	80013a8 <HAL_Delay+0x28>
  {
  }
}
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000040 	.word	0x20000040

080013c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e0:	4013      	ands	r3, r2
 80013e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f6:	4a04      	ldr	r2, [pc, #16]	; (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	60d3      	str	r3, [r2, #12]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <__NVIC_GetPriorityGrouping+0x18>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	0a1b      	lsrs	r3, r3, #8
 8001416:	f003 0307 	and.w	r3, r3, #7
}
 800141a:	4618      	mov	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	2b00      	cmp	r3, #0
 8001438:	db0b      	blt.n	8001452 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	f003 021f 	and.w	r2, r3, #31
 8001440:	4907      	ldr	r1, [pc, #28]	; (8001460 <__NVIC_EnableIRQ+0x38>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	095b      	lsrs	r3, r3, #5
 8001448:	2001      	movs	r0, #1
 800144a:	fa00 f202 	lsl.w	r2, r0, r2
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000e100 	.word	0xe000e100

08001464 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	db10      	blt.n	8001498 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	f003 021f 	and.w	r2, r3, #31
 800147c:	4909      	ldr	r1, [pc, #36]	; (80014a4 <__NVIC_DisableIRQ+0x40>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	2001      	movs	r0, #1
 8001486:	fa00 f202 	lsl.w	r2, r0, r2
 800148a:	3320      	adds	r3, #32
 800148c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001490:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001494:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000e100 	.word	0xe000e100

080014a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	db0a      	blt.n	80014d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	490c      	ldr	r1, [pc, #48]	; (80014f4 <__NVIC_SetPriority+0x4c>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	0112      	lsls	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	440b      	add	r3, r1
 80014cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d0:	e00a      	b.n	80014e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4908      	ldr	r1, [pc, #32]	; (80014f8 <__NVIC_SetPriority+0x50>)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	3b04      	subs	r3, #4
 80014e0:	0112      	lsls	r2, r2, #4
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	440b      	add	r3, r1
 80014e6:	761a      	strb	r2, [r3, #24]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000e100 	.word	0xe000e100
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f1c3 0307 	rsb	r3, r3, #7
 8001516:	2b04      	cmp	r3, #4
 8001518:	bf28      	it	cs
 800151a:	2304      	movcs	r3, #4
 800151c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3304      	adds	r3, #4
 8001522:	2b06      	cmp	r3, #6
 8001524:	d902      	bls.n	800152c <NVIC_EncodePriority+0x30>
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3b03      	subs	r3, #3
 800152a:	e000      	b.n	800152e <NVIC_EncodePriority+0x32>
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	401a      	ands	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001544:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43d9      	mvns	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	4313      	orrs	r3, r2
         );
}
 8001556:	4618      	mov	r0, r3
 8001558:	3724      	adds	r7, #36	; 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001574:	d301      	bcc.n	800157a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001576:	2301      	movs	r3, #1
 8001578:	e00f      	b.n	800159a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <SysTick_Config+0x40>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001582:	210f      	movs	r1, #15
 8001584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001588:	f7ff ff8e 	bl	80014a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <SysTick_Config+0x40>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <SysTick_Config+0x40>)
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff07 	bl	80013c4 <__NVIC_SetPriorityGrouping>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015d0:	f7ff ff1c 	bl	800140c <__NVIC_GetPriorityGrouping>
 80015d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7ff ff8e 	bl	80014fc <NVIC_EncodePriority>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff5d 	bl	80014a8 <__NVIC_SetPriority>
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff0f 	bl	8001428 <__NVIC_EnableIRQ>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff1f 	bl	8001464 <__NVIC_DisableIRQ>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ff94 	bl	8001564 <SysTick_Config>
 800163c:	4603      	mov	r3, r0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b084      	sub	sp, #16
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d005      	beq.n	800166a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2204      	movs	r2, #4
 8001662:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	73fb      	strb	r3, [r7, #15]
 8001668:	e029      	b.n	80016be <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 020e 	bic.w	r2, r2, #14
 8001678:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0201 	bic.w	r2, r2, #1
 8001688:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	f003 021c 	and.w	r2, r3, #28
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	2101      	movs	r1, #1
 8001698:	fa01 f202 	lsl.w	r2, r1, r2
 800169c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	4798      	blx	r3
    }
  }
  return status;
 80016be:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b087      	sub	sp, #28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d6:	e17f      	b.n	80019d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	2101      	movs	r1, #1
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	fa01 f303 	lsl.w	r3, r1, r3
 80016e4:	4013      	ands	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 8171 	beq.w	80019d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d00b      	beq.n	8001710 <HAL_GPIO_Init+0x48>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d007      	beq.n	8001710 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001704:	2b11      	cmp	r3, #17
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b12      	cmp	r3, #18
 800170e:	d130      	bne.n	8001772 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	2203      	movs	r2, #3
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001746:	2201      	movs	r2, #1
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4013      	ands	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	091b      	lsrs	r3, r3, #4
 800175c:	f003 0201 	and.w	r2, r3, #1
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	2b03      	cmp	r3, #3
 800177c:	d118      	bne.n	80017b0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001782:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001784:	2201      	movs	r2, #1
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	08db      	lsrs	r3, r3, #3
 800179a:	f003 0201 	and.w	r2, r3, #1
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	2203      	movs	r2, #3
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x128>
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b12      	cmp	r3, #18
 80017ee:	d123      	bne.n	8001838 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	08da      	lsrs	r2, r3, #3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3208      	adds	r2, #8
 80017f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	220f      	movs	r2, #15
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	691a      	ldr	r2, [r3, #16]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	08da      	lsrs	r2, r3, #3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3208      	adds	r2, #8
 8001832:	6939      	ldr	r1, [r7, #16]
 8001834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	2203      	movs	r2, #3
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0203 	and.w	r2, r3, #3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4313      	orrs	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 80ac 	beq.w	80019d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	4b5e      	ldr	r3, [pc, #376]	; (80019f4 <HAL_GPIO_Init+0x32c>)
 800187c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187e:	4a5d      	ldr	r2, [pc, #372]	; (80019f4 <HAL_GPIO_Init+0x32c>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6613      	str	r3, [r2, #96]	; 0x60
 8001886:	4b5b      	ldr	r3, [pc, #364]	; (80019f4 <HAL_GPIO_Init+0x32c>)
 8001888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001892:	4a59      	ldr	r2, [pc, #356]	; (80019f8 <HAL_GPIO_Init+0x330>)
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	089b      	lsrs	r3, r3, #2
 8001898:	3302      	adds	r3, #2
 800189a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	220f      	movs	r2, #15
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018bc:	d025      	beq.n	800190a <HAL_GPIO_Init+0x242>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <HAL_GPIO_Init+0x334>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d01f      	beq.n	8001906 <HAL_GPIO_Init+0x23e>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a4d      	ldr	r2, [pc, #308]	; (8001a00 <HAL_GPIO_Init+0x338>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d019      	beq.n	8001902 <HAL_GPIO_Init+0x23a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a4c      	ldr	r2, [pc, #304]	; (8001a04 <HAL_GPIO_Init+0x33c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d013      	beq.n	80018fe <HAL_GPIO_Init+0x236>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a4b      	ldr	r2, [pc, #300]	; (8001a08 <HAL_GPIO_Init+0x340>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d00d      	beq.n	80018fa <HAL_GPIO_Init+0x232>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a4a      	ldr	r2, [pc, #296]	; (8001a0c <HAL_GPIO_Init+0x344>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d007      	beq.n	80018f6 <HAL_GPIO_Init+0x22e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a49      	ldr	r2, [pc, #292]	; (8001a10 <HAL_GPIO_Init+0x348>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d101      	bne.n	80018f2 <HAL_GPIO_Init+0x22a>
 80018ee:	2306      	movs	r3, #6
 80018f0:	e00c      	b.n	800190c <HAL_GPIO_Init+0x244>
 80018f2:	2307      	movs	r3, #7
 80018f4:	e00a      	b.n	800190c <HAL_GPIO_Init+0x244>
 80018f6:	2305      	movs	r3, #5
 80018f8:	e008      	b.n	800190c <HAL_GPIO_Init+0x244>
 80018fa:	2304      	movs	r3, #4
 80018fc:	e006      	b.n	800190c <HAL_GPIO_Init+0x244>
 80018fe:	2303      	movs	r3, #3
 8001900:	e004      	b.n	800190c <HAL_GPIO_Init+0x244>
 8001902:	2302      	movs	r3, #2
 8001904:	e002      	b.n	800190c <HAL_GPIO_Init+0x244>
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <HAL_GPIO_Init+0x244>
 800190a:	2300      	movs	r3, #0
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	f002 0203 	and.w	r2, r2, #3
 8001912:	0092      	lsls	r2, r2, #2
 8001914:	4093      	lsls	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800191c:	4936      	ldr	r1, [pc, #216]	; (80019f8 <HAL_GPIO_Init+0x330>)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	3302      	adds	r3, #2
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800192a:	4b3a      	ldr	r3, [pc, #232]	; (8001a14 <HAL_GPIO_Init+0x34c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4313      	orrs	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800194e:	4a31      	ldr	r2, [pc, #196]	; (8001a14 <HAL_GPIO_Init+0x34c>)
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001954:	4b2f      	ldr	r3, [pc, #188]	; (8001a14 <HAL_GPIO_Init+0x34c>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	43db      	mvns	r3, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001978:	4a26      	ldr	r2, [pc, #152]	; (8001a14 <HAL_GPIO_Init+0x34c>)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800197e:	4b25      	ldr	r3, [pc, #148]	; (8001a14 <HAL_GPIO_Init+0x34c>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	43db      	mvns	r3, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4313      	orrs	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019a2:	4a1c      	ldr	r2, [pc, #112]	; (8001a14 <HAL_GPIO_Init+0x34c>)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019a8:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <HAL_GPIO_Init+0x34c>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019cc:	4a11      	ldr	r2, [pc, #68]	; (8001a14 <HAL_GPIO_Init+0x34c>)
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	3301      	adds	r3, #1
 80019d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	fa22 f303 	lsr.w	r3, r2, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f47f ae78 	bne.w	80016d8 <HAL_GPIO_Init+0x10>
  }
}
 80019e8:	bf00      	nop
 80019ea:	371c      	adds	r7, #28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40010000 	.word	0x40010000
 80019fc:	48000400 	.word	0x48000400
 8001a00:	48000800 	.word	0x48000800
 8001a04:	48000c00 	.word	0x48000c00
 8001a08:	48001000 	.word	0x48001000
 8001a0c:	48001400 	.word	0x48001400
 8001a10:	48001800 	.word	0x48001800
 8001a14:	40010400 	.word	0x40010400

08001a18 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001a26:	e0cd      	b.n	8001bc4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 80c0 	beq.w	8001bbe <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001a3e:	4a68      	ldr	r2, [pc, #416]	; (8001be0 <HAL_GPIO_DeInit+0x1c8>)
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	089b      	lsrs	r3, r3, #2
 8001a44:	3302      	adds	r3, #2
 8001a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	220f      	movs	r2, #15
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a66:	d025      	beq.n	8001ab4 <HAL_GPIO_DeInit+0x9c>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a5e      	ldr	r2, [pc, #376]	; (8001be4 <HAL_GPIO_DeInit+0x1cc>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d01f      	beq.n	8001ab0 <HAL_GPIO_DeInit+0x98>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a5d      	ldr	r2, [pc, #372]	; (8001be8 <HAL_GPIO_DeInit+0x1d0>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d019      	beq.n	8001aac <HAL_GPIO_DeInit+0x94>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a5c      	ldr	r2, [pc, #368]	; (8001bec <HAL_GPIO_DeInit+0x1d4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d013      	beq.n	8001aa8 <HAL_GPIO_DeInit+0x90>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a5b      	ldr	r2, [pc, #364]	; (8001bf0 <HAL_GPIO_DeInit+0x1d8>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d00d      	beq.n	8001aa4 <HAL_GPIO_DeInit+0x8c>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a5a      	ldr	r2, [pc, #360]	; (8001bf4 <HAL_GPIO_DeInit+0x1dc>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d007      	beq.n	8001aa0 <HAL_GPIO_DeInit+0x88>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a59      	ldr	r2, [pc, #356]	; (8001bf8 <HAL_GPIO_DeInit+0x1e0>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d101      	bne.n	8001a9c <HAL_GPIO_DeInit+0x84>
 8001a98:	2306      	movs	r3, #6
 8001a9a:	e00c      	b.n	8001ab6 <HAL_GPIO_DeInit+0x9e>
 8001a9c:	2307      	movs	r3, #7
 8001a9e:	e00a      	b.n	8001ab6 <HAL_GPIO_DeInit+0x9e>
 8001aa0:	2305      	movs	r3, #5
 8001aa2:	e008      	b.n	8001ab6 <HAL_GPIO_DeInit+0x9e>
 8001aa4:	2304      	movs	r3, #4
 8001aa6:	e006      	b.n	8001ab6 <HAL_GPIO_DeInit+0x9e>
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e004      	b.n	8001ab6 <HAL_GPIO_DeInit+0x9e>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e002      	b.n	8001ab6 <HAL_GPIO_DeInit+0x9e>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <HAL_GPIO_DeInit+0x9e>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	f002 0203 	and.w	r2, r2, #3
 8001abc:	0092      	lsls	r2, r2, #2
 8001abe:	4093      	lsls	r3, r2
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d132      	bne.n	8001b2c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001ac6:	4b4d      	ldr	r3, [pc, #308]	; (8001bfc <HAL_GPIO_DeInit+0x1e4>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	494b      	ldr	r1, [pc, #300]	; (8001bfc <HAL_GPIO_DeInit+0x1e4>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001ad4:	4b49      	ldr	r3, [pc, #292]	; (8001bfc <HAL_GPIO_DeInit+0x1e4>)
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	4947      	ldr	r1, [pc, #284]	; (8001bfc <HAL_GPIO_DeInit+0x1e4>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001ae2:	4b46      	ldr	r3, [pc, #280]	; (8001bfc <HAL_GPIO_DeInit+0x1e4>)
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	4944      	ldr	r1, [pc, #272]	; (8001bfc <HAL_GPIO_DeInit+0x1e4>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001af0:	4b42      	ldr	r3, [pc, #264]	; (8001bfc <HAL_GPIO_DeInit+0x1e4>)
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	4940      	ldr	r1, [pc, #256]	; (8001bfc <HAL_GPIO_DeInit+0x1e4>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	220f      	movs	r2, #15
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001b0e:	4a34      	ldr	r2, [pc, #208]	; (8001be0 <HAL_GPIO_DeInit+0x1c8>)
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	089b      	lsrs	r3, r3, #2
 8001b14:	3302      	adds	r3, #2
 8001b16:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	43da      	mvns	r2, r3
 8001b1e:	4830      	ldr	r0, [pc, #192]	; (8001be0 <HAL_GPIO_DeInit+0x1c8>)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	089b      	lsrs	r3, r3, #2
 8001b24:	400a      	ands	r2, r1
 8001b26:	3302      	adds	r3, #2
 8001b28:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	2103      	movs	r1, #3
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	08da      	lsrs	r2, r3, #3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3208      	adds	r2, #8
 8001b48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	220f      	movs	r2, #15
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	08d2      	lsrs	r2, r2, #3
 8001b60:	4019      	ands	r1, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3208      	adds	r2, #8
 8001b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2103      	movs	r1, #3
 8001b74:	fa01 f303 	lsl.w	r3, r1, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	2101      	movs	r1, #1
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	401a      	ands	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	2103      	movs	r1, #3
 8001b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	401a      	ands	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bae:	2101      	movs	r1, #1
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	401a      	ands	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f47f af2b 	bne.w	8001a28 <HAL_GPIO_DeInit+0x10>
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	371c      	adds	r7, #28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40010000 	.word	0x40010000
 8001be4:	48000400 	.word	0x48000400
 8001be8:	48000800 	.word	0x48000800
 8001bec:	48000c00 	.word	0x48000c00
 8001bf0:	48001000 	.word	0x48001000
 8001bf4:	48001400 	.word	0x48001400
 8001bf8:	48001800 	.word	0x48001800
 8001bfc:	40010400 	.word	0x40010400

08001c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	807b      	strh	r3, [r7, #2]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c10:	787b      	ldrb	r3, [r7, #1]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c16:	887a      	ldrh	r2, [r7, #2]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c1c:	e002      	b.n	8001c24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c1e:	887a      	ldrh	r2, [r7, #2]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40007000 	.word	0x40007000

08001c4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c5a:	d130      	bne.n	8001cbe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c5c:	4b23      	ldr	r3, [pc, #140]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c68:	d038      	beq.n	8001cdc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c72:	4a1e      	ldr	r2, [pc, #120]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2232      	movs	r2, #50	; 0x32
 8001c80:	fb02 f303 	mul.w	r3, r2, r3
 8001c84:	4a1b      	ldr	r2, [pc, #108]	; (8001cf4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c86:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8a:	0c9b      	lsrs	r3, r3, #18
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c90:	e002      	b.n	8001c98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c98:	4b14      	ldr	r3, [pc, #80]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ca4:	d102      	bne.n	8001cac <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f2      	bne.n	8001c92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cac:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cb8:	d110      	bne.n	8001cdc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e00f      	b.n	8001cde <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cca:	d007      	beq.n	8001cdc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ccc:	4b07      	ldr	r3, [pc, #28]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cd4:	4a05      	ldr	r2, [pc, #20]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cda:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40007000 	.word	0x40007000
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	431bde83 	.word	0x431bde83

08001cf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e3d4      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d0a:	4ba1      	ldr	r3, [pc, #644]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
 8001d12:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d14:	4b9e      	ldr	r3, [pc, #632]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 80e4 	beq.w	8001ef4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d007      	beq.n	8001d42 <HAL_RCC_OscConfig+0x4a>
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	2b0c      	cmp	r3, #12
 8001d36:	f040 808b 	bne.w	8001e50 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	f040 8087 	bne.w	8001e50 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d42:	4b93      	ldr	r3, [pc, #588]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_RCC_OscConfig+0x62>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e3ac      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1a      	ldr	r2, [r3, #32]
 8001d5e:	4b8c      	ldr	r3, [pc, #560]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d004      	beq.n	8001d74 <HAL_RCC_OscConfig+0x7c>
 8001d6a:	4b89      	ldr	r3, [pc, #548]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d72:	e005      	b.n	8001d80 <HAL_RCC_OscConfig+0x88>
 8001d74:	4b86      	ldr	r3, [pc, #536]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d7a:	091b      	lsrs	r3, r3, #4
 8001d7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d223      	bcs.n	8001dcc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 fd3f 	bl	800280c <RCC_SetFlashLatencyFromMSIRange>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e38d      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d98:	4b7d      	ldr	r3, [pc, #500]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a7c      	ldr	r2, [pc, #496]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001d9e:	f043 0308 	orr.w	r3, r3, #8
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	4b7a      	ldr	r3, [pc, #488]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4977      	ldr	r1, [pc, #476]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001db6:	4b76      	ldr	r3, [pc, #472]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	021b      	lsls	r3, r3, #8
 8001dc4:	4972      	ldr	r1, [pc, #456]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	604b      	str	r3, [r1, #4]
 8001dca:	e025      	b.n	8001e18 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dcc:	4b70      	ldr	r3, [pc, #448]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a6f      	ldr	r2, [pc, #444]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001dd2:	f043 0308 	orr.w	r3, r3, #8
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	4b6d      	ldr	r3, [pc, #436]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	496a      	ldr	r1, [pc, #424]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dea:	4b69      	ldr	r3, [pc, #420]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	021b      	lsls	r3, r3, #8
 8001df8:	4965      	ldr	r1, [pc, #404]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d109      	bne.n	8001e18 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f000 fcff 	bl	800280c <RCC_SetFlashLatencyFromMSIRange>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e34d      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e18:	f000 fc36 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8001e1c:	4601      	mov	r1, r0
 8001e1e:	4b5c      	ldr	r3, [pc, #368]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	091b      	lsrs	r3, r3, #4
 8001e24:	f003 030f 	and.w	r3, r3, #15
 8001e28:	4a5a      	ldr	r2, [pc, #360]	; (8001f94 <HAL_RCC_OscConfig+0x29c>)
 8001e2a:	5cd3      	ldrb	r3, [r2, r3]
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	fa21 f303 	lsr.w	r3, r1, r3
 8001e34:	4a58      	ldr	r2, [pc, #352]	; (8001f98 <HAL_RCC_OscConfig+0x2a0>)
 8001e36:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e38:	4b58      	ldr	r3, [pc, #352]	; (8001f9c <HAL_RCC_OscConfig+0x2a4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fa43 	bl	80012c8 <HAL_InitTick>
 8001e42:	4603      	mov	r3, r0
 8001e44:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d052      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	e331      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d032      	beq.n	8001ebe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e58:	4b4d      	ldr	r3, [pc, #308]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a4c      	ldr	r2, [pc, #304]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e64:	f7ff fa80 	bl	8001368 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e6c:	f7ff fa7c 	bl	8001368 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e31a      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e7e:	4b44      	ldr	r3, [pc, #272]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e8a:	4b41      	ldr	r3, [pc, #260]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a40      	ldr	r2, [pc, #256]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001e90:	f043 0308 	orr.w	r3, r3, #8
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	4b3e      	ldr	r3, [pc, #248]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	493b      	ldr	r1, [pc, #236]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ea8:	4b39      	ldr	r3, [pc, #228]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	021b      	lsls	r3, r3, #8
 8001eb6:	4936      	ldr	r1, [pc, #216]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
 8001ebc:	e01a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ebe:	4b34      	ldr	r3, [pc, #208]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a33      	ldr	r2, [pc, #204]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001ec4:	f023 0301 	bic.w	r3, r3, #1
 8001ec8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001eca:	f7ff fa4d 	bl	8001368 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ed2:	f7ff fa49 	bl	8001368 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e2e7      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ee4:	4b2a      	ldr	r3, [pc, #168]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f0      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x1da>
 8001ef0:	e000      	b.n	8001ef4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ef2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d074      	beq.n	8001fea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d005      	beq.n	8001f12 <HAL_RCC_OscConfig+0x21a>
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	2b0c      	cmp	r3, #12
 8001f0a:	d10e      	bne.n	8001f2a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d10b      	bne.n	8001f2a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f12:	4b1f      	ldr	r3, [pc, #124]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d064      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x2f0>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d160      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e2c4      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f32:	d106      	bne.n	8001f42 <HAL_RCC_OscConfig+0x24a>
 8001f34:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a15      	ldr	r2, [pc, #84]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	e01d      	b.n	8001f7e <HAL_RCC_OscConfig+0x286>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f4a:	d10c      	bne.n	8001f66 <HAL_RCC_OscConfig+0x26e>
 8001f4c:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0f      	ldr	r2, [pc, #60]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a0c      	ldr	r2, [pc, #48]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	e00b      	b.n	8001f7e <HAL_RCC_OscConfig+0x286>
 8001f66:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a09      	ldr	r2, [pc, #36]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a06      	ldr	r2, [pc, #24]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f7c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d01c      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7ff f9ef 	bl	8001368 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f8c:	e011      	b.n	8001fb2 <HAL_RCC_OscConfig+0x2ba>
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	080044f0 	.word	0x080044f0
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	2000003c 	.word	0x2000003c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa0:	f7ff f9e2 	bl	8001368 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b64      	cmp	r3, #100	; 0x64
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e280      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fb2:	4baf      	ldr	r3, [pc, #700]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x2a8>
 8001fbe:	e014      	b.n	8001fea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7ff f9d2 	bl	8001368 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc8:	f7ff f9ce 	bl	8001368 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	; 0x64
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e26c      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fda:	4ba5      	ldr	r3, [pc, #660]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x2d0>
 8001fe6:	e000      	b.n	8001fea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d060      	beq.n	80020b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_OscConfig+0x310>
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	2b0c      	cmp	r3, #12
 8002000:	d119      	bne.n	8002036 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	2b02      	cmp	r3, #2
 8002006:	d116      	bne.n	8002036 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002008:	4b99      	ldr	r3, [pc, #612]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_RCC_OscConfig+0x328>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e249      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002020:	4b93      	ldr	r3, [pc, #588]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	061b      	lsls	r3, r3, #24
 800202e:	4990      	ldr	r1, [pc, #576]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002030:	4313      	orrs	r3, r2
 8002032:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002034:	e040      	b.n	80020b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d023      	beq.n	8002086 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800203e:	4b8c      	ldr	r3, [pc, #560]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a8b      	ldr	r2, [pc, #556]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204a:	f7ff f98d 	bl	8001368 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002052:	f7ff f989 	bl	8001368 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e227      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002064:	4b82      	ldr	r3, [pc, #520]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002070:	4b7f      	ldr	r3, [pc, #508]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	061b      	lsls	r3, r3, #24
 800207e:	497c      	ldr	r1, [pc, #496]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
 8002084:	e018      	b.n	80020b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002086:	4b7a      	ldr	r3, [pc, #488]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a79      	ldr	r2, [pc, #484]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 800208c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002092:	f7ff f969 	bl	8001368 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209a:	f7ff f965 	bl	8001368 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e203      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020ac:	4b70      	ldr	r3, [pc, #448]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f0      	bne.n	800209a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d03c      	beq.n	800213e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d01c      	beq.n	8002106 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020cc:	4b68      	ldr	r3, [pc, #416]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80020ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020d2:	4a67      	ldr	r2, [pc, #412]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020dc:	f7ff f944 	bl	8001368 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e4:	f7ff f940 	bl	8001368 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e1de      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020f6:	4b5e      	ldr	r3, [pc, #376]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80020f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0ef      	beq.n	80020e4 <HAL_RCC_OscConfig+0x3ec>
 8002104:	e01b      	b.n	800213e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002106:	4b5a      	ldr	r3, [pc, #360]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800210c:	4a58      	ldr	r2, [pc, #352]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 800210e:	f023 0301 	bic.w	r3, r3, #1
 8002112:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002116:	f7ff f927 	bl	8001368 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800211e:	f7ff f923 	bl	8001368 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e1c1      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002130:	4b4f      	ldr	r3, [pc, #316]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1ef      	bne.n	800211e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 80a6 	beq.w	8002298 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214c:	2300      	movs	r3, #0
 800214e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002150:	4b47      	ldr	r3, [pc, #284]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10d      	bne.n	8002178 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215c:	4b44      	ldr	r3, [pc, #272]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	4a43      	ldr	r2, [pc, #268]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002166:	6593      	str	r3, [r2, #88]	; 0x58
 8002168:	4b41      	ldr	r3, [pc, #260]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 800216a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002174:	2301      	movs	r3, #1
 8002176:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002178:	4b3e      	ldr	r3, [pc, #248]	; (8002274 <HAL_RCC_OscConfig+0x57c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d118      	bne.n	80021b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002184:	4b3b      	ldr	r3, [pc, #236]	; (8002274 <HAL_RCC_OscConfig+0x57c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a3a      	ldr	r2, [pc, #232]	; (8002274 <HAL_RCC_OscConfig+0x57c>)
 800218a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002190:	f7ff f8ea 	bl	8001368 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002198:	f7ff f8e6 	bl	8001368 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e184      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021aa:	4b32      	ldr	r3, [pc, #200]	; (8002274 <HAL_RCC_OscConfig+0x57c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d108      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4d8>
 80021be:	4b2c      	ldr	r3, [pc, #176]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80021c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c4:	4a2a      	ldr	r2, [pc, #168]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021ce:	e024      	b.n	800221a <HAL_RCC_OscConfig+0x522>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b05      	cmp	r3, #5
 80021d6:	d110      	bne.n	80021fa <HAL_RCC_OscConfig+0x502>
 80021d8:	4b25      	ldr	r3, [pc, #148]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021de:	4a24      	ldr	r2, [pc, #144]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80021e0:	f043 0304 	orr.w	r3, r3, #4
 80021e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021e8:	4b21      	ldr	r3, [pc, #132]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ee:	4a20      	ldr	r2, [pc, #128]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021f8:	e00f      	b.n	800221a <HAL_RCC_OscConfig+0x522>
 80021fa:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80021fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002200:	4a1b      	ldr	r2, [pc, #108]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002202:	f023 0301 	bic.w	r3, r3, #1
 8002206:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800220a:	4b19      	ldr	r3, [pc, #100]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 800220c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002210:	4a17      	ldr	r2, [pc, #92]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002212:	f023 0304 	bic.w	r3, r3, #4
 8002216:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d016      	beq.n	8002250 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002222:	f7ff f8a1 	bl	8001368 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002228:	e00a      	b.n	8002240 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222a:	f7ff f89d 	bl	8001368 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	f241 3288 	movw	r2, #5000	; 0x1388
 8002238:	4293      	cmp	r3, r2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e139      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0ed      	beq.n	800222a <HAL_RCC_OscConfig+0x532>
 800224e:	e01a      	b.n	8002286 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002250:	f7ff f88a 	bl	8001368 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002256:	e00f      	b.n	8002278 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002258:	f7ff f886 	bl	8001368 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	f241 3288 	movw	r2, #5000	; 0x1388
 8002266:	4293      	cmp	r3, r2
 8002268:	d906      	bls.n	8002278 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e122      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
 800226e:	bf00      	nop
 8002270:	40021000 	.word	0x40021000
 8002274:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002278:	4b90      	ldr	r3, [pc, #576]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 800227a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1e8      	bne.n	8002258 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002286:	7ffb      	ldrb	r3, [r7, #31]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d105      	bne.n	8002298 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228c:	4b8b      	ldr	r3, [pc, #556]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 800228e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002290:	4a8a      	ldr	r2, [pc, #552]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 8002292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002296:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 8108 	beq.w	80024b2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	f040 80d0 	bne.w	800244c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80022ac:	4b83      	ldr	r3, [pc, #524]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f003 0203 	and.w	r2, r3, #3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	429a      	cmp	r2, r3
 80022be:	d130      	bne.n	8002322 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	3b01      	subs	r3, #1
 80022cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d127      	bne.n	8002322 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022de:	429a      	cmp	r2, r3
 80022e0:	d11f      	bne.n	8002322 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022ec:	2a07      	cmp	r2, #7
 80022ee:	bf14      	ite	ne
 80022f0:	2201      	movne	r2, #1
 80022f2:	2200      	moveq	r2, #0
 80022f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d113      	bne.n	8002322 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002304:	085b      	lsrs	r3, r3, #1
 8002306:	3b01      	subs	r3, #1
 8002308:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800230a:	429a      	cmp	r2, r3
 800230c:	d109      	bne.n	8002322 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	085b      	lsrs	r3, r3, #1
 800231a:	3b01      	subs	r3, #1
 800231c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800231e:	429a      	cmp	r2, r3
 8002320:	d06e      	beq.n	8002400 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	2b0c      	cmp	r3, #12
 8002326:	d069      	beq.n	80023fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002328:	4b64      	ldr	r3, [pc, #400]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d105      	bne.n	8002340 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002334:	4b61      	ldr	r3, [pc, #388]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0b7      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002344:	4b5d      	ldr	r3, [pc, #372]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a5c      	ldr	r2, [pc, #368]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 800234a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800234e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002350:	f7ff f80a 	bl	8001368 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002358:	f7ff f806 	bl	8001368 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e0a4      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800236a:	4b54      	ldr	r3, [pc, #336]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002376:	4b51      	ldr	r3, [pc, #324]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	4b51      	ldr	r3, [pc, #324]	; (80024c0 <HAL_RCC_OscConfig+0x7c8>)
 800237c:	4013      	ands	r3, r2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002386:	3a01      	subs	r2, #1
 8002388:	0112      	lsls	r2, r2, #4
 800238a:	4311      	orrs	r1, r2
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002390:	0212      	lsls	r2, r2, #8
 8002392:	4311      	orrs	r1, r2
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002398:	0852      	lsrs	r2, r2, #1
 800239a:	3a01      	subs	r2, #1
 800239c:	0552      	lsls	r2, r2, #21
 800239e:	4311      	orrs	r1, r2
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023a4:	0852      	lsrs	r2, r2, #1
 80023a6:	3a01      	subs	r2, #1
 80023a8:	0652      	lsls	r2, r2, #25
 80023aa:	4311      	orrs	r1, r2
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023b0:	0912      	lsrs	r2, r2, #4
 80023b2:	0452      	lsls	r2, r2, #17
 80023b4:	430a      	orrs	r2, r1
 80023b6:	4941      	ldr	r1, [pc, #260]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023bc:	4b3f      	ldr	r3, [pc, #252]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a3e      	ldr	r2, [pc, #248]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 80023c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023c8:	4b3c      	ldr	r3, [pc, #240]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4a3b      	ldr	r2, [pc, #236]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 80023ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023d4:	f7fe ffc8 	bl	8001368 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023dc:	f7fe ffc4 	bl	8001368 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e062      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ee:	4b33      	ldr	r3, [pc, #204]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023fa:	e05a      	b.n	80024b2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e059      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002400:	4b2e      	ldr	r3, [pc, #184]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d152      	bne.n	80024b2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800240c:	4b2b      	ldr	r3, [pc, #172]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a2a      	ldr	r2, [pc, #168]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 8002412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002416:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002418:	4b28      	ldr	r3, [pc, #160]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4a27      	ldr	r2, [pc, #156]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 800241e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002422:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002424:	f7fe ffa0 	bl	8001368 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242c:	f7fe ff9c 	bl	8001368 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e03a      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800243e:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0x734>
 800244a:	e032      	b.n	80024b2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	2b0c      	cmp	r3, #12
 8002450:	d02d      	beq.n	80024ae <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002452:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a19      	ldr	r2, [pc, #100]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 8002458:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800245c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800245e:	4b17      	ldr	r3, [pc, #92]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d105      	bne.n	8002476 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800246a:	4b14      	ldr	r3, [pc, #80]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	4a13      	ldr	r2, [pc, #76]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 8002470:	f023 0303 	bic.w	r3, r3, #3
 8002474:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002476:	4b11      	ldr	r3, [pc, #68]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	4a10      	ldr	r2, [pc, #64]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 800247c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002484:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002486:	f7fe ff6f 	bl	8001368 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248e:	f7fe ff6b 	bl	8001368 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e009      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1f0      	bne.n	800248e <HAL_RCC_OscConfig+0x796>
 80024ac:	e001      	b.n	80024b2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3720      	adds	r7, #32
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000
 80024c0:	f99d808c 	.word	0xf99d808c

080024c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0c8      	b.n	800266a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024d8:	4b66      	ldr	r3, [pc, #408]	; (8002674 <HAL_RCC_ClockConfig+0x1b0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d910      	bls.n	8002508 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4b63      	ldr	r3, [pc, #396]	; (8002674 <HAL_RCC_ClockConfig+0x1b0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 0207 	bic.w	r2, r3, #7
 80024ee:	4961      	ldr	r1, [pc, #388]	; (8002674 <HAL_RCC_ClockConfig+0x1b0>)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f6:	4b5f      	ldr	r3, [pc, #380]	; (8002674 <HAL_RCC_ClockConfig+0x1b0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0b0      	b.n	800266a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d04c      	beq.n	80025ae <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b03      	cmp	r3, #3
 800251a:	d107      	bne.n	800252c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800251c:	4b56      	ldr	r3, [pc, #344]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d121      	bne.n	800256c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e09e      	b.n	800266a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d107      	bne.n	8002544 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002534:	4b50      	ldr	r3, [pc, #320]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d115      	bne.n	800256c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e092      	b.n	800266a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d107      	bne.n	800255c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800254c:	4b4a      	ldr	r3, [pc, #296]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d109      	bne.n	800256c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e086      	b.n	800266a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800255c:	4b46      	ldr	r3, [pc, #280]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e07e      	b.n	800266a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800256c:	4b42      	ldr	r3, [pc, #264]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f023 0203 	bic.w	r2, r3, #3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	493f      	ldr	r1, [pc, #252]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 800257a:	4313      	orrs	r3, r2
 800257c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800257e:	f7fe fef3 	bl	8001368 <HAL_GetTick>
 8002582:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002584:	e00a      	b.n	800259c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002586:	f7fe feef 	bl	8001368 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	f241 3288 	movw	r2, #5000	; 0x1388
 8002594:	4293      	cmp	r3, r2
 8002596:	d901      	bls.n	800259c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e066      	b.n	800266a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259c:	4b36      	ldr	r3, [pc, #216]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 020c 	and.w	r2, r3, #12
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d1eb      	bne.n	8002586 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d008      	beq.n	80025cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ba:	4b2f      	ldr	r3, [pc, #188]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	492c      	ldr	r1, [pc, #176]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025cc:	4b29      	ldr	r3, [pc, #164]	; (8002674 <HAL_RCC_ClockConfig+0x1b0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d210      	bcs.n	80025fc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b26      	ldr	r3, [pc, #152]	; (8002674 <HAL_RCC_ClockConfig+0x1b0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 0207 	bic.w	r2, r3, #7
 80025e2:	4924      	ldr	r1, [pc, #144]	; (8002674 <HAL_RCC_ClockConfig+0x1b0>)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ea:	4b22      	ldr	r3, [pc, #136]	; (8002674 <HAL_RCC_ClockConfig+0x1b0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d001      	beq.n	80025fc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e036      	b.n	800266a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002608:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4918      	ldr	r1, [pc, #96]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002626:	4b14      	ldr	r3, [pc, #80]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4910      	ldr	r1, [pc, #64]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 8002636:	4313      	orrs	r3, r2
 8002638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800263a:	f000 f825 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 800263e:	4601      	mov	r1, r0
 8002640:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	4a0c      	ldr	r2, [pc, #48]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 800264c:	5cd3      	ldrb	r3, [r2, r3]
 800264e:	f003 031f 	and.w	r3, r3, #31
 8002652:	fa21 f303 	lsr.w	r3, r1, r3
 8002656:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800265a:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fe32 	bl	80012c8 <HAL_InitTick>
 8002664:	4603      	mov	r3, r0
 8002666:	72fb      	strb	r3, [r7, #11]

  return status;
 8002668:	7afb      	ldrb	r3, [r7, #11]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40022000 	.word	0x40022000
 8002678:	40021000 	.word	0x40021000
 800267c:	080044f0 	.word	0x080044f0
 8002680:	20000000 	.word	0x20000000
 8002684:	2000003c 	.word	0x2000003c

08002688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002688:	b480      	push	{r7}
 800268a:	b089      	sub	sp, #36	; 0x24
 800268c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	2300      	movs	r3, #0
 8002694:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002696:	4b3d      	ldr	r3, [pc, #244]	; (800278c <HAL_RCC_GetSysClockFreq+0x104>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026a0:	4b3a      	ldr	r3, [pc, #232]	; (800278c <HAL_RCC_GetSysClockFreq+0x104>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_RCC_GetSysClockFreq+0x34>
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	2b0c      	cmp	r3, #12
 80026b4:	d121      	bne.n	80026fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d11e      	bne.n	80026fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026bc:	4b33      	ldr	r3, [pc, #204]	; (800278c <HAL_RCC_GetSysClockFreq+0x104>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d107      	bne.n	80026d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026c8:	4b30      	ldr	r3, [pc, #192]	; (800278c <HAL_RCC_GetSysClockFreq+0x104>)
 80026ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ce:	0a1b      	lsrs	r3, r3, #8
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	61fb      	str	r3, [r7, #28]
 80026d6:	e005      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026d8:	4b2c      	ldr	r3, [pc, #176]	; (800278c <HAL_RCC_GetSysClockFreq+0x104>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026e4:	4a2a      	ldr	r2, [pc, #168]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10d      	bne.n	8002710 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026f8:	e00a      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d102      	bne.n	8002706 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002700:	4b24      	ldr	r3, [pc, #144]	; (8002794 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002702:	61bb      	str	r3, [r7, #24]
 8002704:	e004      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	2b08      	cmp	r3, #8
 800270a:	d101      	bne.n	8002710 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800270c:	4b22      	ldr	r3, [pc, #136]	; (8002798 <HAL_RCC_GetSysClockFreq+0x110>)
 800270e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	2b0c      	cmp	r3, #12
 8002714:	d133      	bne.n	800277e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002716:	4b1d      	ldr	r3, [pc, #116]	; (800278c <HAL_RCC_GetSysClockFreq+0x104>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d002      	beq.n	800272c <HAL_RCC_GetSysClockFreq+0xa4>
 8002726:	2b03      	cmp	r3, #3
 8002728:	d003      	beq.n	8002732 <HAL_RCC_GetSysClockFreq+0xaa>
 800272a:	e005      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800272c:	4b19      	ldr	r3, [pc, #100]	; (8002794 <HAL_RCC_GetSysClockFreq+0x10c>)
 800272e:	617b      	str	r3, [r7, #20]
      break;
 8002730:	e005      	b.n	800273e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002732:	4b19      	ldr	r3, [pc, #100]	; (8002798 <HAL_RCC_GetSysClockFreq+0x110>)
 8002734:	617b      	str	r3, [r7, #20]
      break;
 8002736:	e002      	b.n	800273e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	617b      	str	r3, [r7, #20]
      break;
 800273c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800273e:	4b13      	ldr	r3, [pc, #76]	; (800278c <HAL_RCC_GetSysClockFreq+0x104>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	3301      	adds	r3, #1
 800274a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800274c:	4b0f      	ldr	r3, [pc, #60]	; (800278c <HAL_RCC_GetSysClockFreq+0x104>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	0a1b      	lsrs	r3, r3, #8
 8002752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	fb02 f203 	mul.w	r2, r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002762:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002764:	4b09      	ldr	r3, [pc, #36]	; (800278c <HAL_RCC_GetSysClockFreq+0x104>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	0e5b      	lsrs	r3, r3, #25
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	3301      	adds	r3, #1
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	fbb2 f3f3 	udiv	r3, r2, r3
 800277c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800277e:	69bb      	ldr	r3, [r7, #24]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3724      	adds	r7, #36	; 0x24
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	40021000 	.word	0x40021000
 8002790:	08004508 	.word	0x08004508
 8002794:	00f42400 	.word	0x00f42400
 8002798:	007a1200 	.word	0x007a1200

0800279c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a0:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027a2:	681b      	ldr	r3, [r3, #0]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	20000000 	.word	0x20000000

080027b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027b8:	f7ff fff0 	bl	800279c <HAL_RCC_GetHCLKFreq>
 80027bc:	4601      	mov	r1, r0
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	0a1b      	lsrs	r3, r3, #8
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	4a04      	ldr	r2, [pc, #16]	; (80027dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80027ca:	5cd3      	ldrb	r3, [r2, r3]
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40021000 	.word	0x40021000
 80027dc:	08004500 	.word	0x08004500

080027e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027e4:	f7ff ffda 	bl	800279c <HAL_RCC_GetHCLKFreq>
 80027e8:	4601      	mov	r1, r0
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	0adb      	lsrs	r3, r3, #11
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	4a04      	ldr	r2, [pc, #16]	; (8002808 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027f6:	5cd3      	ldrb	r3, [r2, r3]
 80027f8:	f003 031f 	and.w	r3, r3, #31
 80027fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002800:	4618      	mov	r0, r3
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	08004500 	.word	0x08004500

0800280c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002814:	2300      	movs	r3, #0
 8002816:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002818:	4b2a      	ldr	r3, [pc, #168]	; (80028c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800281a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002824:	f7ff fa04 	bl	8001c30 <HAL_PWREx_GetVoltageRange>
 8002828:	6178      	str	r0, [r7, #20]
 800282a:	e014      	b.n	8002856 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800282c:	4b25      	ldr	r3, [pc, #148]	; (80028c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800282e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002830:	4a24      	ldr	r2, [pc, #144]	; (80028c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002836:	6593      	str	r3, [r2, #88]	; 0x58
 8002838:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800283a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002844:	f7ff f9f4 	bl	8001c30 <HAL_PWREx_GetVoltageRange>
 8002848:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800284a:	4b1e      	ldr	r3, [pc, #120]	; (80028c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800284c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284e:	4a1d      	ldr	r2, [pc, #116]	; (80028c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002854:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800285c:	d10b      	bne.n	8002876 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b80      	cmp	r3, #128	; 0x80
 8002862:	d919      	bls.n	8002898 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2ba0      	cmp	r3, #160	; 0xa0
 8002868:	d902      	bls.n	8002870 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800286a:	2302      	movs	r3, #2
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	e013      	b.n	8002898 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002870:	2301      	movs	r3, #1
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	e010      	b.n	8002898 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b80      	cmp	r3, #128	; 0x80
 800287a:	d902      	bls.n	8002882 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800287c:	2303      	movs	r3, #3
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	e00a      	b.n	8002898 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b80      	cmp	r3, #128	; 0x80
 8002886:	d102      	bne.n	800288e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002888:	2302      	movs	r3, #2
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	e004      	b.n	8002898 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b70      	cmp	r3, #112	; 0x70
 8002892:	d101      	bne.n	8002898 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002894:	2301      	movs	r3, #1
 8002896:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f023 0207 	bic.w	r2, r3, #7
 80028a0:	4909      	ldr	r1, [pc, #36]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028a8:	4b07      	ldr	r3, [pc, #28]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d001      	beq.n	80028ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40022000 	.word	0x40022000

080028cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028d4:	2300      	movs	r3, #0
 80028d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028d8:	2300      	movs	r3, #0
 80028da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d03f      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028f0:	d01c      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x60>
 80028f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028f6:	d802      	bhi.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x32>
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00e      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80028fc:	e01f      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80028fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002902:	d003      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002904:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002908:	d01c      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800290a:	e018      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800290c:	4b85      	ldr	r3, [pc, #532]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4a84      	ldr	r2, [pc, #528]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002916:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002918:	e015      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3304      	adds	r3, #4
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f000 fab9 	bl	8002e98 <RCCEx_PLLSAI1_Config>
 8002926:	4603      	mov	r3, r0
 8002928:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800292a:	e00c      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3320      	adds	r3, #32
 8002930:	2100      	movs	r1, #0
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fba0 	bl	8003078 <RCCEx_PLLSAI2_Config>
 8002938:	4603      	mov	r3, r0
 800293a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800293c:	e003      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	74fb      	strb	r3, [r7, #19]
      break;
 8002942:	e000      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002944:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002946:	7cfb      	ldrb	r3, [r7, #19]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10b      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800294c:	4b75      	ldr	r3, [pc, #468]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800295a:	4972      	ldr	r1, [pc, #456]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002962:	e001      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002964:	7cfb      	ldrb	r3, [r7, #19]
 8002966:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d03f      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800297c:	d01c      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800297e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002982:	d802      	bhi.n	800298a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00e      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002988:	e01f      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800298a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800298e:	d003      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002990:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002994:	d01c      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002996:	e018      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002998:	4b62      	ldr	r3, [pc, #392]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	4a61      	ldr	r2, [pc, #388]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800299e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029a4:	e015      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3304      	adds	r3, #4
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 fa73 	bl	8002e98 <RCCEx_PLLSAI1_Config>
 80029b2:	4603      	mov	r3, r0
 80029b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029b6:	e00c      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3320      	adds	r3, #32
 80029bc:	2100      	movs	r1, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 fb5a 	bl	8003078 <RCCEx_PLLSAI2_Config>
 80029c4:	4603      	mov	r3, r0
 80029c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029c8:	e003      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	74fb      	strb	r3, [r7, #19]
      break;
 80029ce:	e000      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80029d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029d2:	7cfb      	ldrb	r3, [r7, #19]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10b      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029d8:	4b52      	ldr	r3, [pc, #328]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029e6:	494f      	ldr	r1, [pc, #316]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029ee:	e001      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029f0:	7cfb      	ldrb	r3, [r7, #19]
 80029f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 80a0 	beq.w	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a02:	2300      	movs	r3, #0
 8002a04:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a06:	4b47      	ldr	r3, [pc, #284]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002a16:	2300      	movs	r3, #0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00d      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a1c:	4b41      	ldr	r3, [pc, #260]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a20:	4a40      	ldr	r2, [pc, #256]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a26:	6593      	str	r3, [r2, #88]	; 0x58
 8002a28:	4b3e      	ldr	r3, [pc, #248]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a34:	2301      	movs	r3, #1
 8002a36:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a38:	4b3b      	ldr	r3, [pc, #236]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a3a      	ldr	r2, [pc, #232]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a44:	f7fe fc90 	bl	8001368 <HAL_GetTick>
 8002a48:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a4a:	e009      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4c:	f7fe fc8c 	bl	8001368 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d902      	bls.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	74fb      	strb	r3, [r7, #19]
        break;
 8002a5e:	e005      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a60:	4b31      	ldr	r3, [pc, #196]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0ef      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002a6c:	7cfb      	ldrb	r3, [r7, #19]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d15c      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a72:	4b2c      	ldr	r3, [pc, #176]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d01f      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d019      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a90:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a9c:	4b21      	ldr	r3, [pc, #132]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa2:	4a20      	ldr	r2, [pc, #128]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002aac:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab2:	4a1c      	ldr	r2, [pc, #112]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002abc:	4a19      	ldr	r2, [pc, #100]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d016      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ace:	f7fe fc4b 	bl	8001368 <HAL_GetTick>
 8002ad2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ad4:	e00b      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad6:	f7fe fc47 	bl	8001368 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d902      	bls.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	74fb      	strb	r3, [r7, #19]
            break;
 8002aec:	e006      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aee:	4b0d      	ldr	r3, [pc, #52]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0ec      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002afc:	7cfb      	ldrb	r3, [r7, #19]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10c      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b02:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b12:	4904      	ldr	r1, [pc, #16]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b1a:	e009      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b1c:	7cfb      	ldrb	r3, [r7, #19]
 8002b1e:	74bb      	strb	r3, [r7, #18]
 8002b20:	e006      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002b22:	bf00      	nop
 8002b24:	40021000 	.word	0x40021000
 8002b28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b2c:	7cfb      	ldrb	r3, [r7, #19]
 8002b2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b30:	7c7b      	ldrb	r3, [r7, #17]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d105      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b36:	4b9e      	ldr	r3, [pc, #632]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3a:	4a9d      	ldr	r2, [pc, #628]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b4e:	4b98      	ldr	r3, [pc, #608]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b54:	f023 0203 	bic.w	r2, r3, #3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5c:	4994      	ldr	r1, [pc, #592]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00a      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b70:	4b8f      	ldr	r3, [pc, #572]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b76:	f023 020c 	bic.w	r2, r3, #12
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7e:	498c      	ldr	r1, [pc, #560]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00a      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b92:	4b87      	ldr	r3, [pc, #540]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	4983      	ldr	r1, [pc, #524]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00a      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bb4:	4b7e      	ldr	r3, [pc, #504]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc2:	497b      	ldr	r1, [pc, #492]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bd6:	4b76      	ldr	r3, [pc, #472]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be4:	4972      	ldr	r1, [pc, #456]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0320 	and.w	r3, r3, #32
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00a      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bf8:	4b6d      	ldr	r3, [pc, #436]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c06:	496a      	ldr	r1, [pc, #424]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c1a:	4b65      	ldr	r3, [pc, #404]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c28:	4961      	ldr	r1, [pc, #388]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00a      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c3c:	4b5c      	ldr	r3, [pc, #368]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c4a:	4959      	ldr	r1, [pc, #356]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c5e:	4b54      	ldr	r3, [pc, #336]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c6c:	4950      	ldr	r1, [pc, #320]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c80:	4b4b      	ldr	r3, [pc, #300]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8e:	4948      	ldr	r1, [pc, #288]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ca2:	4b43      	ldr	r3, [pc, #268]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb0:	493f      	ldr	r1, [pc, #252]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d028      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cc4:	4b3a      	ldr	r3, [pc, #232]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cd2:	4937      	ldr	r1, [pc, #220]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ce2:	d106      	bne.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ce4:	4b32      	ldr	r3, [pc, #200]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	4a31      	ldr	r2, [pc, #196]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cee:	60d3      	str	r3, [r2, #12]
 8002cf0:	e011      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cfa:	d10c      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3304      	adds	r3, #4
 8002d00:	2101      	movs	r1, #1
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 f8c8 	bl	8002e98 <RCCEx_PLLSAI1_Config>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d0c:	7cfb      	ldrb	r3, [r7, #19]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002d12:	7cfb      	ldrb	r3, [r7, #19]
 8002d14:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d028      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d22:	4b23      	ldr	r3, [pc, #140]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	491f      	ldr	r1, [pc, #124]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d40:	d106      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d42:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	4a1a      	ldr	r2, [pc, #104]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d4c:	60d3      	str	r3, [r2, #12]
 8002d4e:	e011      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d58:	d10c      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	2101      	movs	r1, #1
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 f899 	bl	8002e98 <RCCEx_PLLSAI1_Config>
 8002d66:	4603      	mov	r3, r0
 8002d68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d6a:	7cfb      	ldrb	r3, [r7, #19]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002d70:	7cfb      	ldrb	r3, [r7, #19]
 8002d72:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d02b      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d8e:	4908      	ldr	r1, [pc, #32]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d9e:	d109      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002da0:	4b03      	ldr	r3, [pc, #12]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4a02      	ldr	r2, [pc, #8]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002da6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002daa:	60d3      	str	r3, [r2, #12]
 8002dac:	e014      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002dae:	bf00      	nop
 8002db0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 f867 	bl	8002e98 <RCCEx_PLLSAI1_Config>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dce:	7cfb      	ldrb	r3, [r7, #19]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002dd4:	7cfb      	ldrb	r3, [r7, #19]
 8002dd6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d02f      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002de4:	4b2b      	ldr	r3, [pc, #172]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002df2:	4928      	ldr	r1, [pc, #160]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e02:	d10d      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3304      	adds	r3, #4
 8002e08:	2102      	movs	r1, #2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 f844 	bl	8002e98 <RCCEx_PLLSAI1_Config>
 8002e10:	4603      	mov	r3, r0
 8002e12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e14:	7cfb      	ldrb	r3, [r7, #19]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d014      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002e1a:	7cfb      	ldrb	r3, [r7, #19]
 8002e1c:	74bb      	strb	r3, [r7, #18]
 8002e1e:	e011      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e28:	d10c      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3320      	adds	r3, #32
 8002e2e:	2102      	movs	r1, #2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 f921 	bl	8003078 <RCCEx_PLLSAI2_Config>
 8002e36:	4603      	mov	r3, r0
 8002e38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e3a:	7cfb      	ldrb	r3, [r7, #19]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002e40:	7cfb      	ldrb	r3, [r7, #19]
 8002e42:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e50:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e56:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e5e:	490d      	ldr	r1, [pc, #52]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00b      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e72:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e82:	4904      	ldr	r1, [pc, #16]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e8a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40021000 	.word	0x40021000

08002e98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ea6:	4b73      	ldr	r3, [pc, #460]	; (8003074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d018      	beq.n	8002ee4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002eb2:	4b70      	ldr	r3, [pc, #448]	; (8003074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f003 0203 	and.w	r2, r3, #3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d10d      	bne.n	8002ede <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d009      	beq.n	8002ede <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002eca:	4b6a      	ldr	r3, [pc, #424]	; (8003074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	091b      	lsrs	r3, r3, #4
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	1c5a      	adds	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
       ||
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d044      	beq.n	8002f68 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	73fb      	strb	r3, [r7, #15]
 8002ee2:	e041      	b.n	8002f68 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d00c      	beq.n	8002f06 <RCCEx_PLLSAI1_Config+0x6e>
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	d013      	beq.n	8002f18 <RCCEx_PLLSAI1_Config+0x80>
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d120      	bne.n	8002f36 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ef4:	4b5f      	ldr	r3, [pc, #380]	; (8003074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d11d      	bne.n	8002f3c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f04:	e01a      	b.n	8002f3c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f06:	4b5b      	ldr	r3, [pc, #364]	; (8003074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d116      	bne.n	8002f40 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f16:	e013      	b.n	8002f40 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f18:	4b56      	ldr	r3, [pc, #344]	; (8003074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10f      	bne.n	8002f44 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f24:	4b53      	ldr	r3, [pc, #332]	; (8003074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d109      	bne.n	8002f44 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f34:	e006      	b.n	8002f44 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	73fb      	strb	r3, [r7, #15]
      break;
 8002f3a:	e004      	b.n	8002f46 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002f3c:	bf00      	nop
 8002f3e:	e002      	b.n	8002f46 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002f40:	bf00      	nop
 8002f42:	e000      	b.n	8002f46 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002f44:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10d      	bne.n	8002f68 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f4c:	4b49      	ldr	r3, [pc, #292]	; (8003074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6819      	ldr	r1, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	430b      	orrs	r3, r1
 8002f62:	4944      	ldr	r1, [pc, #272]	; (8003074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d17d      	bne.n	800306a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f6e:	4b41      	ldr	r3, [pc, #260]	; (8003074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a40      	ldr	r2, [pc, #256]	; (8003074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f74:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f7a:	f7fe f9f5 	bl	8001368 <HAL_GetTick>
 8002f7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f80:	e009      	b.n	8002f96 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f82:	f7fe f9f1 	bl	8001368 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d902      	bls.n	8002f96 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	73fb      	strb	r3, [r7, #15]
        break;
 8002f94:	e005      	b.n	8002fa2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f96:	4b37      	ldr	r3, [pc, #220]	; (8003074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1ef      	bne.n	8002f82 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d160      	bne.n	800306a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d111      	bne.n	8002fd2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fae:	4b31      	ldr	r3, [pc, #196]	; (8003074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6892      	ldr	r2, [r2, #8]
 8002fbe:	0211      	lsls	r1, r2, #8
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	68d2      	ldr	r2, [r2, #12]
 8002fc4:	0912      	lsrs	r2, r2, #4
 8002fc6:	0452      	lsls	r2, r2, #17
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	492a      	ldr	r1, [pc, #168]	; (8003074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	610b      	str	r3, [r1, #16]
 8002fd0:	e027      	b.n	8003022 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d112      	bne.n	8002ffe <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fd8:	4b26      	ldr	r3, [pc, #152]	; (8003074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002fe0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6892      	ldr	r2, [r2, #8]
 8002fe8:	0211      	lsls	r1, r2, #8
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6912      	ldr	r2, [r2, #16]
 8002fee:	0852      	lsrs	r2, r2, #1
 8002ff0:	3a01      	subs	r2, #1
 8002ff2:	0552      	lsls	r2, r2, #21
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	491f      	ldr	r1, [pc, #124]	; (8003074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	610b      	str	r3, [r1, #16]
 8002ffc:	e011      	b.n	8003022 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ffe:	4b1d      	ldr	r3, [pc, #116]	; (8003074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003006:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6892      	ldr	r2, [r2, #8]
 800300e:	0211      	lsls	r1, r2, #8
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6952      	ldr	r2, [r2, #20]
 8003014:	0852      	lsrs	r2, r2, #1
 8003016:	3a01      	subs	r2, #1
 8003018:	0652      	lsls	r2, r2, #25
 800301a:	430a      	orrs	r2, r1
 800301c:	4915      	ldr	r1, [pc, #84]	; (8003074 <RCCEx_PLLSAI1_Config+0x1dc>)
 800301e:	4313      	orrs	r3, r2
 8003020:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003022:	4b14      	ldr	r3, [pc, #80]	; (8003074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a13      	ldr	r2, [pc, #76]	; (8003074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003028:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800302c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302e:	f7fe f99b 	bl	8001368 <HAL_GetTick>
 8003032:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003034:	e009      	b.n	800304a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003036:	f7fe f997 	bl	8001368 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d902      	bls.n	800304a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	73fb      	strb	r3, [r7, #15]
          break;
 8003048:	e005      	b.n	8003056 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <RCCEx_PLLSAI1_Config+0x1dc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0ef      	beq.n	8003036 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d106      	bne.n	800306a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <RCCEx_PLLSAI1_Config+0x1dc>)
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	4903      	ldr	r1, [pc, #12]	; (8003074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003066:	4313      	orrs	r3, r2
 8003068:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800306a:	7bfb      	ldrb	r3, [r7, #15]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40021000 	.word	0x40021000

08003078 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003086:	4b68      	ldr	r3, [pc, #416]	; (8003228 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d018      	beq.n	80030c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003092:	4b65      	ldr	r3, [pc, #404]	; (8003228 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f003 0203 	and.w	r2, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d10d      	bne.n	80030be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
       ||
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d009      	beq.n	80030be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80030aa:	4b5f      	ldr	r3, [pc, #380]	; (8003228 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	091b      	lsrs	r3, r3, #4
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
       ||
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d044      	beq.n	8003148 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	73fb      	strb	r3, [r7, #15]
 80030c2:	e041      	b.n	8003148 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d00c      	beq.n	80030e6 <RCCEx_PLLSAI2_Config+0x6e>
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d013      	beq.n	80030f8 <RCCEx_PLLSAI2_Config+0x80>
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d120      	bne.n	8003116 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030d4:	4b54      	ldr	r3, [pc, #336]	; (8003228 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d11d      	bne.n	800311c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030e4:	e01a      	b.n	800311c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030e6:	4b50      	ldr	r3, [pc, #320]	; (8003228 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d116      	bne.n	8003120 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f6:	e013      	b.n	8003120 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030f8:	4b4b      	ldr	r3, [pc, #300]	; (8003228 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10f      	bne.n	8003124 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003104:	4b48      	ldr	r3, [pc, #288]	; (8003228 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d109      	bne.n	8003124 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003114:	e006      	b.n	8003124 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	73fb      	strb	r3, [r7, #15]
      break;
 800311a:	e004      	b.n	8003126 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800311c:	bf00      	nop
 800311e:	e002      	b.n	8003126 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003120:	bf00      	nop
 8003122:	e000      	b.n	8003126 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003124:	bf00      	nop
    }

    if(status == HAL_OK)
 8003126:	7bfb      	ldrb	r3, [r7, #15]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10d      	bne.n	8003148 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800312c:	4b3e      	ldr	r3, [pc, #248]	; (8003228 <RCCEx_PLLSAI2_Config+0x1b0>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6819      	ldr	r1, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	3b01      	subs	r3, #1
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	430b      	orrs	r3, r1
 8003142:	4939      	ldr	r1, [pc, #228]	; (8003228 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003144:	4313      	orrs	r3, r2
 8003146:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d167      	bne.n	800321e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800314e:	4b36      	ldr	r3, [pc, #216]	; (8003228 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a35      	ldr	r2, [pc, #212]	; (8003228 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800315a:	f7fe f905 	bl	8001368 <HAL_GetTick>
 800315e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003160:	e009      	b.n	8003176 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003162:	f7fe f901 	bl	8001368 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d902      	bls.n	8003176 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	73fb      	strb	r3, [r7, #15]
        break;
 8003174:	e005      	b.n	8003182 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003176:	4b2c      	ldr	r3, [pc, #176]	; (8003228 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1ef      	bne.n	8003162 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d14a      	bne.n	800321e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d111      	bne.n	80031b2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800318e:	4b26      	ldr	r3, [pc, #152]	; (8003228 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6892      	ldr	r2, [r2, #8]
 800319e:	0211      	lsls	r1, r2, #8
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	68d2      	ldr	r2, [r2, #12]
 80031a4:	0912      	lsrs	r2, r2, #4
 80031a6:	0452      	lsls	r2, r2, #17
 80031a8:	430a      	orrs	r2, r1
 80031aa:	491f      	ldr	r1, [pc, #124]	; (8003228 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	614b      	str	r3, [r1, #20]
 80031b0:	e011      	b.n	80031d6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031b2:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6892      	ldr	r2, [r2, #8]
 80031c2:	0211      	lsls	r1, r2, #8
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6912      	ldr	r2, [r2, #16]
 80031c8:	0852      	lsrs	r2, r2, #1
 80031ca:	3a01      	subs	r2, #1
 80031cc:	0652      	lsls	r2, r2, #25
 80031ce:	430a      	orrs	r2, r1
 80031d0:	4915      	ldr	r1, [pc, #84]	; (8003228 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031d6:	4b14      	ldr	r3, [pc, #80]	; (8003228 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a13      	ldr	r2, [pc, #76]	; (8003228 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e2:	f7fe f8c1 	bl	8001368 <HAL_GetTick>
 80031e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031e8:	e009      	b.n	80031fe <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031ea:	f7fe f8bd 	bl	8001368 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d902      	bls.n	80031fe <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	73fb      	strb	r3, [r7, #15]
          break;
 80031fc:	e005      	b.n	800320a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031fe:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0ef      	beq.n	80031ea <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d106      	bne.n	800321e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003212:	695a      	ldr	r2, [r3, #20]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	4903      	ldr	r1, [pc, #12]	; (8003228 <RCCEx_PLLSAI2_Config+0x1b0>)
 800321a:	4313      	orrs	r3, r2
 800321c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800321e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40021000 	.word	0x40021000

0800322c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e040      	b.n	80032c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003242:	2b00      	cmp	r3, #0
 8003244:	d106      	bne.n	8003254 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7fd fbbe 	bl	80009d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2224      	movs	r2, #36	; 0x24
 8003258:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0201 	bic.w	r2, r2, #1
 8003268:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 faf2 	bl	8003854 <UART_SetConfig>
 8003270:	4603      	mov	r3, r0
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e022      	b.n	80032c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	2b00      	cmp	r3, #0
 8003280:	d002      	beq.n	8003288 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 fd70 	bl	8003d68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003296:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0201 	orr.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fdf7 	bl	8003eac <UART_CheckIdleState>
 80032be:	4603      	mov	r3, r0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e027      	b.n	800332a <HAL_UART_DeInit+0x62>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2224      	movs	r2, #36	; 0x24
 80032de:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0201 	bic.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2200      	movs	r2, #0
 80032fe:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2200      	movs	r2, #0
 8003306:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7fd fbe7 	bl	8000adc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b08a      	sub	sp, #40	; 0x28
 8003336:	af02      	add	r7, sp, #8
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	603b      	str	r3, [r7, #0]
 800333e:	4613      	mov	r3, r2
 8003340:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003346:	2b20      	cmp	r3, #32
 8003348:	f040 8081 	bne.w	800344e <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <HAL_UART_Transmit+0x26>
 8003352:	88fb      	ldrh	r3, [r7, #6]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e079      	b.n	8003450 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_UART_Transmit+0x38>
 8003366:	2302      	movs	r3, #2
 8003368:	e072      	b.n	8003450 <HAL_UART_Transmit+0x11e>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2221      	movs	r2, #33	; 0x21
 800337c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800337e:	f7fd fff3 	bl	8001368 <HAL_GetTick>
 8003382:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	88fa      	ldrh	r2, [r7, #6]
 8003388:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	88fa      	ldrh	r2, [r7, #6]
 8003390:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800339c:	d108      	bne.n	80033b0 <HAL_UART_Transmit+0x7e>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d104      	bne.n	80033b0 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	61bb      	str	r3, [r7, #24]
 80033ae:	e003      	b.n	80033b8 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80033c0:	e02d      	b.n	800341e <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2200      	movs	r2, #0
 80033ca:	2180      	movs	r1, #128	; 0x80
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 fdb2 	bl	8003f36 <UART_WaitOnFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e039      	b.n	8003450 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10b      	bne.n	80033fa <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	881a      	ldrh	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033ee:	b292      	uxth	r2, r2
 80033f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	3302      	adds	r3, #2
 80033f6:	61bb      	str	r3, [r7, #24]
 80033f8:	e008      	b.n	800340c <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	781a      	ldrb	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	b292      	uxth	r2, r2
 8003404:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3301      	adds	r3, #1
 800340a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003424:	b29b      	uxth	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1cb      	bne.n	80033c2 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2200      	movs	r2, #0
 8003432:	2140      	movs	r1, #64	; 0x40
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 fd7e 	bl	8003f36 <UART_WaitOnFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e005      	b.n	8003450 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2220      	movs	r2, #32
 8003448:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	e000      	b.n	8003450 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800344e:	2302      	movs	r3, #2
  }
}
 8003450:	4618      	mov	r0, r3
 8003452:	3720      	adds	r7, #32
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	4613      	mov	r3, r2
 8003464:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800346a:	2b20      	cmp	r3, #32
 800346c:	f040 808a 	bne.w	8003584 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <HAL_UART_Receive_IT+0x24>
 8003476:	88fb      	ldrh	r3, [r7, #6]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e082      	b.n	8003586 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003486:	2b01      	cmp	r3, #1
 8003488:	d101      	bne.n	800348e <HAL_UART_Receive_IT+0x36>
 800348a:	2302      	movs	r3, #2
 800348c:	e07b      	b.n	8003586 <HAL_UART_Receive_IT+0x12e>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	88fa      	ldrh	r2, [r7, #6]
 80034a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	88fa      	ldrh	r2, [r7, #6]
 80034a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ba:	d10e      	bne.n	80034da <HAL_UART_Receive_IT+0x82>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d105      	bne.n	80034d0 <HAL_UART_Receive_IT+0x78>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80034ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034ce:	e02d      	b.n	800352c <HAL_UART_Receive_IT+0xd4>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	22ff      	movs	r2, #255	; 0xff
 80034d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034d8:	e028      	b.n	800352c <HAL_UART_Receive_IT+0xd4>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10d      	bne.n	80034fe <HAL_UART_Receive_IT+0xa6>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d104      	bne.n	80034f4 <HAL_UART_Receive_IT+0x9c>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	22ff      	movs	r2, #255	; 0xff
 80034ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034f2:	e01b      	b.n	800352c <HAL_UART_Receive_IT+0xd4>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	227f      	movs	r2, #127	; 0x7f
 80034f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034fc:	e016      	b.n	800352c <HAL_UART_Receive_IT+0xd4>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003506:	d10d      	bne.n	8003524 <HAL_UART_Receive_IT+0xcc>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d104      	bne.n	800351a <HAL_UART_Receive_IT+0xc2>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	227f      	movs	r2, #127	; 0x7f
 8003514:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003518:	e008      	b.n	800352c <HAL_UART_Receive_IT+0xd4>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	223f      	movs	r2, #63	; 0x3f
 800351e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003522:	e003      	b.n	800352c <HAL_UART_Receive_IT+0xd4>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2222      	movs	r2, #34	; 0x22
 8003536:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0201 	orr.w	r2, r2, #1
 8003546:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003550:	d107      	bne.n	8003562 <HAL_UART_Receive_IT+0x10a>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d103      	bne.n	8003562 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4a0d      	ldr	r2, [pc, #52]	; (8003594 <HAL_UART_Receive_IT+0x13c>)
 800355e:	661a      	str	r2, [r3, #96]	; 0x60
 8003560:	e002      	b.n	8003568 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4a0c      	ldr	r2, [pc, #48]	; (8003598 <HAL_UART_Receive_IT+0x140>)
 8003566:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800357e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	e000      	b.n	8003586 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8003584:	2302      	movs	r3, #2
  }
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	08004175 	.word	0x08004175
 8003598:	080040cb 	.word	0x080040cb

0800359c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	f640 030f 	movw	r3, #2063	; 0x80f
 80035c2:	4013      	ands	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d113      	bne.n	80035f4 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00e      	beq.n	80035f4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	f003 0320 	and.w	r3, r3, #32
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d009      	beq.n	80035f4 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 8114 	beq.w	8003812 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	4798      	blx	r3
      }
      return;
 80035f2:	e10e      	b.n	8003812 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 80d6 	beq.w	80037a8 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d105      	bne.n	8003612 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4b86      	ldr	r3, [pc, #536]	; (8003824 <HAL_UART_IRQHandler+0x288>)
 800360a:	4013      	ands	r3, r2
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 80cb 	beq.w	80037a8 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00e      	beq.n	800363a <HAL_UART_IRQHandler+0x9e>
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d009      	beq.n	800363a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2201      	movs	r2, #1
 800362c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003632:	f043 0201 	orr.w	r2, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00e      	beq.n	8003662 <HAL_UART_IRQHandler+0xc6>
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d009      	beq.n	8003662 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2202      	movs	r2, #2
 8003654:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800365a:	f043 0204 	orr.w	r2, r3, #4
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00e      	beq.n	800368a <HAL_UART_IRQHandler+0xee>
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d009      	beq.n	800368a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2204      	movs	r2, #4
 800367c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003682:	f043 0202 	orr.w	r2, r3, #2
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d013      	beq.n	80036bc <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	f003 0320 	and.w	r3, r3, #32
 800369a:	2b00      	cmp	r3, #0
 800369c:	d104      	bne.n	80036a8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d009      	beq.n	80036bc <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2208      	movs	r2, #8
 80036ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036b4:	f043 0208 	orr.w	r2, r3, #8
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00f      	beq.n	80036e6 <HAL_UART_IRQHandler+0x14a>
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00a      	beq.n	80036e6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036de:	f043 0220 	orr.w	r2, r3, #32
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 8093 	beq.w	8003816 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00c      	beq.n	8003714 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b00      	cmp	r3, #0
 8003702:	d007      	beq.n	8003714 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003718:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003724:	2b40      	cmp	r3, #64	; 0x40
 8003726:	d004      	beq.n	8003732 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800372e:	2b00      	cmp	r3, #0
 8003730:	d031      	beq.n	8003796 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fc7a 	bl	800402c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003742:	2b40      	cmp	r3, #64	; 0x40
 8003744:	d123      	bne.n	800378e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003754:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800375a:	2b00      	cmp	r3, #0
 800375c:	d013      	beq.n	8003786 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003762:	4a31      	ldr	r2, [pc, #196]	; (8003828 <HAL_UART_IRQHandler+0x28c>)
 8003764:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800376a:	4618      	mov	r0, r3
 800376c:	f7fd ff6b 	bl	8001646 <HAL_DMA_Abort_IT>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d016      	beq.n	80037a4 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800377a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003780:	4610      	mov	r0, r2
 8003782:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003784:	e00e      	b.n	80037a4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f85a 	bl	8003840 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800378c:	e00a      	b.n	80037a4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f856 	bl	8003840 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003794:	e006      	b.n	80037a4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f852 	bl	8003840 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80037a2:	e038      	b.n	8003816 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a4:	bf00      	nop
    return;
 80037a6:	e036      	b.n	8003816 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00d      	beq.n	80037ce <HAL_UART_IRQHandler+0x232>
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d008      	beq.n	80037ce <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80037c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fd29 	bl	800421e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037cc:	e026      	b.n	800381c <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00d      	beq.n	80037f4 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d008      	beq.n	80037f4 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d017      	beq.n	800381a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	4798      	blx	r3
    }
    return;
 80037f2:	e012      	b.n	800381a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00e      	beq.n	800381c <HAL_UART_IRQHandler+0x280>
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003804:	2b00      	cmp	r3, #0
 8003806:	d009      	beq.n	800381c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 fc45 	bl	8004098 <UART_EndTransmit_IT>
    return;
 800380e:	bf00      	nop
 8003810:	e004      	b.n	800381c <HAL_UART_IRQHandler+0x280>
      return;
 8003812:	bf00      	nop
 8003814:	e002      	b.n	800381c <HAL_UART_IRQHandler+0x280>
    return;
 8003816:	bf00      	nop
 8003818:	e000      	b.n	800381c <HAL_UART_IRQHandler+0x280>
    return;
 800381a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800381c:	3720      	adds	r7, #32
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	04000120 	.word	0x04000120
 8003828:	0800406d 	.word	0x0800406d

0800382c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003854:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003858:	b088      	sub	sp, #32
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	4313      	orrs	r3, r2
 8003878:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	4bac      	ldr	r3, [pc, #688]	; (8003b34 <UART_SetConfig+0x2e0>)
 8003882:	4013      	ands	r3, r2
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	69f9      	ldr	r1, [r7, #28]
 800388a:	430b      	orrs	r3, r1
 800388c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4aa2      	ldr	r2, [pc, #648]	; (8003b38 <UART_SetConfig+0x2e4>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d004      	beq.n	80038be <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	69fa      	ldr	r2, [r7, #28]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a99      	ldr	r2, [pc, #612]	; (8003b3c <UART_SetConfig+0x2e8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d121      	bne.n	8003920 <UART_SetConfig+0xcc>
 80038dc:	4b98      	ldr	r3, [pc, #608]	; (8003b40 <UART_SetConfig+0x2ec>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d816      	bhi.n	8003918 <UART_SetConfig+0xc4>
 80038ea:	a201      	add	r2, pc, #4	; (adr r2, 80038f0 <UART_SetConfig+0x9c>)
 80038ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f0:	08003901 	.word	0x08003901
 80038f4:	0800390d 	.word	0x0800390d
 80038f8:	08003907 	.word	0x08003907
 80038fc:	08003913 	.word	0x08003913
 8003900:	2301      	movs	r3, #1
 8003902:	76fb      	strb	r3, [r7, #27]
 8003904:	e0e8      	b.n	8003ad8 <UART_SetConfig+0x284>
 8003906:	2302      	movs	r3, #2
 8003908:	76fb      	strb	r3, [r7, #27]
 800390a:	e0e5      	b.n	8003ad8 <UART_SetConfig+0x284>
 800390c:	2304      	movs	r3, #4
 800390e:	76fb      	strb	r3, [r7, #27]
 8003910:	e0e2      	b.n	8003ad8 <UART_SetConfig+0x284>
 8003912:	2308      	movs	r3, #8
 8003914:	76fb      	strb	r3, [r7, #27]
 8003916:	e0df      	b.n	8003ad8 <UART_SetConfig+0x284>
 8003918:	2310      	movs	r3, #16
 800391a:	76fb      	strb	r3, [r7, #27]
 800391c:	bf00      	nop
 800391e:	e0db      	b.n	8003ad8 <UART_SetConfig+0x284>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a87      	ldr	r2, [pc, #540]	; (8003b44 <UART_SetConfig+0x2f0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d134      	bne.n	8003994 <UART_SetConfig+0x140>
 800392a:	4b85      	ldr	r3, [pc, #532]	; (8003b40 <UART_SetConfig+0x2ec>)
 800392c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003930:	f003 030c 	and.w	r3, r3, #12
 8003934:	2b0c      	cmp	r3, #12
 8003936:	d829      	bhi.n	800398c <UART_SetConfig+0x138>
 8003938:	a201      	add	r2, pc, #4	; (adr r2, 8003940 <UART_SetConfig+0xec>)
 800393a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393e:	bf00      	nop
 8003940:	08003975 	.word	0x08003975
 8003944:	0800398d 	.word	0x0800398d
 8003948:	0800398d 	.word	0x0800398d
 800394c:	0800398d 	.word	0x0800398d
 8003950:	08003981 	.word	0x08003981
 8003954:	0800398d 	.word	0x0800398d
 8003958:	0800398d 	.word	0x0800398d
 800395c:	0800398d 	.word	0x0800398d
 8003960:	0800397b 	.word	0x0800397b
 8003964:	0800398d 	.word	0x0800398d
 8003968:	0800398d 	.word	0x0800398d
 800396c:	0800398d 	.word	0x0800398d
 8003970:	08003987 	.word	0x08003987
 8003974:	2300      	movs	r3, #0
 8003976:	76fb      	strb	r3, [r7, #27]
 8003978:	e0ae      	b.n	8003ad8 <UART_SetConfig+0x284>
 800397a:	2302      	movs	r3, #2
 800397c:	76fb      	strb	r3, [r7, #27]
 800397e:	e0ab      	b.n	8003ad8 <UART_SetConfig+0x284>
 8003980:	2304      	movs	r3, #4
 8003982:	76fb      	strb	r3, [r7, #27]
 8003984:	e0a8      	b.n	8003ad8 <UART_SetConfig+0x284>
 8003986:	2308      	movs	r3, #8
 8003988:	76fb      	strb	r3, [r7, #27]
 800398a:	e0a5      	b.n	8003ad8 <UART_SetConfig+0x284>
 800398c:	2310      	movs	r3, #16
 800398e:	76fb      	strb	r3, [r7, #27]
 8003990:	bf00      	nop
 8003992:	e0a1      	b.n	8003ad8 <UART_SetConfig+0x284>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a6b      	ldr	r2, [pc, #428]	; (8003b48 <UART_SetConfig+0x2f4>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d120      	bne.n	80039e0 <UART_SetConfig+0x18c>
 800399e:	4b68      	ldr	r3, [pc, #416]	; (8003b40 <UART_SetConfig+0x2ec>)
 80039a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039a8:	2b10      	cmp	r3, #16
 80039aa:	d00f      	beq.n	80039cc <UART_SetConfig+0x178>
 80039ac:	2b10      	cmp	r3, #16
 80039ae:	d802      	bhi.n	80039b6 <UART_SetConfig+0x162>
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <UART_SetConfig+0x16c>
 80039b4:	e010      	b.n	80039d8 <UART_SetConfig+0x184>
 80039b6:	2b20      	cmp	r3, #32
 80039b8:	d005      	beq.n	80039c6 <UART_SetConfig+0x172>
 80039ba:	2b30      	cmp	r3, #48	; 0x30
 80039bc:	d009      	beq.n	80039d2 <UART_SetConfig+0x17e>
 80039be:	e00b      	b.n	80039d8 <UART_SetConfig+0x184>
 80039c0:	2300      	movs	r3, #0
 80039c2:	76fb      	strb	r3, [r7, #27]
 80039c4:	e088      	b.n	8003ad8 <UART_SetConfig+0x284>
 80039c6:	2302      	movs	r3, #2
 80039c8:	76fb      	strb	r3, [r7, #27]
 80039ca:	e085      	b.n	8003ad8 <UART_SetConfig+0x284>
 80039cc:	2304      	movs	r3, #4
 80039ce:	76fb      	strb	r3, [r7, #27]
 80039d0:	e082      	b.n	8003ad8 <UART_SetConfig+0x284>
 80039d2:	2308      	movs	r3, #8
 80039d4:	76fb      	strb	r3, [r7, #27]
 80039d6:	e07f      	b.n	8003ad8 <UART_SetConfig+0x284>
 80039d8:	2310      	movs	r3, #16
 80039da:	76fb      	strb	r3, [r7, #27]
 80039dc:	bf00      	nop
 80039de:	e07b      	b.n	8003ad8 <UART_SetConfig+0x284>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a59      	ldr	r2, [pc, #356]	; (8003b4c <UART_SetConfig+0x2f8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d120      	bne.n	8003a2c <UART_SetConfig+0x1d8>
 80039ea:	4b55      	ldr	r3, [pc, #340]	; (8003b40 <UART_SetConfig+0x2ec>)
 80039ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039f4:	2b40      	cmp	r3, #64	; 0x40
 80039f6:	d00f      	beq.n	8003a18 <UART_SetConfig+0x1c4>
 80039f8:	2b40      	cmp	r3, #64	; 0x40
 80039fa:	d802      	bhi.n	8003a02 <UART_SetConfig+0x1ae>
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <UART_SetConfig+0x1b8>
 8003a00:	e010      	b.n	8003a24 <UART_SetConfig+0x1d0>
 8003a02:	2b80      	cmp	r3, #128	; 0x80
 8003a04:	d005      	beq.n	8003a12 <UART_SetConfig+0x1be>
 8003a06:	2bc0      	cmp	r3, #192	; 0xc0
 8003a08:	d009      	beq.n	8003a1e <UART_SetConfig+0x1ca>
 8003a0a:	e00b      	b.n	8003a24 <UART_SetConfig+0x1d0>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	76fb      	strb	r3, [r7, #27]
 8003a10:	e062      	b.n	8003ad8 <UART_SetConfig+0x284>
 8003a12:	2302      	movs	r3, #2
 8003a14:	76fb      	strb	r3, [r7, #27]
 8003a16:	e05f      	b.n	8003ad8 <UART_SetConfig+0x284>
 8003a18:	2304      	movs	r3, #4
 8003a1a:	76fb      	strb	r3, [r7, #27]
 8003a1c:	e05c      	b.n	8003ad8 <UART_SetConfig+0x284>
 8003a1e:	2308      	movs	r3, #8
 8003a20:	76fb      	strb	r3, [r7, #27]
 8003a22:	e059      	b.n	8003ad8 <UART_SetConfig+0x284>
 8003a24:	2310      	movs	r3, #16
 8003a26:	76fb      	strb	r3, [r7, #27]
 8003a28:	bf00      	nop
 8003a2a:	e055      	b.n	8003ad8 <UART_SetConfig+0x284>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a47      	ldr	r2, [pc, #284]	; (8003b50 <UART_SetConfig+0x2fc>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d124      	bne.n	8003a80 <UART_SetConfig+0x22c>
 8003a36:	4b42      	ldr	r3, [pc, #264]	; (8003b40 <UART_SetConfig+0x2ec>)
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a44:	d012      	beq.n	8003a6c <UART_SetConfig+0x218>
 8003a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a4a:	d802      	bhi.n	8003a52 <UART_SetConfig+0x1fe>
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d007      	beq.n	8003a60 <UART_SetConfig+0x20c>
 8003a50:	e012      	b.n	8003a78 <UART_SetConfig+0x224>
 8003a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a56:	d006      	beq.n	8003a66 <UART_SetConfig+0x212>
 8003a58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a5c:	d009      	beq.n	8003a72 <UART_SetConfig+0x21e>
 8003a5e:	e00b      	b.n	8003a78 <UART_SetConfig+0x224>
 8003a60:	2300      	movs	r3, #0
 8003a62:	76fb      	strb	r3, [r7, #27]
 8003a64:	e038      	b.n	8003ad8 <UART_SetConfig+0x284>
 8003a66:	2302      	movs	r3, #2
 8003a68:	76fb      	strb	r3, [r7, #27]
 8003a6a:	e035      	b.n	8003ad8 <UART_SetConfig+0x284>
 8003a6c:	2304      	movs	r3, #4
 8003a6e:	76fb      	strb	r3, [r7, #27]
 8003a70:	e032      	b.n	8003ad8 <UART_SetConfig+0x284>
 8003a72:	2308      	movs	r3, #8
 8003a74:	76fb      	strb	r3, [r7, #27]
 8003a76:	e02f      	b.n	8003ad8 <UART_SetConfig+0x284>
 8003a78:	2310      	movs	r3, #16
 8003a7a:	76fb      	strb	r3, [r7, #27]
 8003a7c:	bf00      	nop
 8003a7e:	e02b      	b.n	8003ad8 <UART_SetConfig+0x284>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a2c      	ldr	r2, [pc, #176]	; (8003b38 <UART_SetConfig+0x2e4>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d124      	bne.n	8003ad4 <UART_SetConfig+0x280>
 8003a8a:	4b2d      	ldr	r3, [pc, #180]	; (8003b40 <UART_SetConfig+0x2ec>)
 8003a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a98:	d012      	beq.n	8003ac0 <UART_SetConfig+0x26c>
 8003a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a9e:	d802      	bhi.n	8003aa6 <UART_SetConfig+0x252>
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d007      	beq.n	8003ab4 <UART_SetConfig+0x260>
 8003aa4:	e012      	b.n	8003acc <UART_SetConfig+0x278>
 8003aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aaa:	d006      	beq.n	8003aba <UART_SetConfig+0x266>
 8003aac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ab0:	d009      	beq.n	8003ac6 <UART_SetConfig+0x272>
 8003ab2:	e00b      	b.n	8003acc <UART_SetConfig+0x278>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	76fb      	strb	r3, [r7, #27]
 8003ab8:	e00e      	b.n	8003ad8 <UART_SetConfig+0x284>
 8003aba:	2302      	movs	r3, #2
 8003abc:	76fb      	strb	r3, [r7, #27]
 8003abe:	e00b      	b.n	8003ad8 <UART_SetConfig+0x284>
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	76fb      	strb	r3, [r7, #27]
 8003ac4:	e008      	b.n	8003ad8 <UART_SetConfig+0x284>
 8003ac6:	2308      	movs	r3, #8
 8003ac8:	76fb      	strb	r3, [r7, #27]
 8003aca:	e005      	b.n	8003ad8 <UART_SetConfig+0x284>
 8003acc:	2310      	movs	r3, #16
 8003ace:	76fb      	strb	r3, [r7, #27]
 8003ad0:	bf00      	nop
 8003ad2:	e001      	b.n	8003ad8 <UART_SetConfig+0x284>
 8003ad4:	2310      	movs	r3, #16
 8003ad6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a16      	ldr	r2, [pc, #88]	; (8003b38 <UART_SetConfig+0x2e4>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	f040 8087 	bne.w	8003bf2 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ae4:	7efb      	ldrb	r3, [r7, #27]
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d836      	bhi.n	8003b58 <UART_SetConfig+0x304>
 8003aea:	a201      	add	r2, pc, #4	; (adr r2, 8003af0 <UART_SetConfig+0x29c>)
 8003aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af0:	08003b15 	.word	0x08003b15
 8003af4:	08003b59 	.word	0x08003b59
 8003af8:	08003b1d 	.word	0x08003b1d
 8003afc:	08003b59 	.word	0x08003b59
 8003b00:	08003b23 	.word	0x08003b23
 8003b04:	08003b59 	.word	0x08003b59
 8003b08:	08003b59 	.word	0x08003b59
 8003b0c:	08003b59 	.word	0x08003b59
 8003b10:	08003b2b 	.word	0x08003b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b14:	f7fe fe4e 	bl	80027b4 <HAL_RCC_GetPCLK1Freq>
 8003b18:	6178      	str	r0, [r7, #20]
        break;
 8003b1a:	e022      	b.n	8003b62 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b1c:	4b0d      	ldr	r3, [pc, #52]	; (8003b54 <UART_SetConfig+0x300>)
 8003b1e:	617b      	str	r3, [r7, #20]
        break;
 8003b20:	e01f      	b.n	8003b62 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b22:	f7fe fdb1 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8003b26:	6178      	str	r0, [r7, #20]
        break;
 8003b28:	e01b      	b.n	8003b62 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b2e:	617b      	str	r3, [r7, #20]
        break;
 8003b30:	e017      	b.n	8003b62 <UART_SetConfig+0x30e>
 8003b32:	bf00      	nop
 8003b34:	efff69f3 	.word	0xefff69f3
 8003b38:	40008000 	.word	0x40008000
 8003b3c:	40013800 	.word	0x40013800
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40004400 	.word	0x40004400
 8003b48:	40004800 	.word	0x40004800
 8003b4c:	40004c00 	.word	0x40004c00
 8003b50:	40005000 	.word	0x40005000
 8003b54:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	76bb      	strb	r3, [r7, #26]
        break;
 8003b60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 80f1 	beq.w	8003d4c <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	4413      	add	r3, r2
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d305      	bcc.n	8003b86 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d902      	bls.n	8003b8c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	76bb      	strb	r3, [r7, #26]
 8003b8a:	e0df      	b.n	8003d4c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	4619      	mov	r1, r3
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	f04f 0400 	mov.w	r4, #0
 8003b9c:	0214      	lsls	r4, r2, #8
 8003b9e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003ba2:	020b      	lsls	r3, r1, #8
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6852      	ldr	r2, [r2, #4]
 8003ba8:	0852      	lsrs	r2, r2, #1
 8003baa:	4611      	mov	r1, r2
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	eb13 0b01 	adds.w	fp, r3, r1
 8003bb4:	eb44 0c02 	adc.w	ip, r4, r2
 8003bb8:	4658      	mov	r0, fp
 8003bba:	4661      	mov	r1, ip
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f04f 0400 	mov.w	r4, #0
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4623      	mov	r3, r4
 8003bc8:	f7fc fb06 	bl	80001d8 <__aeabi_uldivmod>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	460c      	mov	r4, r1
 8003bd0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bd8:	d308      	bcc.n	8003bec <UART_SetConfig+0x398>
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003be0:	d204      	bcs.n	8003bec <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	60da      	str	r2, [r3, #12]
 8003bea:	e0af      	b.n	8003d4c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	76bb      	strb	r3, [r7, #26]
 8003bf0:	e0ac      	b.n	8003d4c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bfa:	d15b      	bne.n	8003cb4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003bfc:	7efb      	ldrb	r3, [r7, #27]
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d827      	bhi.n	8003c52 <UART_SetConfig+0x3fe>
 8003c02:	a201      	add	r2, pc, #4	; (adr r2, 8003c08 <UART_SetConfig+0x3b4>)
 8003c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c08:	08003c2d 	.word	0x08003c2d
 8003c0c:	08003c35 	.word	0x08003c35
 8003c10:	08003c3d 	.word	0x08003c3d
 8003c14:	08003c53 	.word	0x08003c53
 8003c18:	08003c43 	.word	0x08003c43
 8003c1c:	08003c53 	.word	0x08003c53
 8003c20:	08003c53 	.word	0x08003c53
 8003c24:	08003c53 	.word	0x08003c53
 8003c28:	08003c4b 	.word	0x08003c4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c2c:	f7fe fdc2 	bl	80027b4 <HAL_RCC_GetPCLK1Freq>
 8003c30:	6178      	str	r0, [r7, #20]
        break;
 8003c32:	e013      	b.n	8003c5c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c34:	f7fe fdd4 	bl	80027e0 <HAL_RCC_GetPCLK2Freq>
 8003c38:	6178      	str	r0, [r7, #20]
        break;
 8003c3a:	e00f      	b.n	8003c5c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c3c:	4b49      	ldr	r3, [pc, #292]	; (8003d64 <UART_SetConfig+0x510>)
 8003c3e:	617b      	str	r3, [r7, #20]
        break;
 8003c40:	e00c      	b.n	8003c5c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c42:	f7fe fd21 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8003c46:	6178      	str	r0, [r7, #20]
        break;
 8003c48:	e008      	b.n	8003c5c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c4e:	617b      	str	r3, [r7, #20]
        break;
 8003c50:	e004      	b.n	8003c5c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	76bb      	strb	r3, [r7, #26]
        break;
 8003c5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d074      	beq.n	8003d4c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	005a      	lsls	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	085b      	lsrs	r3, r3, #1
 8003c6c:	441a      	add	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	2b0f      	cmp	r3, #15
 8003c7e:	d916      	bls.n	8003cae <UART_SetConfig+0x45a>
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c86:	d212      	bcs.n	8003cae <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	f023 030f 	bic.w	r3, r3, #15
 8003c90:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	085b      	lsrs	r3, r3, #1
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	89fb      	ldrh	r3, [r7, #14]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	89fa      	ldrh	r2, [r7, #14]
 8003caa:	60da      	str	r2, [r3, #12]
 8003cac:	e04e      	b.n	8003d4c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	76bb      	strb	r3, [r7, #26]
 8003cb2:	e04b      	b.n	8003d4c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cb4:	7efb      	ldrb	r3, [r7, #27]
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d827      	bhi.n	8003d0a <UART_SetConfig+0x4b6>
 8003cba:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <UART_SetConfig+0x46c>)
 8003cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc0:	08003ce5 	.word	0x08003ce5
 8003cc4:	08003ced 	.word	0x08003ced
 8003cc8:	08003cf5 	.word	0x08003cf5
 8003ccc:	08003d0b 	.word	0x08003d0b
 8003cd0:	08003cfb 	.word	0x08003cfb
 8003cd4:	08003d0b 	.word	0x08003d0b
 8003cd8:	08003d0b 	.word	0x08003d0b
 8003cdc:	08003d0b 	.word	0x08003d0b
 8003ce0:	08003d03 	.word	0x08003d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ce4:	f7fe fd66 	bl	80027b4 <HAL_RCC_GetPCLK1Freq>
 8003ce8:	6178      	str	r0, [r7, #20]
        break;
 8003cea:	e013      	b.n	8003d14 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cec:	f7fe fd78 	bl	80027e0 <HAL_RCC_GetPCLK2Freq>
 8003cf0:	6178      	str	r0, [r7, #20]
        break;
 8003cf2:	e00f      	b.n	8003d14 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cf4:	4b1b      	ldr	r3, [pc, #108]	; (8003d64 <UART_SetConfig+0x510>)
 8003cf6:	617b      	str	r3, [r7, #20]
        break;
 8003cf8:	e00c      	b.n	8003d14 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cfa:	f7fe fcc5 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8003cfe:	6178      	str	r0, [r7, #20]
        break;
 8003d00:	e008      	b.n	8003d14 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d06:	617b      	str	r3, [r7, #20]
        break;
 8003d08:	e004      	b.n	8003d14 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	76bb      	strb	r3, [r7, #26]
        break;
 8003d12:	bf00      	nop
    }

    if (pclk != 0U)
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d018      	beq.n	8003d4c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	085a      	lsrs	r2, r3, #1
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	441a      	add	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	2b0f      	cmp	r3, #15
 8003d34:	d908      	bls.n	8003d48 <UART_SetConfig+0x4f4>
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d3c:	d204      	bcs.n	8003d48 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	60da      	str	r2, [r3, #12]
 8003d46:	e001      	b.n	8003d4c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003d58:	7ebb      	ldrb	r3, [r7, #26]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3720      	adds	r7, #32
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003d64:	00f42400 	.word	0x00f42400

08003d68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00a      	beq.n	8003d92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	f003 0310 	and.w	r3, r3, #16
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00a      	beq.n	8003e1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d01a      	beq.n	8003e7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e66:	d10a      	bne.n	8003e7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	605a      	str	r2, [r3, #4]
  }
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af02      	add	r7, sp, #8
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003eba:	f7fd fa55 	bl	8001368 <HAL_GetTick>
 8003ebe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d10e      	bne.n	8003eec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ece:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f82a 	bl	8003f36 <UART_WaitOnFlagUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e020      	b.n	8003f2e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d10e      	bne.n	8003f18 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003efa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f814 	bl	8003f36 <UART_WaitOnFlagUntilTimeout>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e00a      	b.n	8003f2e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2220      	movs	r2, #32
 8003f22:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b084      	sub	sp, #16
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	603b      	str	r3, [r7, #0]
 8003f42:	4613      	mov	r3, r2
 8003f44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f46:	e05d      	b.n	8004004 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f4e:	d059      	beq.n	8004004 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f50:	f7fd fa0a 	bl	8001368 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d302      	bcc.n	8003f66 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d11b      	bne.n	8003f9e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f74:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0201 	bic.w	r2, r2, #1
 8003f84:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e042      	b.n	8004024 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d02b      	beq.n	8004004 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fba:	d123      	bne.n	8004004 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fc4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fd4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0201 	bic.w	r2, r2, #1
 8003fe4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e00f      	b.n	8004024 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	69da      	ldr	r2, [r3, #28]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	4013      	ands	r3, r2
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	429a      	cmp	r2, r3
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	461a      	mov	r2, r3
 800401c:	79fb      	ldrb	r3, [r7, #7]
 800401e:	429a      	cmp	r2, r3
 8004020:	d092      	beq.n	8003f48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004042:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0201 	bic.w	r2, r2, #1
 8004052:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004078:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f7ff fbd8 	bl	8003840 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004090:	bf00      	nop
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040ae:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2220      	movs	r2, #32
 80040b4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff fbb5 	bl	800382c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040c2:	bf00      	nop
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80040d8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040de:	2b22      	cmp	r3, #34	; 0x22
 80040e0:	d13a      	bne.n	8004158 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80040e8:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80040ea:	89bb      	ldrh	r3, [r7, #12]
 80040ec:	b2d9      	uxtb	r1, r3
 80040ee:	89fb      	ldrh	r3, [r7, #14]
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f6:	400a      	ands	r2, r1
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d123      	bne.n	800416c <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004132:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0201 	bic.w	r2, r2, #1
 8004142:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2220      	movs	r2, #32
 8004148:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7fd f837 	bl	80011c4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004156:	e009      	b.n	800416c <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	8b1b      	ldrh	r3, [r3, #24]
 800415e:	b29a      	uxth	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 0208 	orr.w	r2, r2, #8
 8004168:	b292      	uxth	r2, r2
 800416a:	831a      	strh	r2, [r3, #24]
}
 800416c:	bf00      	nop
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004182:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004188:	2b22      	cmp	r3, #34	; 0x22
 800418a:	d13a      	bne.n	8004202 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004192:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004198:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800419a:	89ba      	ldrh	r2, [r7, #12]
 800419c:	89fb      	ldrh	r3, [r7, #14]
 800419e:	4013      	ands	r3, r2
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041aa:	1c9a      	adds	r2, r3, #2
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d123      	bne.n	8004216 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041dc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0201 	bic.w	r2, r2, #1
 80041ec:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2220      	movs	r2, #32
 80041f2:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fc ffe2 	bl	80011c4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004200:	e009      	b.n	8004216 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	8b1b      	ldrh	r3, [r3, #24]
 8004208:	b29a      	uxth	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 0208 	orr.w	r2, r2, #8
 8004212:	b292      	uxth	r2, r2
 8004214:	831a      	strh	r2, [r3, #24]
}
 8004216:	bf00      	nop
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
	...

08004234 <__libc_init_array>:
 8004234:	b570      	push	{r4, r5, r6, lr}
 8004236:	4e0d      	ldr	r6, [pc, #52]	; (800426c <__libc_init_array+0x38>)
 8004238:	4c0d      	ldr	r4, [pc, #52]	; (8004270 <__libc_init_array+0x3c>)
 800423a:	1ba4      	subs	r4, r4, r6
 800423c:	10a4      	asrs	r4, r4, #2
 800423e:	2500      	movs	r5, #0
 8004240:	42a5      	cmp	r5, r4
 8004242:	d109      	bne.n	8004258 <__libc_init_array+0x24>
 8004244:	4e0b      	ldr	r6, [pc, #44]	; (8004274 <__libc_init_array+0x40>)
 8004246:	4c0c      	ldr	r4, [pc, #48]	; (8004278 <__libc_init_array+0x44>)
 8004248:	f000 f820 	bl	800428c <_init>
 800424c:	1ba4      	subs	r4, r4, r6
 800424e:	10a4      	asrs	r4, r4, #2
 8004250:	2500      	movs	r5, #0
 8004252:	42a5      	cmp	r5, r4
 8004254:	d105      	bne.n	8004262 <__libc_init_array+0x2e>
 8004256:	bd70      	pop	{r4, r5, r6, pc}
 8004258:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800425c:	4798      	blx	r3
 800425e:	3501      	adds	r5, #1
 8004260:	e7ee      	b.n	8004240 <__libc_init_array+0xc>
 8004262:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004266:	4798      	blx	r3
 8004268:	3501      	adds	r5, #1
 800426a:	e7f2      	b.n	8004252 <__libc_init_array+0x1e>
 800426c:	08004540 	.word	0x08004540
 8004270:	08004540 	.word	0x08004540
 8004274:	08004540 	.word	0x08004540
 8004278:	08004544 	.word	0x08004544

0800427c <memset>:
 800427c:	4402      	add	r2, r0
 800427e:	4603      	mov	r3, r0
 8004280:	4293      	cmp	r3, r2
 8004282:	d100      	bne.n	8004286 <memset+0xa>
 8004284:	4770      	bx	lr
 8004286:	f803 1b01 	strb.w	r1, [r3], #1
 800428a:	e7f9      	b.n	8004280 <memset+0x4>

0800428c <_init>:
 800428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428e:	bf00      	nop
 8004290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004292:	bc08      	pop	{r3}
 8004294:	469e      	mov	lr, r3
 8004296:	4770      	bx	lr

08004298 <_fini>:
 8004298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429a:	bf00      	nop
 800429c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429e:	bc08      	pop	{r3}
 80042a0:	469e      	mov	lr, r3
 80042a2:	4770      	bx	lr
